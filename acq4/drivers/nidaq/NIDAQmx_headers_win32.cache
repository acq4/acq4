(dp0
S'version'
p1
I22
sS'fileOrder'
p2
(lp3
S'acq4\\drivers\\nidaq\\NIDAQmx.h'
p4
asS'fileDefs'
p5
(dp6
N(dp7
S'functions'
p8
(dp9
sS'enums'
p10
(dp11
sS'variables'
p12
(dp13
sS'macros'
p14
(dp15
sS'unions'
p16
(dp17
sS'values'
p18
(dp19
sS'fnmacros'
p20
(dp21
sS'structs'
p22
(dp23
sS'types'
p24
(dp25
S'__int64'
p26
S'long long'
p27
sssS'NIDAQmx.h'
p28
(dp29
g8
(dp30
S'DAQmxSetSampClkSrc'
p31
((lp32
S'int32'
p33
aS'__stdcall'
p34
a((S'taskHandle'
p35
(lp36
S'TaskHandle'
p37
aNtp38
(S'data'
p39
(lp40
S'char'
p41
aS'*'
p42
aNtp43
tp44
tp45
sS'DAQmxSetCITwoEdgeSepSecondDigSyncEnable'
p46
((lp47
S'int32'
p48
ag34
a((S'taskHandle'
p49
(lp50
S'TaskHandle'
p51
aNtp52
(S'channel'
p53
(lp54
S'char'
p55
a(lp56
I-1
aaNtp57
(S'data'
p58
(lp59
S'bool32'
p60
aNtp61
tp62
tp63
sS'DAQmxTaskControl'
p64
((lp65
S'int32'
p66
ag34
a((S'taskHandle'
p67
(lp68
S'TaskHandle'
p69
aNtp70
(S'action'
p71
(lp72
S'int32'
p73
aNtp74
tp75
tp76
sS'DAQmxGetReadSleepTime'
p77
((lp78
S'int32'
p79
ag34
a((S'taskHandle'
p80
(lp81
S'TaskHandle'
p82
aNtp83
(S'data'
p84
(lp85
S'float64'
p86
ag42
aNtp87
tp88
tp89
sS'DAQmxGetCIDataXferMech'
p90
((lp91
S'int32'
p92
ag34
a((S'taskHandle'
p93
(lp94
S'TaskHandle'
p95
aNtp96
(S'channel'
p97
(lp98
S'char'
p99
a(lp100
I-1
aaNtp101
(S'data'
p102
(lp103
S'int32'
p104
ag42
aNtp105
tp106
tp107
sS'DAQmxResetAIDataXferCustomThreshold'
p108
((lp109
S'int32'
p110
ag34
a((S'taskHandle'
p111
(lp112
S'TaskHandle'
p113
aNtp114
(S'channel'
p115
(lp116
S'char'
p117
a(lp118
I-1
aaNtp119
tp120
tp121
sS'DAQmxLoadTask'
p122
((lp123
S'int32'
p124
ag34
a((S'taskName'
p125
(lp126
S'char'
p127
a(lp128
I-1
aaNtp129
(S'taskHandle'
p130
(lp131
S'TaskHandle'
p132
ag42
aNtp133
tp134
tp135
sS'DAQmxCreateAIResistanceChan'
p136
((lp137
S'int32'
p138
ag34
a((S'taskHandle'
p139
(lp140
S'TaskHandle'
p141
aNtp142
(S'physicalChannel'
p143
(lp144
S'char'
p145
a(lp146
I-1
aaNtp147
(S'nameToAssignToChannel'
p148
(lp149
S'char'
p150
a(lp151
I-1
aaNtp152
(S'minVal'
p153
(lp154
S'float64'
p155
aNtp156
(S'maxVal'
p157
(lp158
S'float64'
p159
aNtp160
(S'units'
p161
(lp162
S'int32'
p163
aNtp164
(S'resistanceConfig'
p165
(lp166
S'int32'
p167
aNtp168
(S'currentExcitSource'
p169
(lp170
S'int32'
p171
aNtp172
(S'currentExcitVal'
p173
(lp174
S'float64'
p175
aNtp176
(S'customScaleName'
p177
(lp178
S'char'
p179
a(lp180
I-1
aaNtp181
tp182
tp183
sS'DAQmxGetCICountEdgesActiveEdge'
p184
((lp185
S'int32'
p186
ag34
a((S'taskHandle'
p187
(lp188
S'TaskHandle'
p189
aNtp190
(S'channel'
p191
(lp192
S'char'
p193
a(lp194
I-1
aaNtp195
(S'data'
p196
(lp197
S'int32'
p198
ag42
aNtp199
tp200
tp201
sS'DAQmxGetSysDevNames'
p202
((lp203
S'int32'
p204
ag34
a((S'data'
p205
(lp206
S'char'
p207
ag42
aNtp208
(S'bufferSize'
p209
(lp210
S'uInt32'
p211
aNtp212
tp213
tp214
sS'DAQmxSwitchCreateScanList'
p215
((lp216
S'int32'
p217
ag34
a((S'scanList'
p218
(lp219
S'char'
p220
a(lp221
I-1
aaNtp222
(S'taskHandle'
p223
(lp224
S'TaskHandle'
p225
ag42
aNtp226
tp227
tp228
sS'DAQmxResetAITempUnits'
p229
((lp230
S'int32'
p231
ag34
a((S'taskHandle'
p232
(lp233
S'TaskHandle'
p234
aNtp235
(S'channel'
p236
(lp237
S'char'
p238
a(lp239
I-1
aaNtp240
tp241
tp242
sS'DAQmxGetAIStrainUnits'
p243
((lp244
S'int32'
p245
ag34
a((S'taskHandle'
p246
(lp247
S'TaskHandle'
p248
aNtp249
(S'channel'
p250
(lp251
S'char'
p252
a(lp253
I-1
aaNtp254
(S'data'
p255
(lp256
S'int32'
p257
ag42
aNtp258
tp259
tp260
sS'DAQmxGetSampClkDigFltrEnable'
p261
((lp262
S'int32'
p263
ag34
a((S'taskHandle'
p264
(lp265
S'TaskHandle'
p266
aNtp267
(S'data'
p268
(lp269
S'bool32'
p270
ag42
aNtp271
tp272
tp273
sS'DAQmxGetAIExcitActualVal'
p274
((lp275
S'int32'
p276
ag34
a((S'taskHandle'
p277
(lp278
S'TaskHandle'
p279
aNtp280
(S'channel'
p281
(lp282
S'char'
p283
a(lp284
I-1
aaNtp285
(S'data'
p286
(lp287
S'float64'
p288
ag42
aNtp289
tp290
tp291
sS'DAQmxGetCITimestampInitialSeconds'
p292
((lp293
S'int32'
p294
ag34
a((S'taskHandle'
p295
(lp296
S'TaskHandle'
p297
aNtp298
(S'channel'
p299
(lp300
S'char'
p301
a(lp302
I-1
aaNtp303
(S'data'
p304
(lp305
S'uInt32'
p306
ag42
aNtp307
tp308
tp309
sS'DAQmxSetCOPulseFreqInitialDelay'
p310
((lp311
S'int32'
p312
ag34
a((S'taskHandle'
p313
(lp314
S'TaskHandle'
p315
aNtp316
(S'channel'
p317
(lp318
S'char'
p319
a(lp320
I-1
aaNtp321
(S'data'
p322
(lp323
S'float64'
p324
aNtp325
tp326
tp327
sS'DAQmxSetSwitchDevAutoConnAnlgBus'
p328
((lp329
S'int32'
p330
ag34
a((S'deviceName'
p331
(lp332
S'char'
p333
a(lp334
I-1
aaNtp335
(S'data'
p336
(lp337
S'bool32'
p338
aNtp339
tp340
tp341
sS'DAQmxSetDigEdgeArmStartTrigDigFltrTimebaseRate'
p342
((lp343
S'int32'
p344
ag34
a((S'taskHandle'
p345
(lp346
S'TaskHandle'
p347
aNtp348
(S'data'
p349
(lp350
S'float64'
p351
aNtp352
tp353
tp354
sS'DAQmxSetCIEncoderBInputDigSyncEnable'
p355
((lp356
S'int32'
p357
ag34
a((S'taskHandle'
p358
(lp359
S'TaskHandle'
p360
aNtp361
(S'channel'
p362
(lp363
S'char'
p364
a(lp365
I-1
aaNtp366
(S'data'
p367
(lp368
S'bool32'
p369
aNtp370
tp371
tp372
sS'DAQmxResetAIChanCalScaleType'
p373
((lp374
S'int32'
p375
ag34
a((S'taskHandle'
p376
(lp377
S'TaskHandle'
p378
aNtp379
(S'channel'
p380
(lp381
S'char'
p382
a(lp383
I-1
aaNtp384
tp385
tp386
sS'DAQmxResetCIFreqDigSyncEnable'
p387
((lp388
S'int32'
p389
ag34
a((S'taskHandle'
p390
(lp391
S'TaskHandle'
p392
aNtp393
(S'channel'
p394
(lp395
S'char'
p396
a(lp397
I-1
aaNtp398
tp399
tp400
sS'DAQmxGetAIChanCalVerifRefVals'
p401
((lp402
S'int32'
p403
ag34
a((S'taskHandle'
p404
(lp405
S'TaskHandle'
p406
aNtp407
(S'channel'
p408
(lp409
S'char'
p410
a(lp411
I-1
aaNtp412
(S'data'
p413
(lp414
S'float64'
p415
ag42
aNtp416
(S'arraySizeInSamples'
p417
(lp418
S'uInt32'
p419
aNtp420
tp421
tp422
sS'DAQmxGetAnlgEdgeRefTrigSlope'
p423
((lp424
S'int32'
p425
ag34
a((S'taskHandle'
p426
(lp427
S'TaskHandle'
p428
aNtp429
(S'data'
p430
(lp431
S'int32'
p432
ag42
aNtp433
tp434
tp435
sS'DAQmxGetDigEdgeRefTrigEdge'
p436
((lp437
S'int32'
p438
ag34
a((S'taskHandle'
p439
(lp440
S'TaskHandle'
p441
aNtp442
(S'data'
p443
(lp444
S'int32'
p445
ag42
aNtp446
tp447
tp448
sS'DAQmxSetHshkTrigType'
p449
((lp450
S'int32'
p451
ag34
a((S'taskHandle'
p452
(lp453
S'TaskHandle'
p454
aNtp455
(S'data'
p456
(lp457
S'int32'
p458
aNtp459
tp460
tp461
sS'DAQmxSetWriteWaitMode'
p462
((lp463
S'int32'
p464
ag34
a((S'taskHandle'
p465
(lp466
S'TaskHandle'
p467
aNtp468
(S'data'
p469
(lp470
S'int32'
p471
aNtp472
tp473
tp474
sS'DAQmxSetAIConvSrc'
p475
((lp476
S'int32'
p477
ag34
a((S'taskHandle'
p478
(lp479
S'TaskHandle'
p480
aNtp481
(S'data'
p482
(lp483
S'char'
p484
ag42
aNtp485
tp486
tp487
sS'DAQmxTristateOutputTerm'
p488
((lp489
S'int32'
p490
ag34
a((S'outputTerminal'
p491
(lp492
S'char'
p493
a(lp494
I-1
aaNtp495
tp496
tp497
sS'DAQmxGetExportedSampClkOutputBehavior'
p498
((lp499
S'int32'
p500
ag34
a((S'taskHandle'
p501
(lp502
S'TaskHandle'
p503
aNtp504
(S'data'
p505
(lp506
S'int32'
p507
ag42
aNtp508
tp509
tp510
sS'DAQmxGetPersistedChanAllowInteractiveDeletion'
p511
((lp512
S'int32'
p513
ag34
a((S'channel'
p514
(lp515
S'char'
p516
a(lp517
I-1
aaNtp518
(S'data'
p519
(lp520
S'bool32'
p521
ag42
aNtp522
tp523
tp524
sS'DAQmxGetAIAccelSensitivityUnits'
p525
((lp526
S'int32'
p527
ag34
a((S'taskHandle'
p528
(lp529
S'TaskHandle'
p530
aNtp531
(S'channel'
p532
(lp533
S'char'
p534
a(lp535
I-1
aaNtp536
(S'data'
p537
(lp538
S'int32'
p539
ag42
aNtp540
tp541
tp542
sS'DAQmxCreateCITwoEdgeSepChan'
p543
((lp544
S'int32'
p545
ag34
a((S'taskHandle'
p546
(lp547
S'TaskHandle'
p548
aNtp549
(S'counter'
p550
(lp551
S'char'
p552
a(lp553
I-1
aaNtp554
(S'nameToAssignToChannel'
p555
(lp556
S'char'
p557
a(lp558
I-1
aaNtp559
(S'minVal'
p560
(lp561
S'float64'
p562
aNtp563
(S'maxVal'
p564
(lp565
S'float64'
p566
aNtp567
(S'units'
p568
(lp569
S'int32'
p570
aNtp571
(S'firstEdge'
p572
(lp573
S'int32'
p574
aNtp575
(S'secondEdge'
p576
(lp577
S'int32'
p578
aNtp579
(S'customScaleName'
p580
(lp581
S'char'
p582
a(lp583
I-1
aaNtp584
tp585
tp586
sS'DAQmxGetCISemiPeriodDigFltrMinPulseWidth'
p587
((lp588
S'int32'
p589
ag34
a((S'taskHandle'
p590
(lp591
S'TaskHandle'
p592
aNtp593
(S'channel'
p594
(lp595
S'char'
p596
a(lp597
I-1
aaNtp598
(S'data'
p599
(lp600
S'float64'
p601
ag42
aNtp602
tp603
tp604
sS'DAQmxRestoreLastExtCalConst'
p605
((lp606
S'int32'
p607
ag34
a((S'deviceName'
p608
(lp609
S'char'
p610
a(lp611
I-1
aaNtp612
tp613
tp614
sS'DAQmxSetHshkSampleInputDataWhen'
p615
((lp616
S'int32'
p617
ag34
a((S'taskHandle'
p618
(lp619
S'TaskHandle'
p620
aNtp621
(S'data'
p622
(lp623
S'int32'
p624
aNtp625
tp626
tp627
sS'DAQmxGetCITwoEdgeSepSecondDigFltrEnable'
p628
((lp629
S'int32'
p630
ag34
a((S'taskHandle'
p631
(lp632
S'TaskHandle'
p633
aNtp634
(S'channel'
p635
(lp636
S'char'
p637
a(lp638
I-1
aaNtp639
(S'data'
p640
(lp641
S'bool32'
p642
ag42
aNtp643
tp644
tp645
sS'DAQmxGetNthTaskChannel'
p646
((lp647
S'int32'
p648
ag34
a((S'taskHandle'
p649
(lp650
S'TaskHandle'
p651
aNtp652
(S'index'
p653
(lp654
S'uInt32'
p655
aNtp656
(S'buffer'
p657
(lp658
S'char'
p659
a(lp660
I-1
aaNtp661
(S'bufferSize'
p662
(lp663
S'int32'
p664
aNtp665
tp666
tp667
sS'DAQmxSetCIMin'
p668
((lp669
S'int32'
p670
ag34
a((S'taskHandle'
p671
(lp672
S'TaskHandle'
p673
aNtp674
(S'channel'
p675
(lp676
S'char'
p677
a(lp678
I-1
aaNtp679
(S'data'
p680
(lp681
S'float64'
p682
aNtp683
tp684
tp685
sS'DAQmxSetup1520Cal'
p686
((lp687
S'int32'
p688
ag34
a((S'calHandle'
p689
(lp690
S'uInt32'
p691
aNtp692
(S'channelNames'
p693
(lp694
S'char'
p695
a(lp696
I-1
aaNtp697
(S'gain'
p698
(lp699
S'float64'
p700
aNtp701
tp702
tp703
sS'DAQmxGetCIEncoderZInputDigFltrTimebaseSrc'
p704
((lp705
S'int32'
p706
ag34
a((S'taskHandle'
p707
(lp708
S'TaskHandle'
p709
aNtp710
(S'channel'
p711
(lp712
S'char'
p713
a(lp714
I-1
aaNtp715
(S'data'
p716
(lp717
S'char'
p718
ag42
aNtp719
(S'bufferSize'
p720
(lp721
S'uInt32'
p722
aNtp723
tp724
tp725
sS'DAQmxGetAITermCfg'
p726
((lp727
S'int32'
p728
ag34
a((S'taskHandle'
p729
(lp730
S'TaskHandle'
p731
aNtp732
(S'channel'
p733
(lp734
S'char'
p735
a(lp736
I-1
aaNtp737
(S'data'
p738
(lp739
S'int32'
p740
ag42
aNtp741
tp742
tp743
sS'DAQmxSetCICustomScaleName'
p744
((lp745
S'int32'
p746
ag34
a((S'taskHandle'
p747
(lp748
S'TaskHandle'
p749
aNtp750
(S'channel'
p751
(lp752
S'char'
p753
a(lp754
I-1
aaNtp755
(S'data'
p756
(lp757
S'char'
p758
ag42
aNtp759
tp760
tp761
sS'DAQmxSetAnlgWinStartTrigSrc'
p762
((lp763
S'int32'
p764
ag34
a((S'taskHandle'
p765
(lp766
S'TaskHandle'
p767
aNtp768
(S'data'
p769
(lp770
S'char'
p771
ag42
aNtp772
tp773
tp774
sS'DAQmxDisableRefTrig'
p775
((lp776
S'int32'
p777
ag34
a((S'taskHandle'
p778
(lp779
S'TaskHandle'
p780
aNtp781
tp782
tp783
sS'DAQmxResetAIBridgeShuntCalGainAdjust'
p784
((lp785
S'int32'
p786
ag34
a((S'taskHandle'
p787
(lp788
S'TaskHandle'
p789
aNtp790
(S'channel'
p791
(lp792
S'char'
p793
a(lp794
I-1
aaNtp795
tp796
tp797
sS'DAQmxSetAIThrmcplType'
p798
((lp799
S'int32'
p800
ag34
a((S'taskHandle'
p801
(lp802
S'TaskHandle'
p803
aNtp804
(S'channel'
p805
(lp806
S'char'
p807
a(lp808
I-1
aaNtp809
(S'data'
p810
(lp811
S'int32'
p812
aNtp813
tp814
tp815
sS'DAQmxResetExportedDividedSampClkTimebaseOutputTerm'
p816
((lp817
S'int32'
p818
ag34
a((S'taskHandle'
p819
(lp820
S'TaskHandle'
p821
aNtp822
tp823
tp824
sS'DAQmxResetAOMax'
p825
((lp826
S'int32'
p827
ag34
a((S'taskHandle'
p828
(lp829
S'TaskHandle'
p830
aNtp831
(S'channel'
p832
(lp833
S'char'
p834
a(lp835
I-1
aaNtp836
tp837
tp838
sS'DAQmxSetAIInputSrc'
p839
((lp840
S'int32'
p841
ag34
a((S'taskHandle'
p842
(lp843
S'TaskHandle'
p844
aNtp845
(S'channel'
p846
(lp847
S'char'
p848
a(lp849
I-1
aaNtp850
(S'data'
p851
(lp852
S'char'
p853
ag42
aNtp854
tp855
tp856
sS'DAQmxSetAnlgWinRefTrigWhen'
p857
((lp858
S'int32'
p859
ag34
a((S'taskHandle'
p860
(lp861
S'TaskHandle'
p862
aNtp863
(S'data'
p864
(lp865
S'int32'
p866
aNtp867
tp868
tp869
sS'DAQmxGetAIRawDataCompressionType'
p870
((lp871
S'int32'
p872
ag34
a((S'taskHandle'
p873
(lp874
S'TaskHandle'
p875
aNtp876
(S'channel'
p877
(lp878
S'char'
p879
a(lp880
I-1
aaNtp881
(S'data'
p882
(lp883
S'int32'
p884
ag42
aNtp885
tp886
tp887
sS'DAQmxMSeriesCalAdjust'
p888
((lp889
S'int32'
p890
ag34
a((S'calHandle'
p891
(lp892
S'uInt32'
p893
aNtp894
(S'referenceVoltage'
p895
(lp896
S'float64'
p897
aNtp898
tp899
tp900
sS'DAQmxGetAIACExcitWireMode'
p901
((lp902
S'int32'
p903
ag34
a((S'taskHandle'
p904
(lp905
S'TaskHandle'
p906
aNtp907
(S'channel'
p908
(lp909
S'char'
p910
a(lp911
I-1
aaNtp912
(S'data'
p913
(lp914
S'int32'
p915
ag42
aNtp916
tp917
tp918
sS'DAQmxCfgBurstHandshakingTimingImportClock'
p919
((lp920
S'int32'
p921
ag34
a((S'taskHandle'
p922
(lp923
S'TaskHandle'
p924
aNtp925
(S'sampleMode'
p926
(lp927
S'int32'
p928
aNtp929
(S'sampsPerChan'
p930
(lp931
S'uInt64'
p932
aNtp933
(S'sampleClkRate'
p934
(lp935
S'float64'
p936
aNtp937
(S'sampleClkSrc'
p938
(lp939
S'char'
p940
a(lp941
I-1
aaNtp942
(S'sampleClkActiveEdge'
p943
(lp944
S'int32'
p945
aNtp946
(S'pauseWhen'
p947
(lp948
S'int32'
p949
aNtp950
(S'readyEventActiveLevel'
p951
(lp952
S'int32'
p953
aNtp954
tp955
tp956
sS'DAQmxResetExported20MHzTimebaseOutputTerm'
p957
((lp958
S'int32'
p959
ag34
a((S'taskHandle'
p960
(lp961
S'TaskHandle'
p962
aNtp963
tp964
tp965
sS'DAQmxGetDigEdgeArmStartTrigSrc'
p966
((lp967
S'int32'
p968
ag34
a((S'taskHandle'
p969
(lp970
S'TaskHandle'
p971
aNtp972
(S'data'
p973
(lp974
S'char'
p975
ag42
aNtp976
(S'bufferSize'
p977
(lp978
S'uInt32'
p979
aNtp980
tp981
tp982
sS'DAQmxCreateAIVoltageChanWithExcit'
p983
((lp984
S'int32'
p985
ag34
a((S'taskHandle'
p986
(lp987
S'TaskHandle'
p988
aNtp989
(S'physicalChannel'
p990
(lp991
S'char'
p992
a(lp993
I-1
aaNtp994
(S'nameToAssignToChannel'
p995
(lp996
S'char'
p997
a(lp998
I-1
aaNtp999
(S'terminalConfig'
p1000
(lp1001
S'int32'
p1002
aNtp1003
(S'minVal'
p1004
(lp1005
S'float64'
p1006
aNtp1007
(S'maxVal'
p1008
(lp1009
S'float64'
p1010
aNtp1011
(S'units'
p1012
(lp1013
S'int32'
p1014
aNtp1015
(S'bridgeConfig'
p1016
(lp1017
S'int32'
p1018
aNtp1019
(S'voltageExcitSource'
p1020
(lp1021
S'int32'
p1022
aNtp1023
(S'voltageExcitVal'
p1024
(lp1025
S'float64'
p1026
aNtp1027
(S'useExcitForScaling'
p1028
(lp1029
S'bool32'
p1030
aNtp1031
(S'customScaleName'
p1032
(lp1033
S'char'
p1034
a(lp1035
I-1
aaNtp1036
tp1037
tp1038
sS'DAQmxSetCIPeriodDigFltrEnable'
p1039
((lp1040
S'int32'
p1041
ag34
a((S'taskHandle'
p1042
(lp1043
S'TaskHandle'
p1044
aNtp1045
(S'channel'
p1046
(lp1047
S'char'
p1048
a(lp1049
I-1
aaNtp1050
(S'data'
p1051
(lp1052
S'bool32'
p1053
aNtp1054
tp1055
tp1056
sS'DAQmxSetCICtrTimebaseDigFltrTimebaseSrc'
p1057
((lp1058
S'int32'
p1059
ag34
a((S'taskHandle'
p1060
(lp1061
S'TaskHandle'
p1062
aNtp1063
(S'channel'
p1064
(lp1065
S'char'
p1066
a(lp1067
I-1
aaNtp1068
(S'data'
p1069
(lp1070
S'char'
p1071
ag42
aNtp1072
tp1073
tp1074
sS'DAQmxGetAIACExcitFreq'
p1075
((lp1076
S'int32'
p1077
ag34
a((S'taskHandle'
p1078
(lp1079
S'TaskHandle'
p1080
aNtp1081
(S'channel'
p1082
(lp1083
S'char'
p1084
a(lp1085
I-1
aaNtp1086
(S'data'
p1087
(lp1088
S'float64'
p1089
ag42
aNtp1090
tp1091
tp1092
sS'DAQmxCreateTEDSAIMicrophoneChan'
p1093
((lp1094
S'int32'
p1095
ag34
a((S'taskHandle'
p1096
(lp1097
S'TaskHandle'
p1098
aNtp1099
(S'physicalChannel'
p1100
(lp1101
S'char'
p1102
a(lp1103
I-1
aaNtp1104
(S'nameToAssignToChannel'
p1105
(lp1106
S'char'
p1107
a(lp1108
I-1
aaNtp1109
(S'terminalConfig'
p1110
(lp1111
S'int32'
p1112
aNtp1113
(S'units'
p1114
(lp1115
S'int32'
p1116
aNtp1117
(S'maxSndPressLevel'
p1118
(lp1119
S'float64'
p1120
aNtp1121
(S'currentExcitSource'
p1122
(lp1123
S'int32'
p1124
aNtp1125
(S'currentExcitVal'
p1126
(lp1127
S'float64'
p1128
aNtp1129
(S'customScaleName'
p1130
(lp1131
S'char'
p1132
a(lp1133
I-1
aaNtp1134
tp1135
tp1136
sS'DAQmxCfgDigEdgeAdvTrig'
p1137
((lp1138
S'int32'
p1139
ag34
a((S'taskHandle'
p1140
(lp1141
S'TaskHandle'
p1142
aNtp1143
(S'triggerSource'
p1144
(lp1145
S'char'
p1146
a(lp1147
I-1
aaNtp1148
(S'triggerEdge'
p1149
(lp1150
S'int32'
p1151
aNtp1152
tp1153
tp1154
sS'DAQmxSSeriesCalAdjust'
p1155
((lp1156
S'int32'
p1157
ag34
a((S'calHandle'
p1158
(lp1159
S'uInt32'
p1160
aNtp1161
(S'referenceVoltage'
p1162
(lp1163
S'float64'
p1164
aNtp1165
tp1166
tp1167
sS'DAQmxGetDigEdgeAdvTrigEdge'
p1168
((lp1169
S'int32'
p1170
ag34
a((S'taskHandle'
p1171
(lp1172
S'TaskHandle'
p1173
aNtp1174
(S'data'
p1175
(lp1176
S'int32'
p1177
ag42
aNtp1178
tp1179
tp1180
sS'DAQmxGetCISemiPeriodDigFltrEnable'
p1181
((lp1182
S'int32'
p1183
ag34
a((S'taskHandle'
p1184
(lp1185
S'TaskHandle'
p1186
aNtp1187
(S'channel'
p1188
(lp1189
S'char'
p1190
a(lp1191
I-1
aaNtp1192
(S'data'
p1193
(lp1194
S'bool32'
p1195
ag42
aNtp1196
tp1197
tp1198
sS'DAQmxGetAnlgWinPauseTrigCoupling'
p1199
((lp1200
S'int32'
p1201
ag34
a((S'taskHandle'
p1202
(lp1203
S'TaskHandle'
p1204
aNtp1205
(S'data'
p1206
(lp1207
S'int32'
p1208
ag42
aNtp1209
tp1210
tp1211
sS'DAQmxResetCIFreqDiv'
p1212
((lp1213
S'int32'
p1214
ag34
a((S'taskHandle'
p1215
(lp1216
S'TaskHandle'
p1217
aNtp1218
(S'channel'
p1219
(lp1220
S'char'
p1221
a(lp1222
I-1
aaNtp1223
tp1224
tp1225
sS'DAQmxGetCOPulseDone'
p1226
((lp1227
S'int32'
p1228
ag34
a((S'taskHandle'
p1229
(lp1230
S'TaskHandle'
p1231
aNtp1232
(S'channel'
p1233
(lp1234
S'char'
p1235
a(lp1236
I-1
aaNtp1237
(S'data'
p1238
(lp1239
S'bool32'
p1240
ag42
aNtp1241
tp1242
tp1243
sS'DAQmxSetSampClkTimebaseRate'
p1244
((lp1245
S'int32'
p1246
ag34
a((S'taskHandle'
p1247
(lp1248
S'TaskHandle'
p1249
aNtp1250
(S'data'
p1251
(lp1252
S'float64'
p1253
aNtp1254
tp1255
tp1256
sS'DAQmxGetCIPulseWidthDigFltrTimebaseSrc'
p1257
((lp1258
S'int32'
p1259
ag34
a((S'taskHandle'
p1260
(lp1261
S'TaskHandle'
p1262
aNtp1263
(S'channel'
p1264
(lp1265
S'char'
p1266
a(lp1267
I-1
aaNtp1268
(S'data'
p1269
(lp1270
S'char'
p1271
ag42
aNtp1272
(S'bufferSize'
p1273
(lp1274
S'uInt32'
p1275
aNtp1276
tp1277
tp1278
sS'DAQmxCfgBurstHandshakingTimingExportClock'
p1279
((lp1280
S'int32'
p1281
ag34
a((S'taskHandle'
p1282
(lp1283
S'TaskHandle'
p1284
aNtp1285
(S'sampleMode'
p1286
(lp1287
S'int32'
p1288
aNtp1289
(S'sampsPerChan'
p1290
(lp1291
S'uInt64'
p1292
aNtp1293
(S'sampleClkRate'
p1294
(lp1295
S'float64'
p1296
aNtp1297
(S'sampleClkOutpTerm'
p1298
(lp1299
S'char'
p1300
a(lp1301
I-1
aaNtp1302
(S'sampleClkPulsePolarity'
p1303
(lp1304
S'int32'
p1305
aNtp1306
(S'pauseWhen'
p1307
(lp1308
S'int32'
p1309
aNtp1310
(S'readyEventActiveLevel'
p1311
(lp1312
S'int32'
p1313
aNtp1314
tp1315
tp1316
sS'DAQmxGetDigLvlPauseTrigDigFltrTimebaseSrc'
p1317
((lp1318
S'int32'
p1319
ag34
a((S'taskHandle'
p1320
(lp1321
S'TaskHandle'
p1322
aNtp1323
(S'data'
p1324
(lp1325
S'char'
p1326
ag42
aNtp1327
(S'bufferSize'
p1328
(lp1329
S'uInt32'
p1330
aNtp1331
tp1332
tp1333
sS'DAQmxGetAIChanCalExpDate'
p1334
((lp1335
S'int32'
p1336
ag34
a((S'taskHandle'
p1337
(lp1338
S'TaskHandle'
p1339
aNtp1340
(S'channelName'
p1341
(lp1342
S'char'
p1343
a(lp1344
I-1
aaNtp1345
(S'year'
p1346
(lp1347
S'uInt32'
p1348
ag42
aNtp1349
(S'month'
p1350
(lp1351
S'uInt32'
p1352
ag42
aNtp1353
(S'day'
p1354
(lp1355
S'uInt32'
p1356
ag42
aNtp1357
(S'hour'
p1358
(lp1359
S'uInt32'
p1360
ag42
aNtp1361
(S'minute'
p1362
(lp1363
S'uInt32'
p1364
ag42
aNtp1365
tp1366
tp1367
sS'DAQmxResetAICurrentShuntResistance'
p1368
((lp1369
S'int32'
p1370
ag34
a((S'taskHandle'
p1371
(lp1372
S'TaskHandle'
p1373
aNtp1374
(S'channel'
p1375
(lp1376
S'char'
p1377
a(lp1378
I-1
aaNtp1379
tp1380
tp1381
sS'DAQmxSetDIDataXferReqCond'
p1382
((lp1383
S'int32'
p1384
ag34
a((S'taskHandle'
p1385
(lp1386
S'TaskHandle'
p1387
aNtp1388
(S'channel'
p1389
(lp1390
S'char'
p1391
a(lp1392
I-1
aaNtp1393
(S'data'
p1394
(lp1395
S'int32'
p1396
aNtp1397
tp1398
tp1399
sS'DAQmxResetSampClkTimebaseActiveEdge'
p1400
((lp1401
S'int32'
p1402
ag34
a((S'taskHandle'
p1403
(lp1404
S'TaskHandle'
p1405
aNtp1406
tp1407
tp1408
sS'DAQmxGetRefClkRate'
p1409
((lp1410
S'int32'
p1411
ag34
a((S'taskHandle'
p1412
(lp1413
S'TaskHandle'
p1414
aNtp1415
(S'data'
p1416
(lp1417
S'float64'
p1418
ag42
aNtp1419
tp1420
tp1421
sS'DAQmxSetExportedCtrOutEventToggleIdleState'
p1422
((lp1423
S'int32'
p1424
ag34
a((S'taskHandle'
p1425
(lp1426
S'TaskHandle'
p1427
aNtp1428
(S'data'
p1429
(lp1430
S'int32'
p1431
aNtp1432
tp1433
tp1434
sS'DAQmxCreateTEDSAIVoltageChanWithExcit'
p1435
((lp1436
S'int32'
p1437
ag34
a((S'taskHandle'
p1438
(lp1439
S'TaskHandle'
p1440
aNtp1441
(S'physicalChannel'
p1442
(lp1443
S'char'
p1444
a(lp1445
I-1
aaNtp1446
(S'nameToAssignToChannel'
p1447
(lp1448
S'char'
p1449
a(lp1450
I-1
aaNtp1451
(S'terminalConfig'
p1452
(lp1453
S'int32'
p1454
aNtp1455
(S'minVal'
p1456
(lp1457
S'float64'
p1458
aNtp1459
(S'maxVal'
p1460
(lp1461
S'float64'
p1462
aNtp1463
(S'units'
p1464
(lp1465
S'int32'
p1466
aNtp1467
(S'voltageExcitSource'
p1468
(lp1469
S'int32'
p1470
aNtp1471
(S'voltageExcitVal'
p1472
(lp1473
S'float64'
p1474
aNtp1475
(S'customScaleName'
p1476
(lp1477
S'char'
p1478
a(lp1479
I-1
aaNtp1480
tp1481
tp1482
sS'DAQmxGetAILowpassEnable'
p1483
((lp1484
S'int32'
p1485
ag34
a((S'taskHandle'
p1486
(lp1487
S'TaskHandle'
p1488
aNtp1489
(S'channel'
p1490
(lp1491
S'char'
p1492
a(lp1493
I-1
aaNtp1494
(S'data'
p1495
(lp1496
S'bool32'
p1497
ag42
aNtp1498
tp1499
tp1500
sS'DAQmxSetSampClkDigFltrTimebaseSrc'
p1501
((lp1502
S'int32'
p1503
ag34
a((S'taskHandle'
p1504
(lp1505
S'TaskHandle'
p1506
aNtp1507
(S'data'
p1508
(lp1509
S'char'
p1510
ag42
aNtp1511
tp1512
tp1513
sS'DAQmxGetCOOutputType'
p1514
((lp1515
S'int32'
p1516
ag34
a((S'taskHandle'
p1517
(lp1518
S'TaskHandle'
p1519
aNtp1520
(S'channel'
p1521
(lp1522
S'char'
p1523
a(lp1524
I-1
aaNtp1525
(S'data'
p1526
(lp1527
S'int32'
p1528
ag42
aNtp1529
tp1530
tp1531
sS'DAQmxResetStartTrigDelay'
p1532
((lp1533
S'int32'
p1534
ag34
a((S'taskHandle'
p1535
(lp1536
S'TaskHandle'
p1537
aNtp1538
tp1539
tp1540
sS'DAQmxCreateTEDSAIResistanceChan'
p1541
((lp1542
S'int32'
p1543
ag34
a((S'taskHandle'
p1544
(lp1545
S'TaskHandle'
p1546
aNtp1547
(S'physicalChannel'
p1548
(lp1549
S'char'
p1550
a(lp1551
I-1
aaNtp1552
(S'nameToAssignToChannel'
p1553
(lp1554
S'char'
p1555
a(lp1556
I-1
aaNtp1557
(S'minVal'
p1558
(lp1559
S'float64'
p1560
aNtp1561
(S'maxVal'
p1562
(lp1563
S'float64'
p1564
aNtp1565
(S'units'
p1566
(lp1567
S'int32'
p1568
aNtp1569
(S'resistanceConfig'
p1570
(lp1571
S'int32'
p1572
aNtp1573
(S'currentExcitSource'
p1574
(lp1575
S'int32'
p1576
aNtp1577
(S'currentExcitVal'
p1578
(lp1579
S'float64'
p1580
aNtp1581
(S'customScaleName'
p1582
(lp1583
S'char'
p1584
a(lp1585
I-1
aaNtp1586
tp1587
tp1588
sS'DAQmxSetDigEdgeStartTrigEdge'
p1589
((lp1590
S'int32'
p1591
ag34
a((S'taskHandle'
p1592
(lp1593
S'TaskHandle'
p1594
aNtp1595
(S'data'
p1596
(lp1597
S'int32'
p1598
aNtp1599
tp1600
tp1601
sS'DAQmxSetCIFreqDigFltrMinPulseWidth'
p1602
((lp1603
S'int32'
p1604
ag34
a((S'taskHandle'
p1605
(lp1606
S'TaskHandle'
p1607
aNtp1608
(S'channel'
p1609
(lp1610
S'char'
p1611
a(lp1612
I-1
aaNtp1613
(S'data'
p1614
(lp1615
S'float64'
p1616
aNtp1617
tp1618
tp1619
sS'DAQmxSetCICountEdgesCountDirDigFltrEnable'
p1620
((lp1621
S'int32'
p1622
ag34
a((S'taskHandle'
p1623
(lp1624
S'TaskHandle'
p1625
aNtp1626
(S'channel'
p1627
(lp1628
S'char'
p1629
a(lp1630
I-1
aaNtp1631
(S'data'
p1632
(lp1633
S'bool32'
p1634
aNtp1635
tp1636
tp1637
sS'DAQmxSetDigEdgeStartTrigSrc'
p1638
((lp1639
S'int32'
p1640
ag34
a((S'taskHandle'
p1641
(lp1642
S'TaskHandle'
p1643
aNtp1644
(S'data'
p1645
(lp1646
S'char'
p1647
ag42
aNtp1648
tp1649
tp1650
sS'DAQmxResetTrigAttribute'
p1651
((lp1652
S'int32'
p1653
ag34
a((S'taskHandle'
p1654
(lp1655
S'TaskHandle'
p1656
aNtp1657
(S'attribute'
p1658
(lp1659
S'int32'
p1660
aNtp1661
tp1662
tp1663
sS'DAQmxGetExportedHshkEventPulseWidth'
p1664
((lp1665
S'int32'
p1666
ag34
a((S'taskHandle'
p1667
(lp1668
S'TaskHandle'
p1669
aNtp1670
(S'data'
p1671
(lp1672
S'float64'
p1673
ag42
aNtp1674
tp1675
tp1676
sS'DAQmxGetAIMax'
p1677
((lp1678
S'int32'
p1679
ag34
a((S'taskHandle'
p1680
(lp1681
S'TaskHandle'
p1682
aNtp1683
(S'channel'
p1684
(lp1685
S'char'
p1686
a(lp1687
I-1
aaNtp1688
(S'data'
p1689
(lp1690
S'float64'
p1691
ag42
aNtp1692
tp1693
tp1694
sS'DAQmxResetAODACRngLow'
p1695
((lp1696
S'int32'
p1697
ag34
a((S'taskHandle'
p1698
(lp1699
S'TaskHandle'
p1700
aNtp1701
(S'channel'
p1702
(lp1703
S'char'
p1704
a(lp1705
I-1
aaNtp1706
tp1707
tp1708
sS'DAQmxResetAISampAndHoldEnable'
p1709
((lp1710
S'int32'
p1711
ag34
a((S'taskHandle'
p1712
(lp1713
S'TaskHandle'
p1714
aNtp1715
(S'channel'
p1716
(lp1717
S'char'
p1718
a(lp1719
I-1
aaNtp1720
tp1721
tp1722
sS'DAQmxResetAIChanCalVerifAcqVals'
p1723
((lp1724
S'int32'
p1725
ag34
a((S'taskHandle'
p1726
(lp1727
S'TaskHandle'
p1728
aNtp1729
(S'channel'
p1730
(lp1731
S'char'
p1732
a(lp1733
I-1
aaNtp1734
tp1735
tp1736
sS'DAQmxSetAOTermCfg'
p1737
((lp1738
S'int32'
p1739
ag34
a((S'taskHandle'
p1740
(lp1741
S'TaskHandle'
p1742
aNtp1743
(S'channel'
p1744
(lp1745
S'char'
p1746
a(lp1747
I-1
aaNtp1748
(S'data'
p1749
(lp1750
S'int32'
p1751
aNtp1752
tp1753
tp1754
sS'DAQmxSetCICountEdgesCountDirDigFltrTimebaseSrc'
p1755
((lp1756
S'int32'
p1757
ag34
a((S'taskHandle'
p1758
(lp1759
S'TaskHandle'
p1760
aNtp1761
(S'channel'
p1762
(lp1763
S'char'
p1764
a(lp1765
I-1
aaNtp1766
(S'data'
p1767
(lp1768
S'char'
p1769
ag42
aNtp1770
tp1771
tp1772
sS'DAQmxResetCISemiPeriodDigFltrEnable'
p1773
((lp1774
S'int32'
p1775
ag34
a((S'taskHandle'
p1776
(lp1777
S'TaskHandle'
p1778
aNtp1779
(S'channel'
p1780
(lp1781
S'char'
p1782
a(lp1783
I-1
aaNtp1784
tp1785
tp1786
sS'DAQmxSetAODACRefSrc'
p1787
((lp1788
S'int32'
p1789
ag34
a((S'taskHandle'
p1790
(lp1791
S'TaskHandle'
p1792
aNtp1793
(S'channel'
p1794
(lp1795
S'char'
p1796
a(lp1797
I-1
aaNtp1798
(S'data'
p1799
(lp1800
S'int32'
p1801
aNtp1802
tp1803
tp1804
sS'DAQmxPerformBridgeOffsetNullingCal'
p1805
((lp1806
S'int32'
p1807
ag34
a((S'taskHandle'
p1808
(lp1809
S'TaskHandle'
p1810
aNtp1811
(S'channel'
p1812
(lp1813
S'char'
p1814
a(lp1815
I-1
aaNtp1816
tp1817
tp1818
sS'DAQmxGetCITwoEdgeSepUnits'
p1819
((lp1820
S'int32'
p1821
ag34
a((S'taskHandle'
p1822
(lp1823
S'TaskHandle'
p1824
aNtp1825
(S'channel'
p1826
(lp1827
S'char'
p1828
a(lp1829
I-1
aaNtp1830
(S'data'
p1831
(lp1832
S'int32'
p1833
ag42
aNtp1834
tp1835
tp1836
sS'DAQmxSetAIChanCalTableScaledVals'
p1837
((lp1838
S'int32'
p1839
ag34
a((S'taskHandle'
p1840
(lp1841
S'TaskHandle'
p1842
aNtp1843
(S'channel'
p1844
(lp1845
S'char'
p1846
a(lp1847
I-1
aaNtp1848
(S'data'
p1849
(lp1850
S'float64'
p1851
ag42
aNtp1852
(S'arraySizeInSamples'
p1853
(lp1854
S'uInt32'
p1855
aNtp1856
tp1857
tp1858
sS'DAQmxGetDOOutputDriveType'
p1859
((lp1860
S'int32'
p1861
ag34
a((S'taskHandle'
p1862
(lp1863
S'TaskHandle'
p1864
aNtp1865
(S'channel'
p1866
(lp1867
S'char'
p1868
a(lp1869
I-1
aaNtp1870
(S'data'
p1871
(lp1872
S'int32'
p1873
ag42
aNtp1874
tp1875
tp1876
sS'DAQmxResetAnlgLvlPauseTrigCoupling'
p1877
((lp1878
S'int32'
p1879
ag34
a((S'taskHandle'
p1880
(lp1881
S'TaskHandle'
p1882
aNtp1883
tp1884
tp1885
sS'DAQmxGetCIPeriodDigFltrEnable'
p1886
((lp1887
S'int32'
p1888
ag34
a((S'taskHandle'
p1889
(lp1890
S'TaskHandle'
p1891
aNtp1892
(S'channel'
p1893
(lp1894
S'char'
p1895
a(lp1896
I-1
aaNtp1897
(S'data'
p1898
(lp1899
S'bool32'
p1900
ag42
aNtp1901
tp1902
tp1903
sS'DAQmxResetDigEdgeAdvTrigSrc'
p1904
((lp1905
S'int32'
p1906
ag34
a((S'taskHandle'
p1907
(lp1908
S'TaskHandle'
p1909
aNtp1910
tp1911
tp1912
sS'DAQmxGetAIRawSampSize'
p1913
((lp1914
S'int32'
p1915
ag34
a((S'taskHandle'
p1916
(lp1917
S'TaskHandle'
p1918
aNtp1919
(S'channel'
p1920
(lp1921
S'char'
p1922
a(lp1923
I-1
aaNtp1924
(S'data'
p1925
(lp1926
S'uInt32'
p1927
ag42
aNtp1928
tp1929
tp1930
sS'DAQmxGetSampClkMaxRate'
p1931
((lp1932
S'int32'
p1933
ag34
a((S'taskHandle'
p1934
(lp1935
S'TaskHandle'
p1936
aNtp1937
(S'data'
p1938
(lp1939
S'float64'
p1940
ag42
aNtp1941
tp1942
tp1943
sS'DAQmxResetAnlgWinRefTrigSrc'
p1944
((lp1945
S'int32'
p1946
ag34
a((S'taskHandle'
p1947
(lp1948
S'TaskHandle'
p1949
aNtp1950
tp1951
tp1952
sS'DAQmxSetCIEncoderZInputDigFltrMinPulseWidth'
p1953
((lp1954
S'int32'
p1955
ag34
a((S'taskHandle'
p1956
(lp1957
S'TaskHandle'
p1958
aNtp1959
(S'channel'
p1960
(lp1961
S'char'
p1962
a(lp1963
I-1
aaNtp1964
(S'data'
p1965
(lp1966
S'float64'
p1967
aNtp1968
tp1969
tp1970
sS'DAQmxGetAnlgEdgeStartTrigCoupling'
p1971
((lp1972
S'int32'
p1973
ag34
a((S'taskHandle'
p1974
(lp1975
S'TaskHandle'
p1976
aNtp1977
(S'data'
p1978
(lp1979
S'int32'
p1980
ag42
aNtp1981
tp1982
tp1983
sS'DAQmxGetCITwoEdgeSepSecondEdge'
p1984
((lp1985
S'int32'
p1986
ag34
a((S'taskHandle'
p1987
(lp1988
S'TaskHandle'
p1989
aNtp1990
(S'channel'
p1991
(lp1992
S'char'
p1993
a(lp1994
I-1
aaNtp1995
(S'data'
p1996
(lp1997
S'int32'
p1998
ag42
aNtp1999
tp2000
tp2001
sS'DAQmxGetSampTimingType'
p2002
((lp2003
S'int32'
p2004
ag34
a((S'taskHandle'
p2005
(lp2006
S'TaskHandle'
p2007
aNtp2008
(S'data'
p2009
(lp2010
S'int32'
p2011
ag42
aNtp2012
tp2013
tp2014
sS'DAQmxSetCIEncoderBInputDigFltrMinPulseWidth'
p2015
((lp2016
S'int32'
p2017
ag34
a((S'taskHandle'
p2018
(lp2019
S'TaskHandle'
p2020
aNtp2021
(S'channel'
p2022
(lp2023
S'char'
p2024
a(lp2025
I-1
aaNtp2026
(S'data'
p2027
(lp2028
S'float64'
p2029
aNtp2030
tp2031
tp2032
sS'DAQmxGetDevCOPhysicalChans'
p2033
((lp2034
S'int32'
p2035
ag34
a((S'device'
p2036
(lp2037
S'char'
p2038
a(lp2039
I-1
aaNtp2040
(S'data'
p2041
(lp2042
S'char'
p2043
ag42
aNtp2044
(S'bufferSize'
p2045
(lp2046
S'uInt32'
p2047
aNtp2048
tp2049
tp2050
sS'DAQmxResetDigLvlPauseTrigDigFltrEnable'
p2051
((lp2052
S'int32'
p2053
ag34
a((S'taskHandle'
p2054
(lp2055
S'TaskHandle'
p2056
aNtp2057
tp2058
tp2059
sS'DAQmxSwitchWaitForSettling'
p2060
((lp2061
S'int32'
p2062
ag34
a((S'deviceName'
p2063
(lp2064
S'char'
p2065
a(lp2066
I-1
aaNtp2067
tp2068
tp2069
sS'DAQmxSetCIFreqDigFltrTimebaseSrc'
p2070
((lp2071
S'int32'
p2072
ag34
a((S'taskHandle'
p2073
(lp2074
S'TaskHandle'
p2075
aNtp2076
(S'channel'
p2077
(lp2078
S'char'
p2079
a(lp2080
I-1
aaNtp2081
(S'data'
p2082
(lp2083
S'char'
p2084
ag42
aNtp2085
tp2086
tp2087
sS'DAQmxGetAIChanCalHasValidCalInfo'
p2088
((lp2089
S'int32'
p2090
ag34
a((S'taskHandle'
p2091
(lp2092
S'TaskHandle'
p2093
aNtp2094
(S'channel'
p2095
(lp2096
S'char'
p2097
a(lp2098
I-1
aaNtp2099
(S'data'
p2100
(lp2101
S'bool32'
p2102
ag42
aNtp2103
tp2104
tp2105
sS'DAQmxResetCIEncoderAInputTerm'
p2106
((lp2107
S'int32'
p2108
ag34
a((S'taskHandle'
p2109
(lp2110
S'TaskHandle'
p2111
aNtp2112
(S'channel'
p2113
(lp2114
S'char'
p2115
a(lp2116
I-1
aaNtp2117
tp2118
tp2119
sS'DAQmxDeviceSupportsCal'
p2120
((lp2121
S'int32'
p2122
ag34
a((S'deviceName'
p2123
(lp2124
S'char'
p2125
a(lp2126
I-1
aaNtp2127
(S'calSupported'
p2128
(lp2129
S'bool32'
p2130
ag42
aNtp2131
tp2132
tp2133
sS'DAQmxGetCalUserDefinedInfoMaxSize'
p2134
((lp2135
S'int32'
p2136
ag34
a((S'deviceName'
p2137
(lp2138
S'char'
p2139
a(lp2140
I-1
aaNtp2141
(S'data'
p2142
(lp2143
S'uInt32'
p2144
ag42
aNtp2145
tp2146
tp2147
sS'DAQmxSetAIExcitActualVal'
p2148
((lp2149
S'int32'
p2150
ag34
a((S'taskHandle'
p2151
(lp2152
S'TaskHandle'
p2153
aNtp2154
(S'channel'
p2155
(lp2156
S'char'
p2157
a(lp2158
I-1
aaNtp2159
(S'data'
p2160
(lp2161
S'float64'
p2162
aNtp2163
tp2164
tp2165
sS'DAQmxSetWriteRegenMode'
p2166
((lp2167
S'int32'
p2168
ag34
a((S'taskHandle'
p2169
(lp2170
S'TaskHandle'
p2171
aNtp2172
(S'data'
p2173
(lp2174
S'int32'
p2175
aNtp2176
tp2177
tp2178
sS'DAQmxResetCIPeriodDigFltrTimebaseSrc'
p2179
((lp2180
S'int32'
p2181
ag34
a((S'taskHandle'
p2182
(lp2183
S'TaskHandle'
p2184
aNtp2185
(S'channel'
p2186
(lp2187
S'char'
p2188
a(lp2189
I-1
aaNtp2190
tp2191
tp2192
sS'DAQmxGetAnlgWinRefTrigBtm'
p2193
((lp2194
S'int32'
p2195
ag34
a((S'taskHandle'
p2196
(lp2197
S'TaskHandle'
p2198
aNtp2199
(S'data'
p2200
(lp2201
S'float64'
p2202
ag42
aNtp2203
tp2204
tp2205
sS'DAQmxResetAnlgLvlPauseTrigSrc'
p2206
((lp2207
S'int32'
p2208
ag34
a((S'taskHandle'
p2209
(lp2210
S'TaskHandle'
p2211
aNtp2212
tp2213
tp2214
sS'DAQmxGetAITEDSUnits'
p2215
((lp2216
S'int32'
p2217
ag34
a((S'taskHandle'
p2218
(lp2219
S'TaskHandle'
p2220
aNtp2221
(S'channel'
p2222
(lp2223
S'char'
p2224
a(lp2225
I-1
aaNtp2226
(S'data'
p2227
(lp2228
S'char'
p2229
ag42
aNtp2230
(S'bufferSize'
p2231
(lp2232
S'uInt32'
p2233
aNtp2234
tp2235
tp2236
sS'DAQmxGetExportedSyncPulseEventOutputTerm'
p2237
((lp2238
S'int32'
p2239
ag34
a((S'taskHandle'
p2240
(lp2241
S'TaskHandle'
p2242
aNtp2243
(S'data'
p2244
(lp2245
S'char'
p2246
ag42
aNtp2247
(S'bufferSize'
p2248
(lp2249
S'uInt32'
p2250
aNtp2251
tp2252
tp2253
sS'DAQmxResetCOPulseFreqInitialDelay'
p2254
((lp2255
S'int32'
p2256
ag34
a((S'taskHandle'
p2257
(lp2258
S'TaskHandle'
p2259
aNtp2260
(S'channel'
p2261
(lp2262
S'char'
p2263
a(lp2264
I-1
aaNtp2265
tp2266
tp2267
sS'DAQmxSetDODataXferMech'
p2268
((lp2269
S'int32'
p2270
ag34
a((S'taskHandle'
p2271
(lp2272
S'TaskHandle'
p2273
aNtp2274
(S'channel'
p2275
(lp2276
S'char'
p2277
a(lp2278
I-1
aaNtp2279
(S'data'
p2280
(lp2281
S'int32'
p2282
aNtp2283
tp2284
tp2285
sS'DAQmxGetExtendedErrorInfo'
p2286
((lp2287
S'int32'
p2288
ag34
a((S'errorString'
p2289
(lp2290
S'char'
p2291
a(lp2292
I-1
aaNtp2293
(S'bufferSize'
p2294
(lp2295
S'uInt32'
p2296
aNtp2297
tp2298
tp2299
sS'DAQmxGetCIFreqMeasMeth'
p2300
((lp2301
S'int32'
p2302
ag34
a((S'taskHandle'
p2303
(lp2304
S'TaskHandle'
p2305
aNtp2306
(S'channel'
p2307
(lp2308
S'char'
p2309
a(lp2310
I-1
aaNtp2311
(S'data'
p2312
(lp2313
S'int32'
p2314
ag42
aNtp2315
tp2316
tp2317
sS'DAQmxCreateCILinEncoderChan'
p2318
((lp2319
S'int32'
p2320
ag34
a((S'taskHandle'
p2321
(lp2322
S'TaskHandle'
p2323
aNtp2324
(S'counter'
p2325
(lp2326
S'char'
p2327
a(lp2328
I-1
aaNtp2329
(S'nameToAssignToChannel'
p2330
(lp2331
S'char'
p2332
a(lp2333
I-1
aaNtp2334
(S'decodingType'
p2335
(lp2336
S'int32'
p2337
aNtp2338
(S'ZidxEnable'
p2339
(lp2340
S'bool32'
p2341
aNtp2342
(S'ZidxVal'
p2343
(lp2344
S'float64'
p2345
aNtp2346
(S'ZidxPhase'
p2347
(lp2348
S'int32'
p2349
aNtp2350
(S'units'
p2351
(lp2352
S'int32'
p2353
aNtp2354
(S'distPerPulse'
p2355
(lp2356
S'float64'
p2357
aNtp2358
(S'initialPos'
p2359
(lp2360
S'float64'
p2361
aNtp2362
(S'customScaleName'
p2363
(lp2364
S'char'
p2365
a(lp2366
I-1
aaNtp2367
tp2368
tp2369
sS'DAQmxResetReadRelativeTo'
p2370
((lp2371
S'int32'
p2372
ag34
a((S'taskHandle'
p2373
(lp2374
S'TaskHandle'
p2375
aNtp2376
tp2377
tp2378
sS'DAQmxSetHshkStartCond'
p2379
((lp2380
S'int32'
p2381
ag34
a((S'taskHandle'
p2382
(lp2383
S'TaskHandle'
p2384
aNtp2385
(S'data'
p2386
(lp2387
S'int32'
p2388
aNtp2389
tp2390
tp2391
sS'DAQmxGetDIDigFltrMinPulseWidth'
p2392
((lp2393
S'int32'
p2394
ag34
a((S'taskHandle'
p2395
(lp2396
S'TaskHandle'
p2397
aNtp2398
(S'channel'
p2399
(lp2400
S'char'
p2401
a(lp2402
I-1
aaNtp2403
(S'data'
p2404
(lp2405
S'float64'
p2406
ag42
aNtp2407
tp2408
tp2409
sS'DAQmxResetChanDescr'
p2410
((lp2411
S'int32'
p2412
ag34
a((S'taskHandle'
p2413
(lp2414
S'TaskHandle'
p2415
aNtp2416
(S'channel'
p2417
(lp2418
S'char'
p2419
a(lp2420
I-1
aaNtp2421
tp2422
tp2423
sS'DAQmxGetAILVDTSensitivity'
p2424
((lp2425
S'int32'
p2426
ag34
a((S'taskHandle'
p2427
(lp2428
S'TaskHandle'
p2429
aNtp2430
(S'channel'
p2431
(lp2432
S'char'
p2433
a(lp2434
I-1
aaNtp2435
(S'data'
p2436
(lp2437
S'float64'
p2438
ag42
aNtp2439
tp2440
tp2441
sS'DAQmxCfgHandshakingTiming'
p2442
((lp2443
S'int32'
p2444
ag34
a((S'taskHandle'
p2445
(lp2446
S'TaskHandle'
p2447
aNtp2448
(S'sampleMode'
p2449
(lp2450
S'int32'
p2451
aNtp2452
(S'sampsPerChan'
p2453
(lp2454
S'uInt64'
p2455
aNtp2456
tp2457
tp2458
sS'DAQmxGetSwitchChanMaxDCCarryPwr'
p2459
((lp2460
S'int32'
p2461
ag34
a((S'switchChannelName'
p2462
(lp2463
S'char'
p2464
a(lp2465
I-1
aaNtp2466
(S'data'
p2467
(lp2468
S'float64'
p2469
ag42
aNtp2470
tp2471
tp2472
sS'DAQmxGetScaleType'
p2473
((lp2474
S'int32'
p2475
ag34
a((S'scaleName'
p2476
(lp2477
S'char'
p2478
a(lp2479
I-1
aaNtp2480
(S'data'
p2481
(lp2482
S'int32'
p2483
ag42
aNtp2484
tp2485
tp2486
sS'DAQmxGetCICountEdgesTerm'
p2487
((lp2488
S'int32'
p2489
ag34
a((S'taskHandle'
p2490
(lp2491
S'TaskHandle'
p2492
aNtp2493
(S'channel'
p2494
(lp2495
S'char'
p2496
a(lp2497
I-1
aaNtp2498
(S'data'
p2499
(lp2500
S'char'
p2501
ag42
aNtp2502
(S'bufferSize'
p2503
(lp2504
S'uInt32'
p2505
aNtp2506
tp2507
tp2508
sS'DAQmxAddGlobalChansToTask'
p2509
((lp2510
S'int32'
p2511
ag34
a((S'taskHandle'
p2512
(lp2513
S'TaskHandle'
p2514
aNtp2515
(S'channelNames'
p2516
(lp2517
S'char'
p2518
a(lp2519
I-1
aaNtp2520
tp2521
tp2522
sS'DAQmxGetAnlgEdgeStartTrigLvl'
p2523
((lp2524
S'int32'
p2525
ag34
a((S'taskHandle'
p2526
(lp2527
S'TaskHandle'
p2528
aNtp2529
(S'data'
p2530
(lp2531
S'float64'
p2532
ag42
aNtp2533
tp2534
tp2535
sS'DAQmxSetDigLvlPauseTrigDigFltrTimebaseSrc'
p2536
((lp2537
S'int32'
p2538
ag34
a((S'taskHandle'
p2539
(lp2540
S'TaskHandle'
p2541
aNtp2542
(S'data'
p2543
(lp2544
S'char'
p2545
ag42
aNtp2546
tp2547
tp2548
sS'DAQmxSetCIEncoderAInputDigFltrEnable'
p2549
((lp2550
S'int32'
p2551
ag34
a((S'taskHandle'
p2552
(lp2553
S'TaskHandle'
p2554
aNtp2555
(S'channel'
p2556
(lp2557
S'char'
p2558
a(lp2559
I-1
aaNtp2560
(S'data'
p2561
(lp2562
S'bool32'
p2563
aNtp2564
tp2565
tp2566
sS'DAQmxGetSwitchChanAttribute'
p2567
((lp2568
S'int32'
p2569
aS'__cdecl'
p2570
a((S'switchChannelName'
p2571
(lp2572
S'char'
p2573
a(lp2574
I-1
aaNtp2575
(S'attribute'
p2576
(lp2577
S'int32'
p2578
aNtp2579
(S'value'
p2580
(lp2581
S'void'
p2582
ag42
aNtp2583
tp2584
tp2585
sS'DAQmxSetAIImpedance'
p2586
((lp2587
S'int32'
p2588
ag34
a((S'taskHandle'
p2589
(lp2590
S'TaskHandle'
p2591
aNtp2592
(S'channel'
p2593
(lp2594
S'char'
p2595
a(lp2596
I-1
aaNtp2597
(S'data'
p2598
(lp2599
S'float64'
p2600
aNtp2601
tp2602
tp2603
sS'DAQmxGetAOResolution'
p2604
((lp2605
S'int32'
p2606
ag34
a((S'taskHandle'
p2607
(lp2608
S'TaskHandle'
p2609
aNtp2610
(S'channel'
p2611
(lp2612
S'char'
p2613
a(lp2614
I-1
aaNtp2615
(S'data'
p2616
(lp2617
S'float64'
p2618
ag42
aNtp2619
tp2620
tp2621
sS'DAQmxGetCIFreqDigSyncEnable'
p2622
((lp2623
S'int32'
p2624
ag34
a((S'taskHandle'
p2625
(lp2626
S'TaskHandle'
p2627
aNtp2628
(S'channel'
p2629
(lp2630
S'char'
p2631
a(lp2632
I-1
aaNtp2633
(S'data'
p2634
(lp2635
S'bool32'
p2636
ag42
aNtp2637
tp2638
tp2639
sS'DAQmxWriteAnalogF64'
p2640
((lp2641
S'int32'
p2642
ag34
a((S'taskHandle'
p2643
(lp2644
S'TaskHandle'
p2645
aNtp2646
(S'numSampsPerChan'
p2647
(lp2648
S'int32'
p2649
aNtp2650
(S'autoStart'
p2651
(lp2652
S'bool32'
p2653
aNtp2654
(S'timeout'
p2655
(lp2656
S'float64'
p2657
aNtp2658
(S'dataLayout'
p2659
(lp2660
S'bool32'
p2661
aNtp2662
(S'writeArray'
p2663
(lp2664
S'float64'
p2665
a(lp2666
I-1
aaNtp2667
(S'sampsPerChanWritten'
p2668
(lp2669
S'int32'
p2670
ag42
aNtp2671
(S'reserved'
p2672
(lp2673
S'bool32'
p2674
ag42
aNtp2675
tp2676
tp2677
sS'DAQmxSetAIConvRate'
p2678
((lp2679
S'int32'
p2680
ag34
a((S'taskHandle'
p2681
(lp2682
S'TaskHandle'
p2683
aNtp2684
(S'data'
p2685
(lp2686
S'float64'
p2687
aNtp2688
tp2689
tp2690
sS'DAQmxGetExportedWatchdogExpiredEventOutputTerm'
p2691
((lp2692
S'int32'
p2693
ag34
a((S'taskHandle'
p2694
(lp2695
S'TaskHandle'
p2696
aNtp2697
(S'data'
p2698
(lp2699
S'char'
p2700
ag42
aNtp2701
(S'bufferSize'
p2702
(lp2703
S'uInt32'
p2704
aNtp2705
tp2706
tp2707
sS'DAQmxResetCITwoEdgeSepFirstDigFltrTimebaseRate'
p2708
((lp2709
S'int32'
p2710
ag34
a((S'taskHandle'
p2711
(lp2712
S'TaskHandle'
p2713
aNtp2714
(S'channel'
p2715
(lp2716
S'char'
p2717
a(lp2718
I-1
aaNtp2719
tp2720
tp2721
sS'DAQmxResetExportedRefTrigOutputTerm'
p2722
((lp2723
S'int32'
p2724
ag34
a((S'taskHandle'
p2725
(lp2726
S'TaskHandle'
p2727
aNtp2728
tp2729
tp2730
sS'DAQmxSetDigEdgeAdvTrigDigFltrEnable'
p2731
((lp2732
S'int32'
p2733
ag34
a((S'taskHandle'
p2734
(lp2735
S'TaskHandle'
p2736
aNtp2737
(S'data'
p2738
(lp2739
S'bool32'
p2740
aNtp2741
tp2742
tp2743
sS'DAQmxResetRealTimeAttribute'
p2744
((lp2745
S'int32'
p2746
ag34
a((S'taskHandle'
p2747
(lp2748
S'TaskHandle'
p2749
aNtp2750
(S'attribute'
p2751
(lp2752
S'int32'
p2753
aNtp2754
tp2755
tp2756
sS'DAQmxResetCIPeriodDigFltrTimebaseRate'
p2757
((lp2758
S'int32'
p2759
ag34
a((S'taskHandle'
p2760
(lp2761
S'TaskHandle'
p2762
aNtp2763
(S'channel'
p2764
(lp2765
S'char'
p2766
a(lp2767
I-1
aaNtp2768
tp2769
tp2770
sS'DAQmxSetCISemiPeriodDigFltrTimebaseSrc'
p2771
((lp2772
S'int32'
p2773
ag34
a((S'taskHandle'
p2774
(lp2775
S'TaskHandle'
p2776
aNtp2777
(S'channel'
p2778
(lp2779
S'char'
p2780
a(lp2781
I-1
aaNtp2782
(S'data'
p2783
(lp2784
S'char'
p2785
ag42
aNtp2786
tp2787
tp2788
sS'DAQmxResetDelayFromSampClkDelayUnits'
p2789
((lp2790
S'int32'
p2791
ag34
a((S'taskHandle'
p2792
(lp2793
S'TaskHandle'
p2794
aNtp2795
tp2796
tp2797
sS'DAQmxResetCIEncoderBInputDigFltrTimebaseRate'
p2798
((lp2799
S'int32'
p2800
ag34
a((S'taskHandle'
p2801
(lp2802
S'TaskHandle'
p2803
aNtp2804
(S'channel'
p2805
(lp2806
S'char'
p2807
a(lp2808
I-1
aaNtp2809
tp2810
tp2811
sS'DAQmxSetAOOutputImpedance'
p2812
((lp2813
S'int32'
p2814
ag34
a((S'taskHandle'
p2815
(lp2816
S'TaskHandle'
p2817
aNtp2818
(S'channel'
p2819
(lp2820
S'char'
p2821
a(lp2822
I-1
aaNtp2823
(S'data'
p2824
(lp2825
S'float64'
p2826
aNtp2827
tp2828
tp2829
sS'DAQmxGetBufferAttribute'
p2830
((lp2831
S'int32'
p2832
ag2570
a((S'taskHandle'
p2833
(lp2834
S'TaskHandle'
p2835
aNtp2836
(S'attribute'
p2837
(lp2838
S'int32'
p2839
aNtp2840
(S'value'
p2841
(lp2842
S'void'
p2843
ag42
aNtp2844
tp2845
tp2846
sS'DAQmxSetCITwoEdgeSepFirstDigFltrTimebaseSrc'
p2847
((lp2848
S'int32'
p2849
ag34
a((S'taskHandle'
p2850
(lp2851
S'TaskHandle'
p2852
aNtp2853
(S'channel'
p2854
(lp2855
S'char'
p2856
a(lp2857
I-1
aaNtp2858
(S'data'
p2859
(lp2860
S'char'
p2861
ag42
aNtp2862
tp2863
tp2864
sS'DAQmxResetAnlgWinStartTrigSrc'
p2865
((lp2866
S'int32'
p2867
ag34
a((S'taskHandle'
p2868
(lp2869
S'TaskHandle'
p2870
aNtp2871
tp2872
tp2873
sS'DAQmxResetAIResistanceCfg'
p2874
((lp2875
S'int32'
p2876
ag34
a((S'taskHandle'
p2877
(lp2878
S'TaskHandle'
p2879
aNtp2880
(S'channel'
p2881
(lp2882
S'char'
p2883
a(lp2884
I-1
aaNtp2885
tp2886
tp2887
sS'DAQmxESeriesCalAdjust'
p2888
((lp2889
S'int32'
p2890
ag34
a((S'calHandle'
p2891
(lp2892
S'uInt32'
p2893
aNtp2894
(S'referenceVoltage'
p2895
(lp2896
S'float64'
p2897
aNtp2898
tp2899
tp2900
sS'DAQmxResetAIChanCalDesc'
p2901
((lp2902
S'int32'
p2903
ag34
a((S'taskHandle'
p2904
(lp2905
S'TaskHandle'
p2906
aNtp2907
(S'channel'
p2908
(lp2909
S'char'
p2910
a(lp2911
I-1
aaNtp2912
tp2913
tp2914
sS'DAQmxResetDigEdgeArmStartTrigDigSyncEnable'
p2915
((lp2916
S'int32'
p2917
ag34
a((S'taskHandle'
p2918
(lp2919
S'TaskHandle'
p2920
aNtp2921
tp2922
tp2923
sS'DAQmxResetCIEncoderDecodingType'
p2924
((lp2925
S'int32'
p2926
ag34
a((S'taskHandle'
p2927
(lp2928
S'TaskHandle'
p2929
aNtp2930
(S'channel'
p2931
(lp2932
S'char'
p2933
a(lp2934
I-1
aaNtp2935
tp2936
tp2937
sS'DAQmxSetSampClkActiveEdge'
p2938
((lp2939
S'int32'
p2940
ag34
a((S'taskHandle'
p2941
(lp2942
S'TaskHandle'
p2943
aNtp2944
(S'data'
p2945
(lp2946
S'int32'
p2947
aNtp2948
tp2949
tp2950
sS'DAQmxResetCICtrTimebaseDigFltrMinPulseWidth'
p2951
((lp2952
S'int32'
p2953
ag34
a((S'taskHandle'
p2954
(lp2955
S'TaskHandle'
p2956
aNtp2957
(S'channel'
p2958
(lp2959
S'char'
p2960
a(lp2961
I-1
aaNtp2962
tp2963
tp2964
sS'DAQmxGetRealTimeConvLateErrorsToWarnings'
p2965
((lp2966
S'int32'
p2967
ag34
a((S'taskHandle'
p2968
(lp2969
S'TaskHandle'
p2970
aNtp2971
(S'data'
p2972
(lp2973
S'bool32'
p2974
ag42
aNtp2975
tp2976
tp2977
sS'DAQmxGetAOResolutionUnits'
p2978
((lp2979
S'int32'
p2980
ag34
a((S'taskHandle'
p2981
(lp2982
S'TaskHandle'
p2983
aNtp2984
(S'channel'
p2985
(lp2986
S'char'
p2987
a(lp2988
I-1
aaNtp2989
(S'data'
p2990
(lp2991
S'int32'
p2992
ag42
aNtp2993
tp2994
tp2995
sS'DAQmxSetCICtrTimebaseDigFltrTimebaseRate'
p2996
((lp2997
S'int32'
p2998
ag34
a((S'taskHandle'
p2999
(lp3000
S'TaskHandle'
p3001
aNtp3002
(S'channel'
p3003
(lp3004
S'char'
p3005
a(lp3006
I-1
aaNtp3007
(S'data'
p3008
(lp3009
S'float64'
p3010
aNtp3011
tp3012
tp3013
sS'DAQmxGetCIEncoderZInputTerm'
p3014
((lp3015
S'int32'
p3016
ag34
a((S'taskHandle'
p3017
(lp3018
S'TaskHandle'
p3019
aNtp3020
(S'channel'
p3021
(lp3022
S'char'
p3023
a(lp3024
I-1
aaNtp3025
(S'data'
p3026
(lp3027
S'char'
p3028
ag42
aNtp3029
(S'bufferSize'
p3030
(lp3031
S'uInt32'
p3032
aNtp3033
tp3034
tp3035
sS'DAQmxSetCIFreqDiv'
p3036
((lp3037
S'int32'
p3038
ag34
a((S'taskHandle'
p3039
(lp3040
S'TaskHandle'
p3041
aNtp3042
(S'channel'
p3043
(lp3044
S'char'
p3045
a(lp3046
I-1
aaNtp3047
(S'data'
p3048
(lp3049
S'uInt32'
p3050
aNtp3051
tp3052
tp3053
sS'DAQmxResetCIPeriodDigFltrEnable'
p3054
((lp3055
S'int32'
p3056
ag34
a((S'taskHandle'
p3057
(lp3058
S'TaskHandle'
p3059
aNtp3060
(S'channel'
p3061
(lp3062
S'char'
p3063
a(lp3064
I-1
aaNtp3065
tp3066
tp3067
sS'DAQmxResetHshkStartCond'
p3068
((lp3069
S'int32'
p3070
ag34
a((S'taskHandle'
p3071
(lp3072
S'TaskHandle'
p3073
aNtp3074
tp3075
tp3076
sS'DAQmxGetCIFreqUnits'
p3077
((lp3078
S'int32'
p3079
ag34
a((S'taskHandle'
p3080
(lp3081
S'TaskHandle'
p3082
aNtp3083
(S'channel'
p3084
(lp3085
S'char'
p3086
a(lp3087
I-1
aaNtp3088
(S'data'
p3089
(lp3090
S'int32'
p3091
ag42
aNtp3092
tp3093
tp3094
sS'DAQmxGetDigPatternStartTrigSrc'
p3095
((lp3096
S'int32'
p3097
ag34
a((S'taskHandle'
p3098
(lp3099
S'TaskHandle'
p3100
aNtp3101
(S'data'
p3102
(lp3103
S'char'
p3104
ag42
aNtp3105
(S'bufferSize'
p3106
(lp3107
S'uInt32'
p3108
aNtp3109
tp3110
tp3111
sS'DAQmxGetSampClkTimebaseActiveEdge'
p3112
((lp3113
S'int32'
p3114
ag34
a((S'taskHandle'
p3115
(lp3116
S'TaskHandle'
p3117
aNtp3118
(S'data'
p3119
(lp3120
S'int32'
p3121
ag42
aNtp3122
tp3123
tp3124
sS'DAQmxSetAnlgEdgeStartTrigSlope'
p3125
((lp3126
S'int32'
p3127
ag34
a((S'taskHandle'
p3128
(lp3129
S'TaskHandle'
p3130
aNtp3131
(S'data'
p3132
(lp3133
S'int32'
p3134
aNtp3135
tp3136
tp3137
sS'DAQmxGetDevProductType'
p3138
((lp3139
S'int32'
p3140
ag34
a((S'device'
p3141
(lp3142
S'char'
p3143
a(lp3144
I-1
aaNtp3145
(S'data'
p3146
(lp3147
S'char'
p3148
ag42
aNtp3149
(S'bufferSize'
p3150
(lp3151
S'uInt32'
p3152
aNtp3153
tp3154
tp3155
sS'DAQmxSetAILeadWireResistance'
p3156
((lp3157
S'int32'
p3158
ag34
a((S'taskHandle'
p3159
(lp3160
S'TaskHandle'
p3161
aNtp3162
(S'channel'
p3163
(lp3164
S'char'
p3165
a(lp3166
I-1
aaNtp3167
(S'data'
p3168
(lp3169
S'float64'
p3170
aNtp3171
tp3172
tp3173
sS'DAQmxGetCIEncoderAInputDigFltrEnable'
p3174
((lp3175
S'int32'
p3176
ag34
a((S'taskHandle'
p3177
(lp3178
S'TaskHandle'
p3179
aNtp3180
(S'channel'
p3181
(lp3182
S'char'
p3183
a(lp3184
I-1
aaNtp3185
(S'data'
p3186
(lp3187
S'bool32'
p3188
ag42
aNtp3189
tp3190
tp3191
sS'DAQmxGetExtCalLastTemp'
p3192
((lp3193
S'int32'
p3194
ag34
a((S'deviceName'
p3195
(lp3196
S'char'
p3197
a(lp3198
I-1
aaNtp3199
(S'data'
p3200
(lp3201
S'float64'
p3202
ag42
aNtp3203
tp3204
tp3205
sS'DAQmxGetCIMeasType'
p3206
((lp3207
S'int32'
p3208
ag34
a((S'taskHandle'
p3209
(lp3210
S'TaskHandle'
p3211
aNtp3212
(S'channel'
p3213
(lp3214
S'char'
p3215
a(lp3216
I-1
aaNtp3217
(S'data'
p3218
(lp3219
S'int32'
p3220
ag42
aNtp3221
tp3222
tp3223
sS'DAQmxResetAnlgWinPauseTrigCoupling'
p3224
((lp3225
S'int32'
p3226
ag34
a((S'taskHandle'
p3227
(lp3228
S'TaskHandle'
p3229
aNtp3230
tp3231
tp3232
sS'DAQmxGetWriteCurrWritePos'
p3233
((lp3234
S'int32'
p3235
ag34
a((S'taskHandle'
p3236
(lp3237
S'TaskHandle'
p3238
aNtp3239
(S'data'
p3240
(lp3241
S'uInt64'
p3242
ag42
aNtp3243
tp3244
tp3245
sS'DAQmxGetCICountEdgesCountDirDigFltrTimebaseRate'
p3246
((lp3247
S'int32'
p3248
ag34
a((S'taskHandle'
p3249
(lp3250
S'TaskHandle'
p3251
aNtp3252
(S'channel'
p3253
(lp3254
S'char'
p3255
a(lp3256
I-1
aaNtp3257
(S'data'
p3258
(lp3259
S'float64'
p3260
ag42
aNtp3261
tp3262
tp3263
sS'DAQmxResetRealTimeConvLateErrorsToWarnings'
p3264
((lp3265
S'int32'
p3266
ag34
a((S'taskHandle'
p3267
(lp3268
S'TaskHandle'
p3269
aNtp3270
tp3271
tp3272
sS'DAQmxResetCITwoEdgeSepUnits'
p3273
((lp3274
S'int32'
p3275
ag34
a((S'taskHandle'
p3276
(lp3277
S'TaskHandle'
p3278
aNtp3279
(S'channel'
p3280
(lp3281
S'char'
p3282
a(lp3283
I-1
aaNtp3284
tp3285
tp3286
sS'DAQmxCreateLinScale'
p3287
((lp3288
S'int32'
p3289
ag34
a((S'name'
p3290
(lp3291
S'char'
p3292
a(lp3293
I-1
aaNtp3294
(S'slope'
p3295
(lp3296
S'float64'
p3297
aNtp3298
(S'yIntercept'
p3299
(lp3300
S'float64'
p3301
aNtp3302
(S'preScaledUnits'
p3303
(lp3304
S'int32'
p3305
aNtp3306
(S'scaledUnits'
p3307
(lp3308
S'char'
p3309
a(lp3310
I-1
aaNtp3311
tp3312
tp3313
sS'DAQmxResetAnlgEdgeStartTrigSrc'
p3314
((lp3315
S'int32'
p3316
ag34
a((S'taskHandle'
p3317
(lp3318
S'TaskHandle'
p3319
aNtp3320
tp3321
tp3322
sS'DAQmxResetReadSleepTime'
p3323
((lp3324
S'int32'
p3325
ag34
a((S'taskHandle'
p3326
(lp3327
S'TaskHandle'
p3328
aNtp3329
tp3330
tp3331
sS'DAQmxResetAnlgWinPauseTrigWhen'
p3332
((lp3333
S'int32'
p3334
ag34
a((S'taskHandle'
p3335
(lp3336
S'TaskHandle'
p3337
aNtp3338
tp3339
tp3340
sS'DAQmxSetExportedDividedSampClkTimebaseOutputTerm'
p3341
((lp3342
S'int32'
p3343
ag34
a((S'taskHandle'
p3344
(lp3345
S'TaskHandle'
p3346
aNtp3347
(S'data'
p3348
(lp3349
S'char'
p3350
ag42
aNtp3351
tp3352
tp3353
sS'DAQmxGetAODataXferMech'
p3354
((lp3355
S'int32'
p3356
ag34
a((S'taskHandle'
p3357
(lp3358
S'TaskHandle'
p3359
aNtp3360
(S'channel'
p3361
(lp3362
S'char'
p3363
a(lp3364
I-1
aaNtp3365
(S'data'
p3366
(lp3367
S'int32'
p3368
ag42
aNtp3369
tp3370
tp3371
sS'DAQmxGetCIFreqDiv'
p3372
((lp3373
S'int32'
p3374
ag34
a((S'taskHandle'
p3375
(lp3376
S'TaskHandle'
p3377
aNtp3378
(S'channel'
p3379
(lp3380
S'char'
p3381
a(lp3382
I-1
aaNtp3383
(S'data'
p3384
(lp3385
S'uInt32'
p3386
ag42
aNtp3387
tp3388
tp3389
sS'DAQmxSetScalePolyReverseCoeff'
p3390
((lp3391
S'int32'
p3392
ag34
a((S'scaleName'
p3393
(lp3394
S'char'
p3395
a(lp3396
I-1
aaNtp3397
(S'data'
p3398
(lp3399
S'float64'
p3400
ag42
aNtp3401
(S'arraySizeInSamples'
p3402
(lp3403
S'uInt32'
p3404
aNtp3405
tp3406
tp3407
sS'DAQmxGetAnlgEdgeRefTrigHyst'
p3408
((lp3409
S'int32'
p3410
ag34
a((S'taskHandle'
p3411
(lp3412
S'TaskHandle'
p3413
aNtp3414
(S'data'
p3415
(lp3416
S'float64'
p3417
ag42
aNtp3418
tp3419
tp3420
sS'DAQmxResetDigEdgeWatchdogExpirTrigEdge'
p3421
((lp3422
S'int32'
p3423
ag34
a((S'taskHandle'
p3424
(lp3425
S'TaskHandle'
p3426
aNtp3427
tp3428
tp3429
sS'DAQmxCfgChangeDetectionTiming'
p3430
((lp3431
S'int32'
p3432
ag34
a((S'taskHandle'
p3433
(lp3434
S'TaskHandle'
p3435
aNtp3436
(S'risingEdgeChan'
p3437
(lp3438
S'char'
p3439
a(lp3440
I-1
aaNtp3441
(S'fallingEdgeChan'
p3442
(lp3443
S'char'
p3444
a(lp3445
I-1
aaNtp3446
(S'sampleMode'
p3447
(lp3448
S'int32'
p3449
aNtp3450
(S'sampsPerChan'
p3451
(lp3452
S'uInt64'
p3453
aNtp3454
tp3455
tp3456
sS'DAQmxSetDigEdgeWatchdogExpirTrigSrc'
p3457
((lp3458
S'int32'
p3459
ag34
a((S'taskHandle'
p3460
(lp3461
S'TaskHandle'
p3462
aNtp3463
(S'data'
p3464
(lp3465
S'char'
p3466
ag42
aNtp3467
tp3468
tp3469
sS'DAQmxResetDODataXferMech'
p3470
((lp3471
S'int32'
p3472
ag34
a((S'taskHandle'
p3473
(lp3474
S'TaskHandle'
p3475
aNtp3476
(S'channel'
p3477
(lp3478
S'char'
p3479
a(lp3480
I-1
aaNtp3481
tp3482
tp3483
sS'DAQmxGetStartTrigRetriggerable'
p3484
((lp3485
S'int32'
p3486
ag34
a((S'taskHandle'
p3487
(lp3488
S'TaskHandle'
p3489
aNtp3490
(S'data'
p3491
(lp3492
S'bool32'
p3493
ag42
aNtp3494
tp3495
tp3496
sS'DAQmxResetCOPulseTicksInitialDelay'
p3497
((lp3498
S'int32'
p3499
ag34
a((S'taskHandle'
p3500
(lp3501
S'TaskHandle'
p3502
aNtp3503
(S'channel'
p3504
(lp3505
S'char'
p3506
a(lp3507
I-1
aaNtp3508
tp3509
tp3510
sS'DAQmxSetCILinEncoderInitialPos'
p3511
((lp3512
S'int32'
p3513
ag34
a((S'taskHandle'
p3514
(lp3515
S'TaskHandle'
p3516
aNtp3517
(S'channel'
p3518
(lp3519
S'char'
p3520
a(lp3521
I-1
aaNtp3522
(S'data'
p3523
(lp3524
S'float64'
p3525
aNtp3526
tp3527
tp3528
sS'DAQmxSwitchConnectMulti'
p3529
((lp3530
S'int32'
p3531
ag34
a((S'connectionList'
p3532
(lp3533
S'char'
p3534
a(lp3535
I-1
aaNtp3536
(S'waitForSettling'
p3537
(lp3538
S'bool32'
p3539
aNtp3540
tp3541
tp3542
sS'DAQmxGetSwitchDevNumRows'
p3543
((lp3544
S'int32'
p3545
ag34
a((S'deviceName'
p3546
(lp3547
S'char'
p3548
a(lp3549
I-1
aaNtp3550
(S'data'
p3551
(lp3552
S'uInt32'
p3553
ag42
aNtp3554
tp3555
tp3556
sS'DAQmxCreateDIChan'
p3557
((lp3558
S'int32'
p3559
ag34
a((S'taskHandle'
p3560
(lp3561
S'TaskHandle'
p3562
aNtp3563
(S'lines'
p3564
(lp3565
S'char'
p3566
a(lp3567
I-1
aaNtp3568
(S'nameToAssignToLines'
p3569
(lp3570
S'char'
p3571
a(lp3572
I-1
aaNtp3573
(S'lineGrouping'
p3574
(lp3575
S'int32'
p3576
aNtp3577
tp3578
tp3579
sS'DAQmxResetExportedAdvCmpltEventDelay'
p3580
((lp3581
S'int32'
p3582
ag34
a((S'taskHandle'
p3583
(lp3584
S'TaskHandle'
p3585
aNtp3586
tp3587
tp3588
sS'DAQmxGetAIMeasType'
p3589
((lp3590
S'int32'
p3591
ag34
a((S'taskHandle'
p3592
(lp3593
S'TaskHandle'
p3594
aNtp3595
(S'channel'
p3596
(lp3597
S'char'
p3598
a(lp3599
I-1
aaNtp3600
(S'data'
p3601
(lp3602
S'int32'
p3603
ag42
aNtp3604
tp3605
tp3606
sS'DAQmxResetCIEncoderBInputTerm'
p3607
((lp3608
S'int32'
p3609
ag34
a((S'taskHandle'
p3610
(lp3611
S'TaskHandle'
p3612
aNtp3613
(S'channel'
p3614
(lp3615
S'char'
p3616
a(lp3617
I-1
aaNtp3618
tp3619
tp3620
sS'DAQmxSetDigEdgeArmStartTrigDigFltrTimebaseSrc'
p3621
((lp3622
S'int32'
p3623
ag34
a((S'taskHandle'
p3624
(lp3625
S'TaskHandle'
p3626
aNtp3627
(S'data'
p3628
(lp3629
S'char'
p3630
ag42
aNtp3631
tp3632
tp3633
sS'DAQmxGetReadOffset'
p3634
((lp3635
S'int32'
p3636
ag34
a((S'taskHandle'
p3637
(lp3638
S'TaskHandle'
p3639
aNtp3640
(S'data'
p3641
(lp3642
S'int32'
p3643
ag42
aNtp3644
tp3645
tp3646
sS'DAQmxSetCIEncoderAInputDigSyncEnable'
p3647
((lp3648
S'int32'
p3649
ag34
a((S'taskHandle'
p3650
(lp3651
S'TaskHandle'
p3652
aNtp3653
(S'channel'
p3654
(lp3655
S'char'
p3656
a(lp3657
I-1
aaNtp3658
(S'data'
p3659
(lp3660
S'bool32'
p3661
aNtp3662
tp3663
tp3664
sS'DAQmxGetAIThrmstrR1'
p3665
((lp3666
S'int32'
p3667
ag34
a((S'taskHandle'
p3668
(lp3669
S'TaskHandle'
p3670
aNtp3671
(S'channel'
p3672
(lp3673
S'char'
p3674
a(lp3675
I-1
aaNtp3676
(S'data'
p3677
(lp3678
S'float64'
p3679
ag42
aNtp3680
tp3681
tp3682
sS'DAQmxResetAnlgEdgeRefTrigSlope'
p3683
((lp3684
S'int32'
p3685
ag34
a((S'taskHandle'
p3686
(lp3687
S'TaskHandle'
p3688
aNtp3689
tp3690
tp3691
sS'DAQmxSetAnlgEdgeStartTrigHyst'
p3692
((lp3693
S'int32'
p3694
ag34
a((S'taskHandle'
p3695
(lp3696
S'TaskHandle'
p3697
aNtp3698
(S'data'
p3699
(lp3700
S'float64'
p3701
aNtp3702
tp3703
tp3704
sS'DAQmxResetAIBridgeShuntCalEnable'
p3705
((lp3706
S'int32'
p3707
ag34
a((S'taskHandle'
p3708
(lp3709
S'TaskHandle'
p3710
aNtp3711
(S'channel'
p3712
(lp3713
S'char'
p3714
a(lp3715
I-1
aaNtp3716
tp3717
tp3718
sS'DAQmxSetCISemiPeriodDigFltrMinPulseWidth'
p3719
((lp3720
S'int32'
p3721
ag34
a((S'taskHandle'
p3722
(lp3723
S'TaskHandle'
p3724
aNtp3725
(S'channel'
p3726
(lp3727
S'char'
p3728
a(lp3729
I-1
aaNtp3730
(S'data'
p3731
(lp3732
S'float64'
p3733
aNtp3734
tp3735
tp3736
sS'DAQmxGetCOPulseTimeInitialDelay'
p3737
((lp3738
S'int32'
p3739
ag34
a((S'taskHandle'
p3740
(lp3741
S'TaskHandle'
p3742
aNtp3743
(S'channel'
p3744
(lp3745
S'char'
p3746
a(lp3747
I-1
aaNtp3748
(S'data'
p3749
(lp3750
S'float64'
p3751
ag42
aNtp3752
tp3753
tp3754
sS'DAQmxResetChangeDetectDIFallingEdgePhysicalChans'
p3755
((lp3756
S'int32'
p3757
ag34
a((S'taskHandle'
p3758
(lp3759
S'TaskHandle'
p3760
aNtp3761
tp3762
tp3763
sS'DAQmxWriteCtrTicksScalar'
p3764
((lp3765
S'int32'
p3766
ag34
a((S'taskHandle'
p3767
(lp3768
S'TaskHandle'
p3769
aNtp3770
(S'autoStart'
p3771
(lp3772
S'bool32'
p3773
aNtp3774
(S'timeout'
p3775
(lp3776
S'float64'
p3777
aNtp3778
(S'highTicks'
p3779
(lp3780
S'uInt32'
p3781
aNtp3782
(S'lowTicks'
p3783
(lp3784
S'uInt32'
p3785
aNtp3786
(S'reserved'
p3787
(lp3788
S'bool32'
p3789
ag42
aNtp3790
tp3791
tp3792
sS'DAQmxResetRealTimeWaitForNextSampClkWaitMode'
p3793
((lp3794
S'int32'
p3795
ag34
a((S'taskHandle'
p3796
(lp3797
S'TaskHandle'
p3798
aNtp3799
tp3800
tp3801
sS'DAQmxGetAIAccelUnits'
p3802
((lp3803
S'int32'
p3804
ag34
a((S'taskHandle'
p3805
(lp3806
S'TaskHandle'
p3807
aNtp3808
(S'channel'
p3809
(lp3810
S'char'
p3811
a(lp3812
I-1
aaNtp3813
(S'data'
p3814
(lp3815
S'int32'
p3816
ag42
aNtp3817
tp3818
tp3819
sS'DAQmxSetDigLvlPauseTrigSrc'
p3820
((lp3821
S'int32'
p3822
ag34
a((S'taskHandle'
p3823
(lp3824
S'TaskHandle'
p3825
aNtp3826
(S'data'
p3827
(lp3828
S'char'
p3829
ag42
aNtp3830
tp3831
tp3832
sS'DAQmxGetAICurrentShuntResistance'
p3833
((lp3834
S'int32'
p3835
ag34
a((S'taskHandle'
p3836
(lp3837
S'TaskHandle'
p3838
aNtp3839
(S'channel'
p3840
(lp3841
S'char'
p3842
a(lp3843
I-1
aaNtp3844
(S'data'
p3845
(lp3846
S'float64'
p3847
ag42
aNtp3848
tp3849
tp3850
sS'DAQmxSetAIBridgeBalanceCoarsePot'
p3851
((lp3852
S'int32'
p3853
ag34
a((S'taskHandle'
p3854
(lp3855
S'TaskHandle'
p3856
aNtp3857
(S'channel'
p3858
(lp3859
S'char'
p3860
a(lp3861
I-1
aaNtp3862
(S'data'
p3863
(lp3864
S'int32'
p3865
aNtp3866
tp3867
tp3868
sS'DAQmxResetAIConvTimebaseSrc'
p3869
((lp3870
S'int32'
p3871
ag34
a((S'taskHandle'
p3872
(lp3873
S'TaskHandle'
p3874
aNtp3875
tp3876
tp3877
sS'DAQmxResetCICountEdgesCountDirDigFltrEnable'
p3878
((lp3879
S'int32'
p3880
ag34
a((S'taskHandle'
p3881
(lp3882
S'TaskHandle'
p3883
aNtp3884
(S'channel'
p3885
(lp3886
S'char'
p3887
a(lp3888
I-1
aaNtp3889
tp3890
tp3891
sS'DAQmxResetAIVoltageUnits'
p3892
((lp3893
S'int32'
p3894
ag34
a((S'taskHandle'
p3895
(lp3896
S'TaskHandle'
p3897
aNtp3898
(S'channel'
p3899
(lp3900
S'char'
p3901
a(lp3902
I-1
aaNtp3903
tp3904
tp3905
sS'DAQmxResetAIBridgeBalanceCoarsePot'
p3906
((lp3907
S'int32'
p3908
ag34
a((S'taskHandle'
p3909
(lp3910
S'TaskHandle'
p3911
aNtp3912
(S'channel'
p3913
(lp3914
S'char'
p3915
a(lp3916
I-1
aaNtp3917
tp3918
tp3919
sS'DAQmxSetExportedHshkEventOutputTerm'
p3920
((lp3921
S'int32'
p3922
ag34
a((S'taskHandle'
p3923
(lp3924
S'TaskHandle'
p3925
aNtp3926
(S'data'
p3927
(lp3928
S'char'
p3929
ag42
aNtp3930
tp3931
tp3932
sS'DAQmxSetCICountEdgesCountDirDigFltrMinPulseWidth'
p3933
((lp3934
S'int32'
p3935
ag34
a((S'taskHandle'
p3936
(lp3937
S'TaskHandle'
p3938
aNtp3939
(S'channel'
p3940
(lp3941
S'char'
p3942
a(lp3943
I-1
aaNtp3944
(S'data'
p3945
(lp3946
S'float64'
p3947
aNtp3948
tp3949
tp3950
sS'DAQmxSetAOMemMapEnable'
p3951
((lp3952
S'int32'
p3953
ag34
a((S'taskHandle'
p3954
(lp3955
S'TaskHandle'
p3956
aNtp3957
(S'channel'
p3958
(lp3959
S'char'
p3960
a(lp3961
I-1
aaNtp3962
(S'data'
p3963
(lp3964
S'bool32'
p3965
aNtp3966
tp3967
tp3968
sS'DAQmxGetAnlgEdgeStartTrigSrc'
p3969
((lp3970
S'int32'
p3971
ag34
a((S'taskHandle'
p3972
(lp3973
S'TaskHandle'
p3974
aNtp3975
(S'data'
p3976
(lp3977
S'char'
p3978
ag42
aNtp3979
(S'bufferSize'
p3980
(lp3981
S'uInt32'
p3982
aNtp3983
tp3984
tp3985
sS'DAQmxGetWatchdogExpirTrigType'
p3986
((lp3987
S'int32'
p3988
ag34
a((S'taskHandle'
p3989
(lp3990
S'TaskHandle'
p3991
aNtp3992
(S'data'
p3993
(lp3994
S'int32'
p3995
ag42
aNtp3996
tp3997
tp3998
sS'DAQmxSetAnlgWinPauseTrigCoupling'
p3999
((lp4000
S'int32'
p4001
ag34
a((S'taskHandle'
p4002
(lp4003
S'TaskHandle'
p4004
aNtp4005
(S'data'
p4006
(lp4007
S'int32'
p4008
aNtp4009
tp4010
tp4011
sS'DAQmxGetCITwoEdgeSepFirstEdge'
p4012
((lp4013
S'int32'
p4014
ag34
a((S'taskHandle'
p4015
(lp4016
S'TaskHandle'
p4017
aNtp4018
(S'channel'
p4019
(lp4020
S'char'
p4021
a(lp4022
I-1
aaNtp4023
(S'data'
p4024
(lp4025
S'int32'
p4026
ag42
aNtp4027
tp4028
tp4029
sS'DAQmxResetAOLoadImpedance'
p4030
((lp4031
S'int32'
p4032
ag34
a((S'taskHandle'
p4033
(lp4034
S'TaskHandle'
p4035
aNtp4036
(S'channel'
p4037
(lp4038
S'char'
p4039
a(lp4040
I-1
aaNtp4041
tp4042
tp4043
sS'DAQmxGetExportedAIConvClkPulsePolarity'
p4044
((lp4045
S'int32'
p4046
ag34
a((S'taskHandle'
p4047
(lp4048
S'TaskHandle'
p4049
aNtp4050
(S'data'
p4051
(lp4052
S'int32'
p4053
ag42
aNtp4054
tp4055
tp4056
sS'DAQmxCreateCIGPSTimestampChan'
p4057
((lp4058
S'int32'
p4059
ag34
a((S'taskHandle'
p4060
(lp4061
S'TaskHandle'
p4062
aNtp4063
(S'counter'
p4064
(lp4065
S'char'
p4066
a(lp4067
I-1
aaNtp4068
(S'nameToAssignToChannel'
p4069
(lp4070
S'char'
p4071
a(lp4072
I-1
aaNtp4073
(S'units'
p4074
(lp4075
S'int32'
p4076
aNtp4077
(S'syncMethod'
p4078
(lp4079
S'int32'
p4080
aNtp4081
(S'customScaleName'
p4082
(lp4083
S'char'
p4084
a(lp4085
I-1
aaNtp4086
tp4087
tp4088
sS'DAQmxSetAIExcitUseMultiplexed'
p4089
((lp4090
S'int32'
p4091
ag34
a((S'taskHandle'
p4092
(lp4093
S'TaskHandle'
p4094
aNtp4095
(S'channel'
p4096
(lp4097
S'char'
p4098
a(lp4099
I-1
aaNtp4100
(S'data'
p4101
(lp4102
S'bool32'
p4103
aNtp4104
tp4105
tp4106
sS'DAQmxGetAIForceReadFromChan'
p4107
((lp4108
S'int32'
p4109
ag34
a((S'taskHandle'
p4110
(lp4111
S'TaskHandle'
p4112
aNtp4113
(S'channel'
p4114
(lp4115
S'char'
p4116
a(lp4117
I-1
aaNtp4118
(S'data'
p4119
(lp4120
S'bool32'
p4121
ag42
aNtp4122
tp4123
tp4124
sS'DAQmxGetCICtrTimebaseDigFltrTimebaseRate'
p4125
((lp4126
S'int32'
p4127
ag34
a((S'taskHandle'
p4128
(lp4129
S'TaskHandle'
p4130
aNtp4131
(S'channel'
p4132
(lp4133
S'char'
p4134
a(lp4135
I-1
aaNtp4136
(S'data'
p4137
(lp4138
S'float64'
p4139
ag42
aNtp4140
tp4141
tp4142
sS'DAQmxSetAIChanCalVerifRefVals'
p4143
((lp4144
S'int32'
p4145
ag34
a((S'taskHandle'
p4146
(lp4147
S'TaskHandle'
p4148
aNtp4149
(S'channel'
p4150
(lp4151
S'char'
p4152
a(lp4153
I-1
aaNtp4154
(S'data'
p4155
(lp4156
S'float64'
p4157
ag42
aNtp4158
(S'arraySizeInSamples'
p4159
(lp4160
S'uInt32'
p4161
aNtp4162
tp4163
tp4164
sS'DAQmxResetHshkTrigType'
p4165
((lp4166
S'int32'
p4167
ag34
a((S'taskHandle'
p4168
(lp4169
S'TaskHandle'
p4170
aNtp4171
tp4172
tp4173
sS'DAQmxResetCIFreqTerm'
p4174
((lp4175
S'int32'
p4176
ag34
a((S'taskHandle'
p4177
(lp4178
S'TaskHandle'
p4179
aNtp4180
(S'channel'
p4181
(lp4182
S'char'
p4183
a(lp4184
I-1
aaNtp4185
tp4186
tp4187
sS'DAQmxSetWriteOffset'
p4188
((lp4189
S'int32'
p4190
ag34
a((S'taskHandle'
p4191
(lp4192
S'TaskHandle'
p4193
aNtp4194
(S'data'
p4195
(lp4196
S'int32'
p4197
aNtp4198
tp4199
tp4200
sS'DAQmxCreateCIAngEncoderChan'
p4201
((lp4202
S'int32'
p4203
ag34
a((S'taskHandle'
p4204
(lp4205
S'TaskHandle'
p4206
aNtp4207
(S'counter'
p4208
(lp4209
S'char'
p4210
a(lp4211
I-1
aaNtp4212
(S'nameToAssignToChannel'
p4213
(lp4214
S'char'
p4215
a(lp4216
I-1
aaNtp4217
(S'decodingType'
p4218
(lp4219
S'int32'
p4220
aNtp4221
(S'ZidxEnable'
p4222
(lp4223
S'bool32'
p4224
aNtp4225
(S'ZidxVal'
p4226
(lp4227
S'float64'
p4228
aNtp4229
(S'ZidxPhase'
p4230
(lp4231
S'int32'
p4232
aNtp4233
(S'units'
p4234
(lp4235
S'int32'
p4236
aNtp4237
(S'pulsesPerRev'
p4238
(lp4239
S'uInt32'
p4240
aNtp4241
(S'initialAngle'
p4242
(lp4243
S'float64'
p4244
aNtp4245
(S'customScaleName'
p4246
(lp4247
S'char'
p4248
a(lp4249
I-1
aaNtp4250
tp4251
tp4252
sS'DAQmxResetExportedCtrOutEventToggleIdleState'
p4253
((lp4254
S'int32'
p4255
ag34
a((S'taskHandle'
p4256
(lp4257
S'TaskHandle'
p4258
aNtp4259
tp4260
tp4261
sS'DAQmxSetWatchdogTimeout'
p4262
((lp4263
S'int32'
p4264
ag34
a((S'taskHandle'
p4265
(lp4266
S'TaskHandle'
p4267
aNtp4268
(S'data'
p4269
(lp4270
S'float64'
p4271
aNtp4272
tp4273
tp4274
sS'DAQmxResetCOPulseDutyCyc'
p4275
((lp4276
S'int32'
p4277
ag34
a((S'taskHandle'
p4278
(lp4279
S'TaskHandle'
p4280
aNtp4281
(S'channel'
p4282
(lp4283
S'char'
p4284
a(lp4285
I-1
aaNtp4286
tp4287
tp4288
sS'DAQmxSetAITempUnits'
p4289
((lp4290
S'int32'
p4291
ag34
a((S'taskHandle'
p4292
(lp4293
S'TaskHandle'
p4294
aNtp4295
(S'channel'
p4296
(lp4297
S'char'
p4298
a(lp4299
I-1
aaNtp4300
(S'data'
p4301
(lp4302
S'int32'
p4303
aNtp4304
tp4305
tp4306
sS'DAQmxResetAIMicrophoneSensitivity'
p4307
((lp4308
S'int32'
p4309
ag34
a((S'taskHandle'
p4310
(lp4311
S'TaskHandle'
p4312
aNtp4313
(S'channel'
p4314
(lp4315
S'char'
p4316
a(lp4317
I-1
aaNtp4318
tp4319
tp4320
sS'DAQmxSwitchGetMultiRelayPos'
p4321
((lp4322
S'int32'
p4323
ag34
a((S'relayList'
p4324
(lp4325
S'char'
p4326
a(lp4327
I-1
aaNtp4328
(S'relayPos'
p4329
(lp4330
S'uInt32'
p4331
a(lp4332
I-1
aaNtp4333
(S'relayPosArraySize'
p4334
(lp4335
S'uInt32'
p4336
aNtp4337
(S'numRelayPossRead'
p4338
(lp4339
S'uInt32'
p4340
ag42
aNtp4341
tp4342
tp4343
sS'DAQmxResetRealTimeNumOfWarmupIters'
p4344
((lp4345
S'int32'
p4346
ag34
a((S'taskHandle'
p4347
(lp4348
S'TaskHandle'
p4349
aNtp4350
tp4351
tp4352
sS'DAQmxSetWatchdogDOExpirState'
p4353
((lp4354
S'int32'
p4355
ag34
a((S'taskHandle'
p4356
(lp4357
S'TaskHandle'
p4358
aNtp4359
(S'channel'
p4360
(lp4361
S'char'
p4362
a(lp4363
I-1
aaNtp4364
(S'data'
p4365
(lp4366
S'int32'
p4367
aNtp4368
tp4369
tp4370
sS'DAQmxGetHshkStartCond'
p4371
((lp4372
S'int32'
p4373
ag34
a((S'taskHandle'
p4374
(lp4375
S'TaskHandle'
p4376
aNtp4377
(S'data'
p4378
(lp4379
S'int32'
p4380
ag42
aNtp4381
tp4382
tp4383
sS'DAQmxSetAIDataXferMech'
p4384
((lp4385
S'int32'
p4386
ag34
a((S'taskHandle'
p4387
(lp4388
S'TaskHandle'
p4389
aNtp4390
(S'channel'
p4391
(lp4392
S'char'
p4393
a(lp4394
I-1
aaNtp4395
(S'data'
p4396
(lp4397
S'int32'
p4398
aNtp4399
tp4400
tp4401
sS'DAQmxExportSignal'
p4402
((lp4403
S'int32'
p4404
ag34
a((S'taskHandle'
p4405
(lp4406
S'TaskHandle'
p4407
aNtp4408
(S'signalID'
p4409
(lp4410
S'int32'
p4411
aNtp4412
(S'outputTerminal'
p4413
(lp4414
S'char'
p4415
a(lp4416
I-1
aaNtp4417
tp4418
tp4419
sS'DAQmxSetExportedAdvTrigPulseWidthUnits'
p4420
((lp4421
S'int32'
p4422
ag34
a((S'taskHandle'
p4423
(lp4424
S'TaskHandle'
p4425
aNtp4426
(S'data'
p4427
(lp4428
S'int32'
p4429
aNtp4430
tp4431
tp4432
sS'DAQmxSetExportedCtrOutEventPulsePolarity'
p4433
((lp4434
S'int32'
p4435
ag34
a((S'taskHandle'
p4436
(lp4437
S'TaskHandle'
p4438
aNtp4439
(S'data'
p4440
(lp4441
S'int32'
p4442
aNtp4443
tp4444
tp4445
sS'DAQmxSetExportedRdyForXferEventOutputTerm'
p4446
((lp4447
S'int32'
p4448
ag34
a((S'taskHandle'
p4449
(lp4450
S'TaskHandle'
p4451
aNtp4452
(S'data'
p4453
(lp4454
S'char'
p4455
ag42
aNtp4456
tp4457
tp4458
sS'DAQmxSetStartTrigType'
p4459
((lp4460
S'int32'
p4461
ag34
a((S'taskHandle'
p4462
(lp4463
S'TaskHandle'
p4464
aNtp4465
(S'data'
p4466
(lp4467
S'int32'
p4468
aNtp4469
tp4470
tp4471
sS'DAQmxSetAILowpassEnable'
p4472
((lp4473
S'int32'
p4474
ag34
a((S'taskHandle'
p4475
(lp4476
S'TaskHandle'
p4477
aNtp4478
(S'channel'
p4479
(lp4480
S'char'
p4481
a(lp4482
I-1
aaNtp4483
(S'data'
p4484
(lp4485
S'bool32'
p4486
aNtp4487
tp4488
tp4489
sS'DAQmxGetAIMemMapEnable'
p4490
((lp4491
S'int32'
p4492
ag34
a((S'taskHandle'
p4493
(lp4494
S'TaskHandle'
p4495
aNtp4496
(S'channel'
p4497
(lp4498
S'char'
p4499
a(lp4500
I-1
aaNtp4501
(S'data'
p4502
(lp4503
S'bool32'
p4504
ag42
aNtp4505
tp4506
tp4507
sS'DAQmxResetAIRTDB'
p4508
((lp4509
S'int32'
p4510
ag34
a((S'taskHandle'
p4511
(lp4512
S'TaskHandle'
p4513
aNtp4514
(S'channel'
p4515
(lp4516
S'char'
p4517
a(lp4518
I-1
aaNtp4519
tp4520
tp4521
sS'DAQmxResetAIRTDC'
p4522
((lp4523
S'int32'
p4524
ag34
a((S'taskHandle'
p4525
(lp4526
S'TaskHandle'
p4527
aNtp4528
(S'channel'
p4529
(lp4530
S'char'
p4531
a(lp4532
I-1
aaNtp4533
tp4534
tp4535
sS'DAQmxResetAIRTDA'
p4536
((lp4537
S'int32'
p4538
ag34
a((S'taskHandle'
p4539
(lp4540
S'TaskHandle'
p4541
aNtp4542
(S'channel'
p4543
(lp4544
S'char'
p4545
a(lp4546
I-1
aaNtp4547
tp4548
tp4549
sS'DAQmxReadRaw'
p4550
((lp4551
S'int32'
p4552
ag34
a((S'taskHandle'
p4553
(lp4554
S'TaskHandle'
p4555
aNtp4556
(S'numSampsPerChan'
p4557
(lp4558
S'int32'
p4559
aNtp4560
(S'timeout'
p4561
(lp4562
S'float64'
p4563
aNtp4564
(S'readArray'
p4565
(lp4566
S'void'
p4567
ag42
aNtp4568
(S'arraySizeInBytes'
p4569
(lp4570
S'uInt32'
p4571
aNtp4572
(S'sampsRead'
p4573
(lp4574
S'int32'
p4575
ag42
aNtp4576
(S'numBytesPerSamp'
p4577
(lp4578
S'int32'
p4579
ag42
aNtp4580
(S'reserved'
p4581
(lp4582
S'bool32'
p4583
ag42
aNtp4584
tp4585
tp4586
sS'DAQmxResetReadAutoStart'
p4587
((lp4588
S'int32'
p4589
ag34
a((S'taskHandle'
p4590
(lp4591
S'TaskHandle'
p4592
aNtp4593
tp4594
tp4595
sS'DAQmxResetAIMin'
p4596
((lp4597
S'int32'
p4598
ag34
a((S'taskHandle'
p4599
(lp4600
S'TaskHandle'
p4601
aNtp4602
(S'channel'
p4603
(lp4604
S'char'
p4605
a(lp4606
I-1
aaNtp4607
tp4608
tp4609
sS'DAQmxSetCITwoEdgeSepFirstDigFltrTimebaseRate'
p4610
((lp4611
S'int32'
p4612
ag34
a((S'taskHandle'
p4613
(lp4614
S'TaskHandle'
p4615
aNtp4616
(S'channel'
p4617
(lp4618
S'char'
p4619
a(lp4620
I-1
aaNtp4621
(S'data'
p4622
(lp4623
S'float64'
p4624
aNtp4625
tp4626
tp4627
sS'DAQmxResetCIEncoderAInputDigFltrTimebaseRate'
p4628
((lp4629
S'int32'
p4630
ag34
a((S'taskHandle'
p4631
(lp4632
S'TaskHandle'
p4633
aNtp4634
(S'channel'
p4635
(lp4636
S'char'
p4637
a(lp4638
I-1
aaNtp4639
tp4640
tp4641
sS'DAQmxGetExportedAdvTrigPulseWidthUnits'
p4642
((lp4643
S'int32'
p4644
ag34
a((S'taskHandle'
p4645
(lp4646
S'TaskHandle'
p4647
aNtp4648
(S'data'
p4649
(lp4650
S'int32'
p4651
ag42
aNtp4652
tp4653
tp4654
sS'DAQmxResetCICountEdgesDir'
p4655
((lp4656
S'int32'
p4657
ag34
a((S'taskHandle'
p4658
(lp4659
S'TaskHandle'
p4660
aNtp4661
(S'channel'
p4662
(lp4663
S'char'
p4664
a(lp4665
I-1
aaNtp4666
tp4667
tp4668
sS'DAQmxResetAOIdleOutputBehavior'
p4669
((lp4670
S'int32'
p4671
ag34
a((S'taskHandle'
p4672
(lp4673
S'TaskHandle'
p4674
aNtp4675
(S'channel'
p4676
(lp4677
S'char'
p4678
a(lp4679
I-1
aaNtp4680
tp4681
tp4682
sS'DAQmxCreateAITempBuiltInSensorChan'
p4683
((lp4684
S'int32'
p4685
ag34
a((S'taskHandle'
p4686
(lp4687
S'TaskHandle'
p4688
aNtp4689
(S'physicalChannel'
p4690
(lp4691
S'char'
p4692
a(lp4693
I-1
aaNtp4694
(S'nameToAssignToChannel'
p4695
(lp4696
S'char'
p4697
a(lp4698
I-1
aaNtp4699
(S'units'
p4700
(lp4701
S'int32'
p4702
aNtp4703
tp4704
tp4705
sS'DAQmxResetRefClkRate'
p4706
((lp4707
S'int32'
p4708
ag34
a((S'taskHandle'
p4709
(lp4710
S'TaskHandle'
p4711
aNtp4712
tp4713
tp4714
sS'DAQmxSelfCal'
p4715
((lp4716
S'int32'
p4717
ag34
a((S'deviceName'
p4718
(lp4719
S'char'
p4720
a(lp4721
I-1
aaNtp4722
tp4723
tp4724
sS'DAQmxStopTask'
p4725
((lp4726
S'int32'
p4727
ag34
a((S'taskHandle'
p4728
(lp4729
S'TaskHandle'
p4730
aNtp4731
tp4732
tp4733
sS'DAQmxGetPhysicalChanTEDSMfgID'
p4734
((lp4735
S'int32'
p4736
ag34
a((S'physicalChannel'
p4737
(lp4738
S'char'
p4739
a(lp4740
I-1
aaNtp4741
(S'data'
p4742
(lp4743
S'uInt32'
p4744
ag42
aNtp4745
tp4746
tp4747
sS'DAQmxCreateAIFreqVoltageChan'
p4748
((lp4749
S'int32'
p4750
ag34
a((S'taskHandle'
p4751
(lp4752
S'TaskHandle'
p4753
aNtp4754
(S'physicalChannel'
p4755
(lp4756
S'char'
p4757
a(lp4758
I-1
aaNtp4759
(S'nameToAssignToChannel'
p4760
(lp4761
S'char'
p4762
a(lp4763
I-1
aaNtp4764
(S'minVal'
p4765
(lp4766
S'float64'
p4767
aNtp4768
(S'maxVal'
p4769
(lp4770
S'float64'
p4771
aNtp4772
(S'units'
p4773
(lp4774
S'int32'
p4775
aNtp4776
(S'thresholdLevel'
p4777
(lp4778
S'float64'
p4779
aNtp4780
(S'hysteresis'
p4781
(lp4782
S'float64'
p4783
aNtp4784
(S'customScaleName'
p4785
(lp4786
S'char'
p4787
a(lp4788
I-1
aaNtp4789
tp4790
tp4791
sS'DAQmxSetAIRVDTSensitivity'
p4792
((lp4793
S'int32'
p4794
ag34
a((S'taskHandle'
p4795
(lp4796
S'TaskHandle'
p4797
aNtp4798
(S'channel'
p4799
(lp4800
S'char'
p4801
a(lp4802
I-1
aaNtp4803
(S'data'
p4804
(lp4805
S'float64'
p4806
aNtp4807
tp4808
tp4809
sS'DAQmxGetExportedAdvCmpltEventPulsePolarity'
p4810
((lp4811
S'int32'
p4812
ag34
a((S'taskHandle'
p4813
(lp4814
S'TaskHandle'
p4815
aNtp4816
(S'data'
p4817
(lp4818
S'int32'
p4819
ag42
aNtp4820
tp4821
tp4822
sS'DAQmxGetCOPulseTicksInitialDelay'
p4823
((lp4824
S'int32'
p4825
ag34
a((S'taskHandle'
p4826
(lp4827
S'TaskHandle'
p4828
aNtp4829
(S'channel'
p4830
(lp4831
S'char'
p4832
a(lp4833
I-1
aaNtp4834
(S'data'
p4835
(lp4836
S'uInt32'
p4837
ag42
aNtp4838
tp4839
tp4840
sS'DAQmxGetReadWaitMode'
p4841
((lp4842
S'int32'
p4843
ag34
a((S'taskHandle'
p4844
(lp4845
S'TaskHandle'
p4846
aNtp4847
(S'data'
p4848
(lp4849
S'int32'
p4850
ag42
aNtp4851
tp4852
tp4853
sS'DAQmxGetDevDILines'
p4854
((lp4855
S'int32'
p4856
ag34
a((S'device'
p4857
(lp4858
S'char'
p4859
a(lp4860
I-1
aaNtp4861
(S'data'
p4862
(lp4863
S'char'
p4864
ag42
aNtp4865
(S'bufferSize'
p4866
(lp4867
S'uInt32'
p4868
aNtp4869
tp4870
tp4871
sS'DAQmxResetCOCtrTimebaseSrc'
p4872
((lp4873
S'int32'
p4874
ag34
a((S'taskHandle'
p4875
(lp4876
S'TaskHandle'
p4877
aNtp4878
(S'channel'
p4879
(lp4880
S'char'
p4881
a(lp4882
I-1
aaNtp4883
tp4884
tp4885
sS'DAQmxSetDOOutputDriveType'
p4886
((lp4887
S'int32'
p4888
ag34
a((S'taskHandle'
p4889
(lp4890
S'TaskHandle'
p4891
aNtp4892
(S'channel'
p4893
(lp4894
S'char'
p4895
a(lp4896
I-1
aaNtp4897
(S'data'
p4898
(lp4899
S'int32'
p4900
aNtp4901
tp4902
tp4903
sS'DAQmxResetExportedAIHoldCmpltEventOutputTerm'
p4904
((lp4905
S'int32'
p4906
ag34
a((S'taskHandle'
p4907
(lp4908
S'TaskHandle'
p4909
aNtp4910
tp4911
tp4912
sS'DAQmxGetAIBridgeBalanceFinePot'
p4913
((lp4914
S'int32'
p4915
ag34
a((S'taskHandle'
p4916
(lp4917
S'TaskHandle'
p4918
aNtp4919
(S'channel'
p4920
(lp4921
S'char'
p4922
a(lp4923
I-1
aaNtp4924
(S'data'
p4925
(lp4926
S'int32'
p4927
ag42
aNtp4928
tp4929
tp4930
sS'DAQmxSetAnlgWinRefTrigCoupling'
p4931
((lp4932
S'int32'
p4933
ag34
a((S'taskHandle'
p4934
(lp4935
S'TaskHandle'
p4936
aNtp4937
(S'data'
p4938
(lp4939
S'int32'
p4940
aNtp4941
tp4942
tp4943
sS'DAQmxSetInterlockedHshkTrigSrc'
p4944
((lp4945
S'int32'
p4946
ag34
a((S'taskHandle'
p4947
(lp4948
S'TaskHandle'
p4949
aNtp4950
(S'data'
p4951
(lp4952
S'char'
p4953
ag42
aNtp4954
tp4955
tp4956
sS'DAQmxGetScaleMapPreScaledMin'
p4957
((lp4958
S'int32'
p4959
ag34
a((S'scaleName'
p4960
(lp4961
S'char'
p4962
a(lp4963
I-1
aaNtp4964
(S'data'
p4965
(lp4966
S'float64'
p4967
ag42
aNtp4968
tp4969
tp4970
sS'DAQmxSetCIEncoderZInputDigFltrEnable'
p4971
((lp4972
S'int32'
p4973
ag34
a((S'taskHandle'
p4974
(lp4975
S'TaskHandle'
p4976
aNtp4977
(S'channel'
p4978
(lp4979
S'char'
p4980
a(lp4981
I-1
aaNtp4982
(S'data'
p4983
(lp4984
S'bool32'
p4985
aNtp4986
tp4987
tp4988
sS'DAQmxWriteBinaryU32'
p4989
((lp4990
S'int32'
p4991
ag34
a((S'taskHandle'
p4992
(lp4993
S'TaskHandle'
p4994
aNtp4995
(S'numSampsPerChan'
p4996
(lp4997
S'int32'
p4998
aNtp4999
(S'autoStart'
p5000
(lp5001
S'bool32'
p5002
aNtp5003
(S'timeout'
p5004
(lp5005
S'float64'
p5006
aNtp5007
(S'dataLayout'
p5008
(lp5009
S'bool32'
p5010
aNtp5011
(S'writeArray'
p5012
(lp5013
S'uInt32'
p5014
a(lp5015
I-1
aaNtp5016
(S'sampsPerChanWritten'
p5017
(lp5018
S'int32'
p5019
ag42
aNtp5020
(S'reserved'
p5021
(lp5022
S'bool32'
p5023
ag42
aNtp5024
tp5025
tp5026
sS'DAQmxGetCIPulseWidthUnits'
p5027
((lp5028
S'int32'
p5029
ag34
a((S'taskHandle'
p5030
(lp5031
S'TaskHandle'
p5032
aNtp5033
(S'channel'
p5034
(lp5035
S'char'
p5036
a(lp5037
I-1
aaNtp5038
(S'data'
p5039
(lp5040
S'int32'
p5041
ag42
aNtp5042
tp5043
tp5044
sS'DAQmxGetAIStrainGagePoissonRatio'
p5045
((lp5046
S'int32'
p5047
ag34
a((S'taskHandle'
p5048
(lp5049
S'TaskHandle'
p5050
aNtp5051
(S'channel'
p5052
(lp5053
S'char'
p5054
a(lp5055
I-1
aaNtp5056
(S'data'
p5057
(lp5058
S'float64'
p5059
ag42
aNtp5060
tp5061
tp5062
sS'DAQmxSetAIForceReadFromChan'
p5063
((lp5064
S'int32'
p5065
ag34
a((S'taskHandle'
p5066
(lp5067
S'TaskHandle'
p5068
aNtp5069
(S'channel'
p5070
(lp5071
S'char'
p5072
a(lp5073
I-1
aaNtp5074
(S'data'
p5075
(lp5076
S'bool32'
p5077
aNtp5078
tp5079
tp5080
sS'DAQmxSetAILowpassSwitchCapExtClkDiv'
p5081
((lp5082
S'int32'
p5083
ag34
a((S'taskHandle'
p5084
(lp5085
S'TaskHandle'
p5086
aNtp5087
(S'channel'
p5088
(lp5089
S'char'
p5090
a(lp5091
I-1
aaNtp5092
(S'data'
p5093
(lp5094
S'uInt32'
p5095
aNtp5096
tp5097
tp5098
sS'DAQmxResetSampClkDigSyncEnable'
p5099
((lp5100
S'int32'
p5101
ag34
a((S'taskHandle'
p5102
(lp5103
S'TaskHandle'
p5104
aNtp5105
tp5106
tp5107
sS'DAQmxResetAnlgEdgeStartTrigHyst'
p5108
((lp5109
S'int32'
p5110
ag34
a((S'taskHandle'
p5111
(lp5112
S'TaskHandle'
p5113
aNtp5114
tp5115
tp5116
sS'DAQmxGetDigEdgeAdvTrigSrc'
p5117
((lp5118
S'int32'
p5119
ag34
a((S'taskHandle'
p5120
(lp5121
S'TaskHandle'
p5122
aNtp5123
(S'data'
p5124
(lp5125
S'char'
p5126
ag42
aNtp5127
(S'bufferSize'
p5128
(lp5129
S'uInt32'
p5130
aNtp5131
tp5132
tp5133
sS'DAQmxSetExportedHshkEventInterlockedAssertOnStart'
p5134
((lp5135
S'int32'
p5136
ag34
a((S'taskHandle'
p5137
(lp5138
S'TaskHandle'
p5139
aNtp5140
(S'data'
p5141
(lp5142
S'bool32'
p5143
aNtp5144
tp5145
tp5146
sS'DAQmxSetCITwoEdgeSepUnits'
p5147
((lp5148
S'int32'
p5149
ag34
a((S'taskHandle'
p5150
(lp5151
S'TaskHandle'
p5152
aNtp5153
(S'channel'
p5154
(lp5155
S'char'
p5156
a(lp5157
I-1
aaNtp5158
(S'data'
p5159
(lp5160
S'int32'
p5161
aNtp5162
tp5163
tp5164
sS'DAQmxSetReadAutoStart'
p5165
((lp5166
S'int32'
p5167
ag34
a((S'taskHandle'
p5168
(lp5169
S'TaskHandle'
p5170
aNtp5171
(S'data'
p5172
(lp5173
S'bool32'
p5174
aNtp5175
tp5176
tp5177
sS'DAQmxSetCISemiPeriodStartingEdge'
p5178
((lp5179
S'int32'
p5180
ag34
a((S'taskHandle'
p5181
(lp5182
S'TaskHandle'
p5183
aNtp5184
(S'channel'
p5185
(lp5186
S'char'
p5187
a(lp5188
I-1
aaNtp5189
(S'data'
p5190
(lp5191
S'int32'
p5192
aNtp5193
tp5194
tp5195
sS'DAQmxResetAIForceReadFromChan'
p5196
((lp5197
S'int32'
p5198
ag34
a((S'taskHandle'
p5199
(lp5200
S'TaskHandle'
p5201
aNtp5202
(S'channel'
p5203
(lp5204
S'char'
p5205
a(lp5206
I-1
aaNtp5207
tp5208
tp5209
sS'DAQmxGetArmStartTrigType'
p5210
((lp5211
S'int32'
p5212
ag34
a((S'taskHandle'
p5213
(lp5214
S'TaskHandle'
p5215
aNtp5216
(S'data'
p5217
(lp5218
S'int32'
p5219
ag42
aNtp5220
tp5221
tp5222
sS'DAQmxGetAIConvMaxRate'
p5223
((lp5224
S'int32'
p5225
ag34
a((S'taskHandle'
p5226
(lp5227
S'TaskHandle'
p5228
aNtp5229
(S'data'
p5230
(lp5231
S'float64'
p5232
ag42
aNtp5233
tp5234
tp5235
sS'DAQmxSetDigEdgeStartTrigDigSyncEnable'
p5236
((lp5237
S'int32'
p5238
ag34
a((S'taskHandle'
p5239
(lp5240
S'TaskHandle'
p5241
aNtp5242
(S'data'
p5243
(lp5244
S'bool32'
p5245
aNtp5246
tp5247
tp5248
sS'DAQmxGetTaskNumChans'
p5249
((lp5250
S'int32'
p5251
ag34
a((S'taskHandle'
p5252
(lp5253
S'TaskHandle'
p5254
aNtp5255
(S'data'
p5256
(lp5257
S'uInt32'
p5258
ag42
aNtp5259
tp5260
tp5261
sS'DAQmxResetAOTermCfg'
p5262
((lp5263
S'int32'
p5264
ag34
a((S'taskHandle'
p5265
(lp5266
S'TaskHandle'
p5267
aNtp5268
(S'channel'
p5269
(lp5270
S'char'
p5271
a(lp5272
I-1
aaNtp5273
tp5274
tp5275
sS'DAQmxSetCIPulseWidthDigSyncEnable'
p5276
((lp5277
S'int32'
p5278
ag34
a((S'taskHandle'
p5279
(lp5280
S'TaskHandle'
p5281
aNtp5282
(S'channel'
p5283
(lp5284
S'char'
p5285
a(lp5286
I-1
aaNtp5287
(S'data'
p5288
(lp5289
S'bool32'
p5290
aNtp5291
tp5292
tp5293
sS'DAQmxGetAIACExcitSyncEnable'
p5294
((lp5295
S'int32'
p5296
ag34
a((S'taskHandle'
p5297
(lp5298
S'TaskHandle'
p5299
aNtp5300
(S'channel'
p5301
(lp5302
S'char'
p5303
a(lp5304
I-1
aaNtp5305
(S'data'
p5306
(lp5307
S'bool32'
p5308
ag42
aNtp5309
tp5310
tp5311
sS'DAQmxSetAIExcitDCorAC'
p5312
((lp5313
S'int32'
p5314
ag34
a((S'taskHandle'
p5315
(lp5316
S'TaskHandle'
p5317
aNtp5318
(S'channel'
p5319
(lp5320
S'char'
p5321
a(lp5322
I-1
aaNtp5323
(S'data'
p5324
(lp5325
S'int32'
p5326
aNtp5327
tp5328
tp5329
sS'DAQmxSetScaleMapScaledMin'
p5330
((lp5331
S'int32'
p5332
ag34
a((S'scaleName'
p5333
(lp5334
S'char'
p5335
a(lp5336
I-1
aaNtp5337
(S'data'
p5338
(lp5339
S'float64'
p5340
aNtp5341
tp5342
tp5343
sS'DAQmxResetAnlgWinStartTrigTop'
p5344
((lp5345
S'int32'
p5346
ag34
a((S'taskHandle'
p5347
(lp5348
S'TaskHandle'
p5349
aNtp5350
tp5351
tp5352
sS'DAQmxResetAnlgEdgeRefTrigHyst'
p5353
((lp5354
S'int32'
p5355
ag34
a((S'taskHandle'
p5356
(lp5357
S'TaskHandle'
p5358
aNtp5359
tp5360
tp5361
sS'DAQmxCfgInputBuffer'
p5362
((lp5363
S'int32'
p5364
ag34
a((S'taskHandle'
p5365
(lp5366
S'TaskHandle'
p5367
aNtp5368
(S'numSampsPerChan'
p5369
(lp5370
S'uInt32'
p5371
aNtp5372
tp5373
tp5374
sS'DAQmxGetExtCalRecommendedInterval'
p5375
((lp5376
S'int32'
p5377
ag34
a((S'deviceName'
p5378
(lp5379
S'char'
p5380
a(lp5381
I-1
aaNtp5382
(S'data'
p5383
(lp5384
S'uInt32'
p5385
ag42
aNtp5386
tp5387
tp5388
sS'DAQmxResetCIMin'
p5389
((lp5390
S'int32'
p5391
ag34
a((S'taskHandle'
p5392
(lp5393
S'TaskHandle'
p5394
aNtp5395
(S'channel'
p5396
(lp5397
S'char'
p5398
a(lp5399
I-1
aaNtp5400
tp5401
tp5402
sS'DAQmxResetDIDigFltrEnable'
p5403
((lp5404
S'int32'
p5405
ag34
a((S'taskHandle'
p5406
(lp5407
S'TaskHandle'
p5408
aNtp5409
(S'channel'
p5410
(lp5411
S'char'
p5412
a(lp5413
I-1
aaNtp5414
tp5415
tp5416
sS'DAQmxResetCOCtrTimebaseActiveEdge'
p5417
((lp5418
S'int32'
p5419
ag34
a((S'taskHandle'
p5420
(lp5421
S'TaskHandle'
p5422
aNtp5423
(S'channel'
p5424
(lp5425
S'char'
p5426
a(lp5427
I-1
aaNtp5428
tp5429
tp5430
sS'DAQmxGetAIConvTimebaseDiv'
p5431
((lp5432
S'int32'
p5433
ag34
a((S'taskHandle'
p5434
(lp5435
S'TaskHandle'
p5436
aNtp5437
(S'data'
p5438
(lp5439
S'uInt32'
p5440
ag42
aNtp5441
tp5442
tp5443
sS'DAQmxGetExportedHshkEventInterlockedDeassertDelay'
p5444
((lp5445
S'int32'
p5446
ag34
a((S'taskHandle'
p5447
(lp5448
S'TaskHandle'
p5449
aNtp5450
(S'data'
p5451
(lp5452
S'float64'
p5453
ag42
aNtp5454
tp5455
tp5456
sS'DAQmxResetCIPulseWidthDigFltrMinPulseWidth'
p5457
((lp5458
S'int32'
p5459
ag34
a((S'taskHandle'
p5460
(lp5461
S'TaskHandle'
p5462
aNtp5463
(S'channel'
p5464
(lp5465
S'char'
p5466
a(lp5467
I-1
aaNtp5468
tp5469
tp5470
sS'DAQmxResetCIFreqDigFltrTimebaseRate'
p5471
((lp5472
S'int32'
p5473
ag34
a((S'taskHandle'
p5474
(lp5475
S'TaskHandle'
p5476
aNtp5477
(S'channel'
p5478
(lp5479
S'char'
p5480
a(lp5481
I-1
aaNtp5482
tp5483
tp5484
sS'DAQmxGetAOCurrentUnits'
p5485
((lp5486
S'int32'
p5487
ag34
a((S'taskHandle'
p5488
(lp5489
S'TaskHandle'
p5490
aNtp5491
(S'channel'
p5492
(lp5493
S'char'
p5494
a(lp5495
I-1
aaNtp5496
(S'data'
p5497
(lp5498
S'int32'
p5499
ag42
aNtp5500
tp5501
tp5502
sS'DAQmxSetAIBridgeNomResistance'
p5503
((lp5504
S'int32'
p5505
ag34
a((S'taskHandle'
p5506
(lp5507
S'TaskHandle'
p5508
aNtp5509
(S'channel'
p5510
(lp5511
S'char'
p5512
a(lp5513
I-1
aaNtp5514
(S'data'
p5515
(lp5516
S'float64'
p5517
aNtp5518
tp5519
tp5520
sS'DAQmxResetCISemiPeriodTerm'
p5521
((lp5522
S'int32'
p5523
ag34
a((S'taskHandle'
p5524
(lp5525
S'TaskHandle'
p5526
aNtp5527
(S'channel'
p5528
(lp5529
S'char'
p5530
a(lp5531
I-1
aaNtp5532
tp5533
tp5534
sS'DAQmxSetAIGain'
p5535
((lp5536
S'int32'
p5537
ag34
a((S'taskHandle'
p5538
(lp5539
S'TaskHandle'
p5540
aNtp5541
(S'channel'
p5542
(lp5543
S'char'
p5544
a(lp5545
I-1
aaNtp5546
(S'data'
p5547
(lp5548
S'float64'
p5549
aNtp5550
tp5551
tp5552
sS'DAQmxGetWriteSpaceAvail'
p5553
((lp5554
S'int32'
p5555
ag34
a((S'taskHandle'
p5556
(lp5557
S'TaskHandle'
p5558
aNtp5559
(S'data'
p5560
(lp5561
S'uInt32'
p5562
ag42
aNtp5563
tp5564
tp5565
sS'DAQmxGetCOPulseFreqUnits'
p5566
((lp5567
S'int32'
p5568
ag34
a((S'taskHandle'
p5569
(lp5570
S'TaskHandle'
p5571
aNtp5572
(S'channel'
p5573
(lp5574
S'char'
p5575
a(lp5576
I-1
aaNtp5577
(S'data'
p5578
(lp5579
S'int32'
p5580
ag42
aNtp5581
tp5582
tp5583
sS'DAQmxGetChanIsGlobal'
p5584
((lp5585
S'int32'
p5586
ag34
a((S'taskHandle'
p5587
(lp5588
S'TaskHandle'
p5589
aNtp5590
(S'channel'
p5591
(lp5592
S'char'
p5593
a(lp5594
I-1
aaNtp5595
(S'data'
p5596
(lp5597
S'bool32'
p5598
ag42
aNtp5599
tp5600
tp5601
sS'DAQmxResetDigPatternRefTrigSrc'
p5602
((lp5603
S'int32'
p5604
ag34
a((S'taskHandle'
p5605
(lp5606
S'TaskHandle'
p5607
aNtp5608
tp5609
tp5610
sS'DAQmxGetAIChanCalCalDate'
p5611
((lp5612
S'int32'
p5613
ag34
a((S'taskHandle'
p5614
(lp5615
S'TaskHandle'
p5616
aNtp5617
(S'channelName'
p5618
(lp5619
S'char'
p5620
a(lp5621
I-1
aaNtp5622
(S'year'
p5623
(lp5624
S'uInt32'
p5625
ag42
aNtp5626
(S'month'
p5627
(lp5628
S'uInt32'
p5629
ag42
aNtp5630
(S'day'
p5631
(lp5632
S'uInt32'
p5633
ag42
aNtp5634
(S'hour'
p5635
(lp5636
S'uInt32'
p5637
ag42
aNtp5638
(S'minute'
p5639
(lp5640
S'uInt32'
p5641
ag42
aNtp5642
tp5643
tp5644
sS'DAQmxGetAICustomScaleName'
p5645
((lp5646
S'int32'
p5647
ag34
a((S'taskHandle'
p5648
(lp5649
S'TaskHandle'
p5650
aNtp5651
(S'channel'
p5652
(lp5653
S'char'
p5654
a(lp5655
I-1
aaNtp5656
(S'data'
p5657
(lp5658
S'char'
p5659
ag42
aNtp5660
(S'bufferSize'
p5661
(lp5662
S'uInt32'
p5663
aNtp5664
tp5665
tp5666
sS'DAQmxResetAIRVDTSensitivityUnits'
p5667
((lp5668
S'int32'
p5669
ag34
a((S'taskHandle'
p5670
(lp5671
S'TaskHandle'
p5672
aNtp5673
(S'channel'
p5674
(lp5675
S'char'
p5676
a(lp5677
I-1
aaNtp5678
tp5679
tp5680
sS'DAQmxResetCIPulseWidthDigSyncEnable'
p5681
((lp5682
S'int32'
p5683
ag34
a((S'taskHandle'
p5684
(lp5685
S'TaskHandle'
p5686
aNtp5687
(S'channel'
p5688
(lp5689
S'char'
p5690
a(lp5691
I-1
aaNtp5692
tp5693
tp5694
sS'DAQmxSetSyncPulseSrc'
p5695
((lp5696
S'int32'
p5697
ag34
a((S'taskHandle'
p5698
(lp5699
S'TaskHandle'
p5700
aNtp5701
(S'data'
p5702
(lp5703
S'char'
p5704
ag42
aNtp5705
tp5706
tp5707
sS'DAQmxResetDigEdgeArmStartTrigSrc'
p5708
((lp5709
S'int32'
p5710
ag34
a((S'taskHandle'
p5711
(lp5712
S'TaskHandle'
p5713
aNtp5714
tp5715
tp5716
sS'DAQmxGetAnlgLvlPauseTrigCoupling'
p5717
((lp5718
S'int32'
p5719
ag34
a((S'taskHandle'
p5720
(lp5721
S'TaskHandle'
p5722
aNtp5723
(S'data'
p5724
(lp5725
S'int32'
p5726
ag42
aNtp5727
tp5728
tp5729
sS'DAQmxGetCINumPossiblyInvalidSamps'
p5730
((lp5731
S'int32'
p5732
ag34
a((S'taskHandle'
p5733
(lp5734
S'TaskHandle'
p5735
aNtp5736
(S'channel'
p5737
(lp5738
S'char'
p5739
a(lp5740
I-1
aaNtp5741
(S'data'
p5742
(lp5743
S'uInt32'
p5744
ag42
aNtp5745
tp5746
tp5747
sS'DAQmxResetStartTrigRetriggerable'
p5748
((lp5749
S'int32'
p5750
ag34
a((S'taskHandle'
p5751
(lp5752
S'TaskHandle'
p5753
aNtp5754
tp5755
tp5756
sS'DAQmxResetCIDupCountPrevent'
p5757
((lp5758
S'int32'
p5759
ag34
a((S'taskHandle'
p5760
(lp5761
S'TaskHandle'
p5762
aNtp5763
(S'channel'
p5764
(lp5765
S'char'
p5766
a(lp5767
I-1
aaNtp5768
tp5769
tp5770
sS'DAQmxResetExportedRdyForXferEventOutputTerm'
p5771
((lp5772
S'int32'
p5773
ag34
a((S'taskHandle'
p5774
(lp5775
S'TaskHandle'
p5776
aNtp5777
tp5778
tp5779
sS'DAQmxGetAIConvTimebaseSrc'
p5780
((lp5781
S'int32'
p5782
ag34
a((S'taskHandle'
p5783
(lp5784
S'TaskHandle'
p5785
aNtp5786
(S'data'
p5787
(lp5788
S'int32'
p5789
ag42
aNtp5790
tp5791
tp5792
sS'DAQmxGetDigEdgeWatchdogExpirTrigEdge'
p5793
((lp5794
S'int32'
p5795
ag34
a((S'taskHandle'
p5796
(lp5797
S'TaskHandle'
p5798
aNtp5799
(S'data'
p5800
(lp5801
S'int32'
p5802
ag42
aNtp5803
tp5804
tp5805
sS'DAQmxSetAnlgEdgeRefTrigCoupling'
p5806
((lp5807
S'int32'
p5808
ag34
a((S'taskHandle'
p5809
(lp5810
S'TaskHandle'
p5811
aNtp5812
(S'data'
p5813
(lp5814
S'int32'
p5815
aNtp5816
tp5817
tp5818
sS'DAQmxResetRealTimeWriteRecoveryMode'
p5819
((lp5820
S'int32'
p5821
ag34
a((S'taskHandle'
p5822
(lp5823
S'TaskHandle'
p5824
aNtp5825
tp5826
tp5827
sS'DAQmxSetAIEnhancedAliasRejectionEnable'
p5828
((lp5829
S'int32'
p5830
ag34
a((S'taskHandle'
p5831
(lp5832
S'TaskHandle'
p5833
aNtp5834
(S'channel'
p5835
(lp5836
S'char'
p5837
a(lp5838
I-1
aaNtp5839
(S'data'
p5840
(lp5841
S'bool32'
p5842
aNtp5843
tp5844
tp5845
sS'DAQmxGetDigPatternRefTrigWhen'
p5846
((lp5847
S'int32'
p5848
ag34
a((S'taskHandle'
p5849
(lp5850
S'TaskHandle'
p5851
aNtp5852
(S'data'
p5853
(lp5854
S'int32'
p5855
ag42
aNtp5856
tp5857
tp5858
sS'DAQmxGetCIPeriodDigFltrTimebaseSrc'
p5859
((lp5860
S'int32'
p5861
ag34
a((S'taskHandle'
p5862
(lp5863
S'TaskHandle'
p5864
aNtp5865
(S'channel'
p5866
(lp5867
S'char'
p5868
a(lp5869
I-1
aaNtp5870
(S'data'
p5871
(lp5872
S'char'
p5873
ag42
aNtp5874
(S'bufferSize'
p5875
(lp5876
S'uInt32'
p5877
aNtp5878
tp5879
tp5880
sS'DAQmxGetSwitchDevRelayList'
p5881
((lp5882
S'int32'
p5883
ag34
a((S'deviceName'
p5884
(lp5885
S'char'
p5886
a(lp5887
I-1
aaNtp5888
(S'data'
p5889
(lp5890
S'char'
p5891
ag42
aNtp5892
(S'bufferSize'
p5893
(lp5894
S'uInt32'
p5895
aNtp5896
tp5897
tp5898
sS'DAQmxResetAIBridgeBalanceFinePot'
p5899
((lp5900
S'int32'
p5901
ag34
a((S'taskHandle'
p5902
(lp5903
S'TaskHandle'
p5904
aNtp5905
(S'channel'
p5906
(lp5907
S'char'
p5908
a(lp5909
I-1
aaNtp5910
tp5911
tp5912
sS'DAQmxGetCICountEdgesDir'
p5913
((lp5914
S'int32'
p5915
ag34
a((S'taskHandle'
p5916
(lp5917
S'TaskHandle'
p5918
aNtp5919
(S'channel'
p5920
(lp5921
S'char'
p5922
a(lp5923
I-1
aaNtp5924
(S'data'
p5925
(lp5926
S'int32'
p5927
ag42
aNtp5928
tp5929
tp5930
sS'DAQmxGetScaleTableScaledVals'
p5931
((lp5932
S'int32'
p5933
ag34
a((S'scaleName'
p5934
(lp5935
S'char'
p5936
a(lp5937
I-1
aaNtp5938
(S'data'
p5939
(lp5940
S'float64'
p5941
ag42
aNtp5942
(S'arraySizeInSamples'
p5943
(lp5944
S'uInt32'
p5945
aNtp5946
tp5947
tp5948
sS'DAQmxGetStartTrigDelay'
p5949
((lp5950
S'int32'
p5951
ag34
a((S'taskHandle'
p5952
(lp5953
S'TaskHandle'
p5954
aNtp5955
(S'data'
p5956
(lp5957
S'float64'
p5958
ag42
aNtp5959
tp5960
tp5961
sS'DAQmxGetCITCReached'
p5962
((lp5963
S'int32'
p5964
ag34
a((S'taskHandle'
p5965
(lp5966
S'TaskHandle'
p5967
aNtp5968
(S'channel'
p5969
(lp5970
S'char'
p5971
a(lp5972
I-1
aaNtp5973
(S'data'
p5974
(lp5975
S'bool32'
p5976
ag42
aNtp5977
tp5978
tp5979
sS'DAQmxSetAISampAndHoldEnable'
p5980
((lp5981
S'int32'
p5982
ag34
a((S'taskHandle'
p5983
(lp5984
S'TaskHandle'
p5985
aNtp5986
(S'channel'
p5987
(lp5988
S'char'
p5989
a(lp5990
I-1
aaNtp5991
(S'data'
p5992
(lp5993
S'bool32'
p5994
aNtp5995
tp5996
tp5997
sS'DAQmxResetAIExcitUseForScaling'
p5998
((lp5999
S'int32'
p6000
ag34
a((S'taskHandle'
p6001
(lp6002
S'TaskHandle'
p6003
aNtp6004
(S'channel'
p6005
(lp6006
S'char'
p6007
a(lp6008
I-1
aaNtp6009
tp6010
tp6011
sS'DAQmxSaveGlobalChan'
p6012
((lp6013
S'int32'
p6014
ag34
a((S'taskHandle'
p6015
(lp6016
S'TaskHandle'
p6017
aNtp6018
(S'channelName'
p6019
(lp6020
S'char'
p6021
a(lp6022
I-1
aaNtp6023
(S'saveAs'
p6024
(lp6025
S'char'
p6026
a(lp6027
I-1
aaNtp6028
(S'author'
p6029
(lp6030
S'char'
p6031
a(lp6032
I-1
aaNtp6033
(S'options'
p6034
(lp6035
S'uInt32'
p6036
aNtp6037
tp6038
tp6039
sS'DAQmxSCBaseboardCalAdjust'
p6040
((lp6041
S'int32'
p6042
ag34
a((S'calHandle'
p6043
(lp6044
S'uInt32'
p6045
aNtp6046
(S'referenceVoltage'
p6047
(lp6048
S'float64'
p6049
aNtp6050
tp6051
tp6052
sS'DAQmxSetCISemiPeriodDigFltrTimebaseRate'
p6053
((lp6054
S'int32'
p6055
ag34
a((S'taskHandle'
p6056
(lp6057
S'TaskHandle'
p6058
aNtp6059
(S'channel'
p6060
(lp6061
S'char'
p6062
a(lp6063
I-1
aaNtp6064
(S'data'
p6065
(lp6066
S'float64'
p6067
aNtp6068
tp6069
tp6070
sS'DAQmxGetPersistedScaleAllowInteractiveDeletion'
p6071
((lp6072
S'int32'
p6073
ag34
a((S'scaleName'
p6074
(lp6075
S'char'
p6076
a(lp6077
I-1
aaNtp6078
(S'data'
p6079
(lp6080
S'bool32'
p6081
ag42
aNtp6082
tp6083
tp6084
sS'DAQmxSetDigEdgeArmStartTrigDigFltrMinPulseWidth'
p6085
((lp6086
S'int32'
p6087
ag34
a((S'taskHandle'
p6088
(lp6089
S'TaskHandle'
p6090
aNtp6091
(S'data'
p6092
(lp6093
S'float64'
p6094
aNtp6095
tp6096
tp6097
sS'DAQmxGetExportedChangeDetectEventOutputTerm'
p6098
((lp6099
S'int32'
p6100
ag34
a((S'taskHandle'
p6101
(lp6102
S'TaskHandle'
p6103
aNtp6104
(S'data'
p6105
(lp6106
S'char'
p6107
ag42
aNtp6108
(S'bufferSize'
p6109
(lp6110
S'uInt32'
p6111
aNtp6112
tp6113
tp6114
sS'DAQmxSetAODACRefExtSrc'
p6115
((lp6116
S'int32'
p6117
ag34
a((S'taskHandle'
p6118
(lp6119
S'TaskHandle'
p6120
aNtp6121
(S'channel'
p6122
(lp6123
S'char'
p6124
a(lp6125
I-1
aaNtp6126
(S'data'
p6127
(lp6128
S'char'
p6129
ag42
aNtp6130
tp6131
tp6132
sS'DAQmxSetAIThrmcplCJCVal'
p6133
((lp6134
S'int32'
p6135
ag34
a((S'taskHandle'
p6136
(lp6137
S'TaskHandle'
p6138
aNtp6139
(S'channel'
p6140
(lp6141
S'char'
p6142
a(lp6143
I-1
aaNtp6144
(S'data'
p6145
(lp6146
S'float64'
p6147
aNtp6148
tp6149
tp6150
sS'DAQmxResetAIRVDTUnits'
p6151
((lp6152
S'int32'
p6153
ag34
a((S'taskHandle'
p6154
(lp6155
S'TaskHandle'
p6156
aNtp6157
(S'channel'
p6158
(lp6159
S'char'
p6160
a(lp6161
I-1
aaNtp6162
tp6163
tp6164
sS'DAQmxResetDigEdgeArmStartTrigDigFltrEnable'
p6165
((lp6166
S'int32'
p6167
ag34
a((S'taskHandle'
p6168
(lp6169
S'TaskHandle'
p6170
aNtp6171
tp6172
tp6173
sS'DAQmxSetCIEncoderAInputTerm'
p6174
((lp6175
S'int32'
p6176
ag34
a((S'taskHandle'
p6177
(lp6178
S'TaskHandle'
p6179
aNtp6180
(S'channel'
p6181
(lp6182
S'char'
p6183
a(lp6184
I-1
aaNtp6185
(S'data'
p6186
(lp6187
S'char'
p6188
ag42
aNtp6189
tp6190
tp6191
sS'DAQmxSetAIRawDataCompressionType'
p6192
((lp6193
S'int32'
p6194
ag34
a((S'taskHandle'
p6195
(lp6196
S'TaskHandle'
p6197
aNtp6198
(S'channel'
p6199
(lp6200
S'char'
p6201
a(lp6202
I-1
aaNtp6203
(S'data'
p6204
(lp6205
S'int32'
p6206
aNtp6207
tp6208
tp6209
sS'DAQmxResetArmStartTrigType'
p6210
((lp6211
S'int32'
p6212
ag34
a((S'taskHandle'
p6213
(lp6214
S'TaskHandle'
p6215
aNtp6216
tp6217
tp6218
sS'DAQmxResetTimingAttribute'
p6219
((lp6220
S'int32'
p6221
ag34
a((S'taskHandle'
p6222
(lp6223
S'TaskHandle'
p6224
aNtp6225
(S'attribute'
p6226
(lp6227
S'int32'
p6228
aNtp6229
tp6230
tp6231
sS'DAQmxCreateCIFreqChan'
p6232
((lp6233
S'int32'
p6234
ag34
a((S'taskHandle'
p6235
(lp6236
S'TaskHandle'
p6237
aNtp6238
(S'counter'
p6239
(lp6240
S'char'
p6241
a(lp6242
I-1
aaNtp6243
(S'nameToAssignToChannel'
p6244
(lp6245
S'char'
p6246
a(lp6247
I-1
aaNtp6248
(S'minVal'
p6249
(lp6250
S'float64'
p6251
aNtp6252
(S'maxVal'
p6253
(lp6254
S'float64'
p6255
aNtp6256
(S'units'
p6257
(lp6258
S'int32'
p6259
aNtp6260
(S'edge'
p6261
(lp6262
S'int32'
p6263
aNtp6264
(S'measMethod'
p6265
(lp6266
S'int32'
p6267
aNtp6268
(S'measTime'
p6269
(lp6270
S'float64'
p6271
aNtp6272
(S'divisor'
p6273
(lp6274
S'uInt32'
p6275
aNtp6276
(S'customScaleName'
p6277
(lp6278
S'char'
p6279
a(lp6280
I-1
aaNtp6281
tp6282
tp6283
sS'DAQmxGetCIEncoderAInputDigFltrMinPulseWidth'
p6284
((lp6285
S'int32'
p6286
ag34
a((S'taskHandle'
p6287
(lp6288
S'TaskHandle'
p6289
aNtp6290
(S'channel'
p6291
(lp6292
S'char'
p6293
a(lp6294
I-1
aaNtp6295
(S'data'
p6296
(lp6297
S'float64'
p6298
ag42
aNtp6299
tp6300
tp6301
sS'DAQmxGetSwitchChanMaxDCVoltage'
p6302
((lp6303
S'int32'
p6304
ag34
a((S'switchChannelName'
p6305
(lp6306
S'char'
p6307
a(lp6308
I-1
aaNtp6309
(S'data'
p6310
(lp6311
S'float64'
p6312
ag42
aNtp6313
tp6314
tp6315
sS'DAQmxGetAnlgEdgeRefTrigLvl'
p6316
((lp6317
S'int32'
p6318
ag34
a((S'taskHandle'
p6319
(lp6320
S'TaskHandle'
p6321
aNtp6322
(S'data'
p6323
(lp6324
S'float64'
p6325
ag42
aNtp6326
tp6327
tp6328
sS'DAQmxGetExportedChangeDetectEventPulsePolarity'
p6329
((lp6330
S'int32'
p6331
ag34
a((S'taskHandle'
p6332
(lp6333
S'TaskHandle'
p6334
aNtp6335
(S'data'
p6336
(lp6337
S'int32'
p6338
ag42
aNtp6339
tp6340
tp6341
sS'DAQmxGetAIResolution'
p6342
((lp6343
S'int32'
p6344
ag34
a((S'taskHandle'
p6345
(lp6346
S'TaskHandle'
p6347
aNtp6348
(S'channel'
p6349
(lp6350
S'char'
p6351
a(lp6352
I-1
aaNtp6353
(S'data'
p6354
(lp6355
S'float64'
p6356
ag42
aNtp6357
tp6358
tp6359
sS'DAQmxResetAODataXferReqCond'
p6360
((lp6361
S'int32'
p6362
ag34
a((S'taskHandle'
p6363
(lp6364
S'TaskHandle'
p6365
aNtp6366
(S'channel'
p6367
(lp6368
S'char'
p6369
a(lp6370
I-1
aaNtp6371
tp6372
tp6373
sS'DAQmxGetAOLoadImpedance'
p6374
((lp6375
S'int32'
p6376
ag34
a((S'taskHandle'
p6377
(lp6378
S'TaskHandle'
p6379
aNtp6380
(S'channel'
p6381
(lp6382
S'char'
p6383
a(lp6384
I-1
aaNtp6385
(S'data'
p6386
(lp6387
S'float64'
p6388
ag42
aNtp6389
tp6390
tp6391
sS'DAQmxResetAODACRefAllowConnToGnd'
p6392
((lp6393
S'int32'
p6394
ag34
a((S'taskHandle'
p6395
(lp6396
S'TaskHandle'
p6397
aNtp6398
(S'channel'
p6399
(lp6400
S'char'
p6401
a(lp6402
I-1
aaNtp6403
tp6404
tp6405
sS'DAQmxResetSwitchScanBreakMode'
p6406
((lp6407
S'int32'
p6408
ag34
a((S'taskHandle'
p6409
(lp6410
S'TaskHandle'
p6411
aNtp6412
tp6413
tp6414
sS'DAQmxResetExported10MHzRefClkOutputTerm'
p6415
((lp6416
S'int32'
p6417
ag34
a((S'taskHandle'
p6418
(lp6419
S'TaskHandle'
p6420
aNtp6421
tp6422
tp6423
sS'DAQmxSetSwitchChanUsage'
p6424
((lp6425
S'int32'
p6426
ag34
a((S'switchChannelName'
p6427
(lp6428
S'char'
p6429
a(lp6430
I-1
aaNtp6431
(S'data'
p6432
(lp6433
S'int32'
p6434
aNtp6435
tp6436
tp6437
sS'DAQmxSetCIPeriodTerm'
p6438
((lp6439
S'int32'
p6440
ag34
a((S'taskHandle'
p6441
(lp6442
S'TaskHandle'
p6443
aNtp6444
(S'channel'
p6445
(lp6446
S'char'
p6447
a(lp6448
I-1
aaNtp6449
(S'data'
p6450
(lp6451
S'char'
p6452
ag42
aNtp6453
tp6454
tp6455
sS'DAQmxGetCIPeriodDigFltrTimebaseRate'
p6456
((lp6457
S'int32'
p6458
ag34
a((S'taskHandle'
p6459
(lp6460
S'TaskHandle'
p6461
aNtp6462
(S'channel'
p6463
(lp6464
S'char'
p6465
a(lp6466
I-1
aaNtp6467
(S'data'
p6468
(lp6469
S'float64'
p6470
ag42
aNtp6471
tp6472
tp6473
sS'DAQmxSetExportedAIHoldCmpltEventOutputTerm'
p6474
((lp6475
S'int32'
p6476
ag34
a((S'taskHandle'
p6477
(lp6478
S'TaskHandle'
p6479
aNtp6480
(S'data'
p6481
(lp6482
S'char'
p6483
ag42
aNtp6484
tp6485
tp6486
sS'DAQmxGetAIExcitVal'
p6487
((lp6488
S'int32'
p6489
ag34
a((S'taskHandle'
p6490
(lp6491
S'TaskHandle'
p6492
aNtp6493
(S'channel'
p6494
(lp6495
S'char'
p6496
a(lp6497
I-1
aaNtp6498
(S'data'
p6499
(lp6500
S'float64'
p6501
ag42
aNtp6502
tp6503
tp6504
sS'DAQmxSetDigEdgeArmStartTrigEdge'
p6505
((lp6506
S'int32'
p6507
ag34
a((S'taskHandle'
p6508
(lp6509
S'TaskHandle'
p6510
aNtp6511
(S'data'
p6512
(lp6513
S'int32'
p6514
aNtp6515
tp6516
tp6517
sS'DAQmxSetSampClkTimebaseActiveEdge'
p6518
((lp6519
S'int32'
p6520
ag34
a((S'taskHandle'
p6521
(lp6522
S'TaskHandle'
p6523
aNtp6524
(S'data'
p6525
(lp6526
S'int32'
p6527
aNtp6528
tp6529
tp6530
sS'DAQmxCreateAIDeviceTempChan'
p6531
((lp6532
S'int32'
p6533
ag34
a((S'taskHandle'
p6534
(lp6535
S'TaskHandle'
p6536
aNtp6537
(S'physicalChannel'
p6538
(lp6539
S'char'
p6540
a(lp6541
I-1
aaNtp6542
(S'nameToAssignToChannel'
p6543
(lp6544
S'char'
p6545
a(lp6546
I-1
aaNtp6547
(S'units'
p6548
(lp6549
S'int32'
p6550
aNtp6551
tp6552
tp6553
sS'DAQmxCreateCOPulseChanFreq'
p6554
((lp6555
S'int32'
p6556
ag34
a((S'taskHandle'
p6557
(lp6558
S'TaskHandle'
p6559
aNtp6560
(S'counter'
p6561
(lp6562
S'char'
p6563
a(lp6564
I-1
aaNtp6565
(S'nameToAssignToChannel'
p6566
(lp6567
S'char'
p6568
a(lp6569
I-1
aaNtp6570
(S'units'
p6571
(lp6572
S'int32'
p6573
aNtp6574
(S'idleState'
p6575
(lp6576
S'int32'
p6577
aNtp6578
(S'initialDelay'
p6579
(lp6580
S'float64'
p6581
aNtp6582
(S'freq'
p6583
(lp6584
S'float64'
p6585
aNtp6586
(S'dutyCycle'
p6587
(lp6588
S'float64'
p6589
aNtp6590
tp6591
tp6592
sS'DAQmxGetAITempUnits'
p6593
((lp6594
S'int32'
p6595
ag34
a((S'taskHandle'
p6596
(lp6597
S'TaskHandle'
p6598
aNtp6599
(S'channel'
p6600
(lp6601
S'char'
p6602
a(lp6603
I-1
aaNtp6604
(S'data'
p6605
(lp6606
S'int32'
p6607
ag42
aNtp6608
tp6609
tp6610
sS'DAQmxGetAOUseOnlyOnBrdMem'
p6611
((lp6612
S'int32'
p6613
ag34
a((S'taskHandle'
p6614
(lp6615
S'TaskHandle'
p6616
aNtp6617
(S'channel'
p6618
(lp6619
S'char'
p6620
a(lp6621
I-1
aaNtp6622
(S'data'
p6623
(lp6624
S'bool32'
p6625
ag42
aNtp6626
tp6627
tp6628
sS'DAQmxGetAOOutputType'
p6629
((lp6630
S'int32'
p6631
ag34
a((S'taskHandle'
p6632
(lp6633
S'TaskHandle'
p6634
aNtp6635
(S'channel'
p6636
(lp6637
S'char'
p6638
a(lp6639
I-1
aaNtp6640
(S'data'
p6641
(lp6642
S'int32'
p6643
ag42
aNtp6644
tp6645
tp6646
sS'DAQmxResetCITwoEdgeSepSecondDigFltrEnable'
p6647
((lp6648
S'int32'
p6649
ag34
a((S'taskHandle'
p6650
(lp6651
S'TaskHandle'
p6652
aNtp6653
(S'channel'
p6654
(lp6655
S'char'
p6656
a(lp6657
I-1
aaNtp6658
tp6659
tp6660
sS'DAQmxGetRealTimeWaitForNextSampClkWaitMode'
p6661
((lp6662
S'int32'
p6663
ag34
a((S'taskHandle'
p6664
(lp6665
S'TaskHandle'
p6666
aNtp6667
(S'data'
p6668
(lp6669
S'int32'
p6670
ag42
aNtp6671
tp6672
tp6673
sS'DAQmxSetRealTimeConvLateErrorsToWarnings'
p6674
((lp6675
S'int32'
p6676
ag34
a((S'taskHandle'
p6677
(lp6678
S'TaskHandle'
p6679
aNtp6680
(S'data'
p6681
(lp6682
S'bool32'
p6683
aNtp6684
tp6685
tp6686
sS'DAQmxResetCOPulseTimeInitialDelay'
p6687
((lp6688
S'int32'
p6689
ag34
a((S'taskHandle'
p6690
(lp6691
S'TaskHandle'
p6692
aNtp6693
(S'channel'
p6694
(lp6695
S'char'
p6696
a(lp6697
I-1
aaNtp6698
tp6699
tp6700
sS'DAQmxSetCIEncoderZInputTerm'
p6701
((lp6702
S'int32'
p6703
ag34
a((S'taskHandle'
p6704
(lp6705
S'TaskHandle'
p6706
aNtp6707
(S'channel'
p6708
(lp6709
S'char'
p6710
a(lp6711
I-1
aaNtp6712
(S'data'
p6713
(lp6714
S'char'
p6715
ag42
aNtp6716
tp6717
tp6718
sS'DAQmxGetScaleScaledUnits'
p6719
((lp6720
S'int32'
p6721
ag34
a((S'scaleName'
p6722
(lp6723
S'char'
p6724
a(lp6725
I-1
aaNtp6726
(S'data'
p6727
(lp6728
S'char'
p6729
ag42
aNtp6730
(S'bufferSize'
p6731
(lp6732
S'uInt32'
p6733
aNtp6734
tp6735
tp6736
sS'DAQmxSetAITermCfg'
p6737
((lp6738
S'int32'
p6739
ag34
a((S'taskHandle'
p6740
(lp6741
S'TaskHandle'
p6742
aNtp6743
(S'channel'
p6744
(lp6745
S'char'
p6746
a(lp6747
I-1
aaNtp6748
(S'data'
p6749
(lp6750
S'int32'
p6751
aNtp6752
tp6753
tp6754
sS'DAQmxResetExportedStartTrigOutputTerm'
p6755
((lp6756
S'int32'
p6757
ag34
a((S'taskHandle'
p6758
(lp6759
S'TaskHandle'
p6760
aNtp6761
tp6762
tp6763
sS'DAQmxGetCIEncoderBInputDigFltrTimebaseRate'
p6764
((lp6765
S'int32'
p6766
ag34
a((S'taskHandle'
p6767
(lp6768
S'TaskHandle'
p6769
aNtp6770
(S'channel'
p6771
(lp6772
S'char'
p6773
a(lp6774
I-1
aaNtp6775
(S'data'
p6776
(lp6777
S'float64'
p6778
ag42
aNtp6779
tp6780
tp6781
sS'DAQmxReadCounterScalarU32'
p6782
((lp6783
S'int32'
p6784
ag34
a((S'taskHandle'
p6785
(lp6786
S'TaskHandle'
p6787
aNtp6788
(S'timeout'
p6789
(lp6790
S'float64'
p6791
aNtp6792
(S'value'
p6793
(lp6794
S'uInt32'
p6795
ag42
aNtp6796
(S'reserved'
p6797
(lp6798
S'bool32'
p6799
ag42
aNtp6800
tp6801
tp6802
sS'DAQmxResetAIAccelSensitivity'
p6803
((lp6804
S'int32'
p6805
ag34
a((S'taskHandle'
p6806
(lp6807
S'TaskHandle'
p6808
aNtp6809
(S'channel'
p6810
(lp6811
S'char'
p6812
a(lp6813
I-1
aaNtp6814
tp6815
tp6816
sS'DAQmxResetCOCtrTimebaseDigFltrEnable'
p6817
((lp6818
S'int32'
p6819
ag34
a((S'taskHandle'
p6820
(lp6821
S'TaskHandle'
p6822
aNtp6823
(S'channel'
p6824
(lp6825
S'char'
p6826
a(lp6827
I-1
aaNtp6828
tp6829
tp6830
sS'DAQmxSetCICtrTimebaseSrc'
p6831
((lp6832
S'int32'
p6833
ag34
a((S'taskHandle'
p6834
(lp6835
S'TaskHandle'
p6836
aNtp6837
(S'channel'
p6838
(lp6839
S'char'
p6840
a(lp6841
I-1
aaNtp6842
(S'data'
p6843
(lp6844
S'char'
p6845
ag42
aNtp6846
tp6847
tp6848
sS'DAQmxResetCICountEdgesDirTerm'
p6849
((lp6850
S'int32'
p6851
ag34
a((S'taskHandle'
p6852
(lp6853
S'TaskHandle'
p6854
aNtp6855
(S'channel'
p6856
(lp6857
S'char'
p6858
a(lp6859
I-1
aaNtp6860
tp6861
tp6862
sS'DAQmxResetAIBridgeInitialVoltage'
p6863
((lp6864
S'int32'
p6865
ag34
a((S'taskHandle'
p6866
(lp6867
S'TaskHandle'
p6868
aNtp6869
(S'channel'
p6870
(lp6871
S'char'
p6872
a(lp6873
I-1
aaNtp6874
tp6875
tp6876
sS'DAQmxGetExportedHshkEventOutputTerm'
p6877
((lp6878
S'int32'
p6879
ag34
a((S'taskHandle'
p6880
(lp6881
S'TaskHandle'
p6882
aNtp6883
(S'data'
p6884
(lp6885
S'char'
p6886
ag42
aNtp6887
(S'bufferSize'
p6888
(lp6889
S'uInt32'
p6890
aNtp6891
tp6892
tp6893
sS'DAQmxGetCITwoEdgeSepSecondDigFltrTimebaseSrc'
p6894
((lp6895
S'int32'
p6896
ag34
a((S'taskHandle'
p6897
(lp6898
S'TaskHandle'
p6899
aNtp6900
(S'channel'
p6901
(lp6902
S'char'
p6903
a(lp6904
I-1
aaNtp6905
(S'data'
p6906
(lp6907
S'char'
p6908
ag42
aNtp6909
(S'bufferSize'
p6910
(lp6911
S'uInt32'
p6912
aNtp6913
tp6914
tp6915
sS'DAQmxSetCIPulseWidthTerm'
p6916
((lp6917
S'int32'
p6918
ag34
a((S'taskHandle'
p6919
(lp6920
S'TaskHandle'
p6921
aNtp6922
(S'channel'
p6923
(lp6924
S'char'
p6925
a(lp6926
I-1
aaNtp6927
(S'data'
p6928
(lp6929
S'char'
p6930
ag42
aNtp6931
tp6932
tp6933
sS'DAQmxSetExportedHshkEventInterlockedDeassertDelay'
p6934
((lp6935
S'int32'
p6936
ag34
a((S'taskHandle'
p6937
(lp6938
S'TaskHandle'
p6939
aNtp6940
(S'data'
p6941
(lp6942
S'float64'
p6943
aNtp6944
tp6945
tp6946
sS'DAQmxResetAIConvSrc'
p6947
((lp6948
S'int32'
p6949
ag34
a((S'taskHandle'
p6950
(lp6951
S'TaskHandle'
p6952
aNtp6953
tp6954
tp6955
sS'DAQmxSetCIDataXferMech'
p6956
((lp6957
S'int32'
p6958
ag34
a((S'taskHandle'
p6959
(lp6960
S'TaskHandle'
p6961
aNtp6962
(S'channel'
p6963
(lp6964
S'char'
p6965
a(lp6966
I-1
aaNtp6967
(S'data'
p6968
(lp6969
S'int32'
p6970
aNtp6971
tp6972
tp6973
sS'DAQmxCreateAIAccelChan'
p6974
((lp6975
S'int32'
p6976
ag34
a((S'taskHandle'
p6977
(lp6978
S'TaskHandle'
p6979
aNtp6980
(S'physicalChannel'
p6981
(lp6982
S'char'
p6983
a(lp6984
I-1
aaNtp6985
(S'nameToAssignToChannel'
p6986
(lp6987
S'char'
p6988
a(lp6989
I-1
aaNtp6990
(S'terminalConfig'
p6991
(lp6992
S'int32'
p6993
aNtp6994
(S'minVal'
p6995
(lp6996
S'float64'
p6997
aNtp6998
(S'maxVal'
p6999
(lp7000
S'float64'
p7001
aNtp7002
(S'units'
p7003
(lp7004
S'int32'
p7005
aNtp7006
(S'sensitivity'
p7007
(lp7008
S'float64'
p7009
aNtp7010
(S'sensitivityUnits'
p7011
(lp7012
S'int32'
p7013
aNtp7014
(S'currentExcitSource'
p7015
(lp7016
S'int32'
p7017
aNtp7018
(S'currentExcitVal'
p7019
(lp7020
S'float64'
p7021
aNtp7022
(S'customScaleName'
p7023
(lp7024
S'char'
p7025
a(lp7026
I-1
aaNtp7027
tp7028
tp7029
sS'DAQmxSetDIDigFltrEnable'
p7030
((lp7031
S'int32'
p7032
ag34
a((S'taskHandle'
p7033
(lp7034
S'TaskHandle'
p7035
aNtp7036
(S'channel'
p7037
(lp7038
S'char'
p7039
a(lp7040
I-1
aaNtp7041
(S'data'
p7042
(lp7043
S'bool32'
p7044
aNtp7045
tp7046
tp7047
sS'DAQmxGetAILowpassCutoffFreq'
p7048
((lp7049
S'int32'
p7050
ag34
a((S'taskHandle'
p7051
(lp7052
S'TaskHandle'
p7053
aNtp7054
(S'channel'
p7055
(lp7056
S'char'
p7057
a(lp7058
I-1
aaNtp7059
(S'data'
p7060
(lp7061
S'float64'
p7062
ag42
aNtp7063
tp7064
tp7065
sS'DAQmxResetHshkDelayAfterXfer'
p7066
((lp7067
S'int32'
p7068
ag34
a((S'taskHandle'
p7069
(lp7070
S'TaskHandle'
p7071
aNtp7072
tp7073
tp7074
sS'DAQmxWriteAnalogScalarF64'
p7075
((lp7076
S'int32'
p7077
ag34
a((S'taskHandle'
p7078
(lp7079
S'TaskHandle'
p7080
aNtp7081
(S'autoStart'
p7082
(lp7083
S'bool32'
p7084
aNtp7085
(S'timeout'
p7086
(lp7087
S'float64'
p7088
aNtp7089
(S'value'
p7090
(lp7091
S'float64'
p7092
aNtp7093
(S'reserved'
p7094
(lp7095
S'bool32'
p7096
ag42
aNtp7097
tp7098
tp7099
sS'DAQmxResetCOCtrTimebaseDigFltrTimebaseRate'
p7100
((lp7101
S'int32'
p7102
ag34
a((S'taskHandle'
p7103
(lp7104
S'TaskHandle'
p7105
aNtp7106
(S'channel'
p7107
(lp7108
S'char'
p7109
a(lp7110
I-1
aaNtp7111
tp7112
tp7113
sS'DAQmxGetWriteTotalSampPerChanGenerated'
p7114
((lp7115
S'int32'
p7116
ag34
a((S'taskHandle'
p7117
(lp7118
S'TaskHandle'
p7119
aNtp7120
(S'data'
p7121
(lp7122
S'uInt64'
p7123
ag42
aNtp7124
tp7125
tp7126
sS'DAQmxSetCIFreqTerm'
p7127
((lp7128
S'int32'
p7129
ag34
a((S'taskHandle'
p7130
(lp7131
S'TaskHandle'
p7132
aNtp7133
(S'channel'
p7134
(lp7135
S'char'
p7136
a(lp7137
I-1
aaNtp7138
(S'data'
p7139
(lp7140
S'char'
p7141
ag42
aNtp7142
tp7143
tp7144
sS'DAQmxSetCIPulseWidthUnits'
p7145
((lp7146
S'int32'
p7147
ag34
a((S'taskHandle'
p7148
(lp7149
S'TaskHandle'
p7150
aNtp7151
(S'channel'
p7152
(lp7153
S'char'
p7154
a(lp7155
I-1
aaNtp7156
(S'data'
p7157
(lp7158
S'int32'
p7159
aNtp7160
tp7161
tp7162
sS'DAQmxSetCIPeriodDigSyncEnable'
p7163
((lp7164
S'int32'
p7165
ag34
a((S'taskHandle'
p7166
(lp7167
S'TaskHandle'
p7168
aNtp7169
(S'channel'
p7170
(lp7171
S'char'
p7172
a(lp7173
I-1
aaNtp7174
(S'data'
p7175
(lp7176
S'bool32'
p7177
aNtp7178
tp7179
tp7180
sS'DAQmxResetCICountEdgesDigFltrTimebaseSrc'
p7181
((lp7182
S'int32'
p7183
ag34
a((S'taskHandle'
p7184
(lp7185
S'TaskHandle'
p7186
aNtp7187
(S'channel'
p7188
(lp7189
S'char'
p7190
a(lp7191
I-1
aaNtp7192
tp7193
tp7194
sS'DAQmxResetCIPulseWidthDigFltrEnable'
p7195
((lp7196
S'int32'
p7197
ag34
a((S'taskHandle'
p7198
(lp7199
S'TaskHandle'
p7200
aNtp7201
(S'channel'
p7202
(lp7203
S'char'
p7204
a(lp7205
I-1
aaNtp7206
tp7207
tp7208
sS'DAQmxResetSampClkTimebaseDiv'
p7209
((lp7210
S'int32'
p7211
ag34
a((S'taskHandle'
p7212
(lp7213
S'TaskHandle'
p7214
aNtp7215
tp7216
tp7217
sS'DAQmxResetAIExcitSrc'
p7218
((lp7219
S'int32'
p7220
ag34
a((S'taskHandle'
p7221
(lp7222
S'TaskHandle'
p7223
aNtp7224
(S'channel'
p7225
(lp7226
S'char'
p7227
a(lp7228
I-1
aaNtp7229
tp7230
tp7231
sS'DAQmxResetAnlgWinRefTrigWhen'
p7232
((lp7233
S'int32'
p7234
ag34
a((S'taskHandle'
p7235
(lp7236
S'TaskHandle'
p7237
aNtp7238
tp7239
tp7240
sS'DAQmxResetCICountEdgesCountDirDigFltrTimebaseSrc'
p7241
((lp7242
S'int32'
p7243
ag34
a((S'taskHandle'
p7244
(lp7245
S'TaskHandle'
p7246
aNtp7247
(S'channel'
p7248
(lp7249
S'char'
p7250
a(lp7251
I-1
aaNtp7252
tp7253
tp7254
sS'DAQmxSetAIChanCalVerifAcqVals'
p7255
((lp7256
S'int32'
p7257
ag34
a((S'taskHandle'
p7258
(lp7259
S'TaskHandle'
p7260
aNtp7261
(S'channel'
p7262
(lp7263
S'char'
p7264
a(lp7265
I-1
aaNtp7266
(S'data'
p7267
(lp7268
S'float64'
p7269
ag42
aNtp7270
(S'arraySizeInSamples'
p7271
(lp7272
S'uInt32'
p7273
aNtp7274
tp7275
tp7276
sS'DAQmxGetDIDataXferReqCond'
p7277
((lp7278
S'int32'
p7279
ag34
a((S'taskHandle'
p7280
(lp7281
S'TaskHandle'
p7282
aNtp7283
(S'channel'
p7284
(lp7285
S'char'
p7286
a(lp7287
I-1
aaNtp7288
(S'data'
p7289
(lp7290
S'int32'
p7291
ag42
aNtp7292
tp7293
tp7294
sS'DAQmxSwitchSetTopologyAndReset'
p7295
((lp7296
S'int32'
p7297
ag34
a((S'deviceName'
p7298
(lp7299
S'char'
p7300
a(lp7301
I-1
aaNtp7302
(S'newTopology'
p7303
(lp7304
S'char'
p7305
a(lp7306
I-1
aaNtp7307
tp7308
tp7309
sS'DAQmxGetAOCustomScaleName'
p7310
((lp7311
S'int32'
p7312
ag34
a((S'taskHandle'
p7313
(lp7314
S'TaskHandle'
p7315
aNtp7316
(S'channel'
p7317
(lp7318
S'char'
p7319
a(lp7320
I-1
aaNtp7321
(S'data'
p7322
(lp7323
S'char'
p7324
ag42
aNtp7325
(S'bufferSize'
p7326
(lp7327
S'uInt32'
p7328
aNtp7329
tp7330
tp7331
sS'DAQmxGetSwitchDevSettlingTime'
p7332
((lp7333
S'int32'
p7334
ag34
a((S'deviceName'
p7335
(lp7336
S'char'
p7337
a(lp7338
I-1
aaNtp7339
(S'data'
p7340
(lp7341
S'float64'
p7342
ag42
aNtp7343
tp7344
tp7345
sS'DAQmxGetAIBridgeCfg'
p7346
((lp7347
S'int32'
p7348
ag34
a((S'taskHandle'
p7349
(lp7350
S'TaskHandle'
p7351
aNtp7352
(S'channel'
p7353
(lp7354
S'char'
p7355
a(lp7356
I-1
aaNtp7357
(S'data'
p7358
(lp7359
S'int32'
p7360
ag42
aNtp7361
tp7362
tp7363
sS'DAQmxGetCIPrescaler'
p7364
((lp7365
S'int32'
p7366
ag34
a((S'taskHandle'
p7367
(lp7368
S'TaskHandle'
p7369
aNtp7370
(S'channel'
p7371
(lp7372
S'char'
p7373
a(lp7374
I-1
aaNtp7375
(S'data'
p7376
(lp7377
S'uInt32'
p7378
ag42
aNtp7379
tp7380
tp7381
sS'DAQmxCreateDOChan'
p7382
((lp7383
S'int32'
p7384
ag34
a((S'taskHandle'
p7385
(lp7386
S'TaskHandle'
p7387
aNtp7388
(S'lines'
p7389
(lp7390
S'char'
p7391
a(lp7392
I-1
aaNtp7393
(S'nameToAssignToLines'
p7394
(lp7395
S'char'
p7396
a(lp7397
I-1
aaNtp7398
(S'lineGrouping'
p7399
(lp7400
S'int32'
p7401
aNtp7402
tp7403
tp7404
sS'DAQmxGetSwitchChanMaxDCSwitchCurrent'
p7405
((lp7406
S'int32'
p7407
ag34
a((S'switchChannelName'
p7408
(lp7409
S'char'
p7410
a(lp7411
I-1
aaNtp7412
(S'data'
p7413
(lp7414
S'float64'
p7415
ag42
aNtp7416
tp7417
tp7418
sS'DAQmxResetAILowpassSwitchCapOutClkDiv'
p7419
((lp7420
S'int32'
p7421
ag34
a((S'taskHandle'
p7422
(lp7423
S'TaskHandle'
p7424
aNtp7425
(S'channel'
p7426
(lp7427
S'char'
p7428
a(lp7429
I-1
aaNtp7430
tp7431
tp7432
sS'DAQmxSetCOPulseTicksInitialDelay'
p7433
((lp7434
S'int32'
p7435
ag34
a((S'taskHandle'
p7436
(lp7437
S'TaskHandle'
p7438
aNtp7439
(S'channel'
p7440
(lp7441
S'char'
p7442
a(lp7443
I-1
aaNtp7444
(S'data'
p7445
(lp7446
S'uInt32'
p7447
aNtp7448
tp7449
tp7450
sS'DAQmxGetDigEdgeArmStartTrigDigFltrEnable'
p7451
((lp7452
S'int32'
p7453
ag34
a((S'taskHandle'
p7454
(lp7455
S'TaskHandle'
p7456
aNtp7457
(S'data'
p7458
(lp7459
S'bool32'
p7460
ag42
aNtp7461
tp7462
tp7463
sS'DAQmxResetCOPulseLowTime'
p7464
((lp7465
S'int32'
p7466
ag34
a((S'taskHandle'
p7467
(lp7468
S'TaskHandle'
p7469
aNtp7470
(S'channel'
p7471
(lp7472
S'char'
p7473
a(lp7474
I-1
aaNtp7475
tp7476
tp7477
sS'DAQmxResetCOPulseHighTime'
p7478
((lp7479
S'int32'
p7480
ag34
a((S'taskHandle'
p7481
(lp7482
S'TaskHandle'
p7483
aNtp7484
(S'channel'
p7485
(lp7486
S'char'
p7487
a(lp7488
I-1
aaNtp7489
tp7490
tp7491
sS'DAQmxGetOnDemandSimultaneousAOEnable'
p7492
((lp7493
S'int32'
p7494
ag34
a((S'taskHandle'
p7495
(lp7496
S'TaskHandle'
p7497
aNtp7498
(S'data'
p7499
(lp7500
S'bool32'
p7501
ag42
aNtp7502
tp7503
tp7504
sS'DAQmxSetScalePreScaledUnits'
p7505
((lp7506
S'int32'
p7507
ag34
a((S'scaleName'
p7508
(lp7509
S'char'
p7510
a(lp7511
I-1
aaNtp7512
(S'data'
p7513
(lp7514
S'int32'
p7515
aNtp7516
tp7517
tp7518
sS'DAQmxSetAnlgWinPauseTrigTop'
p7519
((lp7520
S'int32'
p7521
ag34
a((S'taskHandle'
p7522
(lp7523
S'TaskHandle'
p7524
aNtp7525
(S'data'
p7526
(lp7527
S'float64'
p7528
aNtp7529
tp7530
tp7531
sS'DAQmxGetAOMax'
p7532
((lp7533
S'int32'
p7534
ag34
a((S'taskHandle'
p7535
(lp7536
S'TaskHandle'
p7537
aNtp7538
(S'channel'
p7539
(lp7540
S'char'
p7541
a(lp7542
I-1
aaNtp7543
(S'data'
p7544
(lp7545
S'float64'
p7546
ag42
aNtp7547
tp7548
tp7549
sS'DAQmxDisableAdvTrig'
p7550
((lp7551
S'int32'
p7552
ag34
a((S'taskHandle'
p7553
(lp7554
S'TaskHandle'
p7555
aNtp7556
tp7557
tp7558
sS'DAQmxSetDigEdgeStartTrigDigFltrTimebaseSrc'
p7559
((lp7560
S'int32'
p7561
ag34
a((S'taskHandle'
p7562
(lp7563
S'TaskHandle'
p7564
aNtp7565
(S'data'
p7566
(lp7567
S'char'
p7568
ag42
aNtp7569
tp7570
tp7571
sS'DAQmxSetCICountEdgesActiveEdge'
p7572
((lp7573
S'int32'
p7574
ag34
a((S'taskHandle'
p7575
(lp7576
S'TaskHandle'
p7577
aNtp7578
(S'channel'
p7579
(lp7580
S'char'
p7581
a(lp7582
I-1
aaNtp7583
(S'data'
p7584
(lp7585
S'int32'
p7586
aNtp7587
tp7588
tp7589
sS'DAQmxGetAIRawSampJustification'
p7590
((lp7591
S'int32'
p7592
ag34
a((S'taskHandle'
p7593
(lp7594
S'TaskHandle'
p7595
aNtp7596
(S'channel'
p7597
(lp7598
S'char'
p7599
a(lp7600
I-1
aaNtp7601
(S'data'
p7602
(lp7603
S'int32'
p7604
ag42
aNtp7605
tp7606
tp7607
sS'DAQmxGetAODACOffsetSrc'
p7608
((lp7609
S'int32'
p7610
ag34
a((S'taskHandle'
p7611
(lp7612
S'TaskHandle'
p7613
aNtp7614
(S'channel'
p7615
(lp7616
S'char'
p7617
a(lp7618
I-1
aaNtp7619
(S'data'
p7620
(lp7621
S'int32'
p7622
ag42
aNtp7623
tp7624
tp7625
sS'DAQmxSetAICoupling'
p7626
((lp7627
S'int32'
p7628
ag34
a((S'taskHandle'
p7629
(lp7630
S'TaskHandle'
p7631
aNtp7632
(S'channel'
p7633
(lp7634
S'char'
p7635
a(lp7636
I-1
aaNtp7637
(S'data'
p7638
(lp7639
S'int32'
p7640
aNtp7641
tp7642
tp7643
sS'DAQmxResetCIPulseWidthTerm'
p7644
((lp7645
S'int32'
p7646
ag34
a((S'taskHandle'
p7647
(lp7648
S'TaskHandle'
p7649
aNtp7650
(S'channel'
p7651
(lp7652
S'char'
p7653
a(lp7654
I-1
aaNtp7655
tp7656
tp7657
sS'DAQmxResetExportedAdvCmpltEventPulsePolarity'
p7658
((lp7659
S'int32'
p7660
ag34
a((S'taskHandle'
p7661
(lp7662
S'TaskHandle'
p7663
aNtp7664
tp7665
tp7666
sS'DAQmxResetAODACRefSrc'
p7667
((lp7668
S'int32'
p7669
ag34
a((S'taskHandle'
p7670
(lp7671
S'TaskHandle'
p7672
aNtp7673
(S'channel'
p7674
(lp7675
S'char'
p7676
a(lp7677
I-1
aaNtp7678
tp7679
tp7680
sS'DAQmxResetExportedSampClkPulsePolarity'
p7681
((lp7682
S'int32'
p7683
ag34
a((S'taskHandle'
p7684
(lp7685
S'TaskHandle'
p7686
aNtp7687
tp7688
tp7689
sS'DAQmxResetExportedSampClkTimebaseOutputTerm'
p7690
((lp7691
S'int32'
p7692
ag34
a((S'taskHandle'
p7693
(lp7694
S'TaskHandle'
p7695
aNtp7696
tp7697
tp7698
sS'DAQmxResetAIChanCalVerifRefVals'
p7699
((lp7700
S'int32'
p7701
ag34
a((S'taskHandle'
p7702
(lp7703
S'TaskHandle'
p7704
aNtp7705
(S'channel'
p7706
(lp7707
S'char'
p7708
a(lp7709
I-1
aaNtp7710
tp7711
tp7712
sS'DAQmxSetReadChannelsToRead'
p7713
((lp7714
S'int32'
p7715
ag34
a((S'taskHandle'
p7716
(lp7717
S'TaskHandle'
p7718
aNtp7719
(S'data'
p7720
(lp7721
S'char'
p7722
ag42
aNtp7723
tp7724
tp7725
sS'DAQmxResetDigLvlPauseTrigDigFltrTimebaseRate'
p7726
((lp7727
S'int32'
p7728
ag34
a((S'taskHandle'
p7729
(lp7730
S'TaskHandle'
p7731
aNtp7732
tp7733
tp7734
sS'DAQmxSetAIExcitSrc'
p7735
((lp7736
S'int32'
p7737
ag34
a((S'taskHandle'
p7738
(lp7739
S'TaskHandle'
p7740
aNtp7741
(S'channel'
p7742
(lp7743
S'char'
p7744
a(lp7745
I-1
aaNtp7746
(S'data'
p7747
(lp7748
S'int32'
p7749
aNtp7750
tp7751
tp7752
sS'DAQmxWaitForNextSampleClock'
p7753
((lp7754
S'int32'
p7755
ag34
a((S'taskHandle'
p7756
(lp7757
S'TaskHandle'
p7758
aNtp7759
(S'timeout'
p7760
(lp7761
S'float64'
p7762
aNtp7763
(S'isLate'
p7764
(lp7765
S'bool32'
p7766
ag42
aNtp7767
tp7768
tp7769
sS'DAQmxGetSwitchChanImpedance'
p7770
((lp7771
S'int32'
p7772
ag34
a((S'switchChannelName'
p7773
(lp7774
S'char'
p7775
a(lp7776
I-1
aaNtp7777
(S'data'
p7778
(lp7779
S'float64'
p7780
ag42
aNtp7781
tp7782
tp7783
sS'DAQmxGetCIPeriodMeasMeth'
p7784
((lp7785
S'int32'
p7786
ag34
a((S'taskHandle'
p7787
(lp7788
S'TaskHandle'
p7789
aNtp7790
(S'channel'
p7791
(lp7792
S'char'
p7793
a(lp7794
I-1
aaNtp7795
(S'data'
p7796
(lp7797
S'int32'
p7798
ag42
aNtp7799
tp7800
tp7801
sS'DAQmxResetCICtrTimebaseActiveEdge'
p7802
((lp7803
S'int32'
p7804
ag34
a((S'taskHandle'
p7805
(lp7806
S'TaskHandle'
p7807
aNtp7808
(S'channel'
p7809
(lp7810
S'char'
p7811
a(lp7812
I-1
aaNtp7813
tp7814
tp7815
sS'DAQmxSetAnlgWinRefTrigBtm'
p7816
((lp7817
S'int32'
p7818
ag34
a((S'taskHandle'
p7819
(lp7820
S'TaskHandle'
p7821
aNtp7822
(S'data'
p7823
(lp7824
S'float64'
p7825
aNtp7826
tp7827
tp7828
sS'DAQmxSetDigEdgeAdvTrigEdge'
p7829
((lp7830
S'int32'
p7831
ag34
a((S'taskHandle'
p7832
(lp7833
S'TaskHandle'
p7834
aNtp7835
(S'data'
p7836
(lp7837
S'int32'
p7838
aNtp7839
tp7840
tp7841
sS'DAQmxCfgImplicitTiming'
p7842
((lp7843
S'int32'
p7844
ag34
a((S'taskHandle'
p7845
(lp7846
S'TaskHandle'
p7847
aNtp7848
(S'sampleMode'
p7849
(lp7850
S'int32'
p7851
aNtp7852
(S'sampsPerChan'
p7853
(lp7854
S'uInt64'
p7855
aNtp7856
tp7857
tp7858
sS'DAQmxGetExportedHshkEventInterlockedAssertOnStart'
p7859
((lp7860
S'int32'
p7861
ag34
a((S'taskHandle'
p7862
(lp7863
S'TaskHandle'
p7864
aNtp7865
(S'data'
p7866
(lp7867
S'bool32'
p7868
ag42
aNtp7869
tp7870
tp7871
sS'DAQmxSetCOCtrTimebaseDigFltrTimebaseRate'
p7872
((lp7873
S'int32'
p7874
ag34
a((S'taskHandle'
p7875
(lp7876
S'TaskHandle'
p7877
aNtp7878
(S'channel'
p7879
(lp7880
S'char'
p7881
a(lp7882
I-1
aaNtp7883
(S'data'
p7884
(lp7885
S'float64'
p7886
aNtp7887
tp7888
tp7889
sS'DAQmxSetCIPeriodMeasTime'
p7890
((lp7891
S'int32'
p7892
ag34
a((S'taskHandle'
p7893
(lp7894
S'TaskHandle'
p7895
aNtp7896
(S'channel'
p7897
(lp7898
S'char'
p7899
a(lp7900
I-1
aaNtp7901
(S'data'
p7902
(lp7903
S'float64'
p7904
aNtp7905
tp7906
tp7907
sS'DAQmxSetAIRngLow'
p7908
((lp7909
S'int32'
p7910
ag34
a((S'taskHandle'
p7911
(lp7912
S'TaskHandle'
p7913
aNtp7914
(S'channel'
p7915
(lp7916
S'char'
p7917
a(lp7918
I-1
aaNtp7919
(S'data'
p7920
(lp7921
S'float64'
p7922
aNtp7923
tp7924
tp7925
sS'DAQmxResetRefClkSrc'
p7926
((lp7927
S'int32'
p7928
ag34
a((S'taskHandle'
p7929
(lp7930
S'TaskHandle'
p7931
aNtp7932
tp7933
tp7934
sS'DAQmxGetAODACRefSrc'
p7935
((lp7936
S'int32'
p7937
ag34
a((S'taskHandle'
p7938
(lp7939
S'TaskHandle'
p7940
aNtp7941
(S'channel'
p7942
(lp7943
S'char'
p7944
a(lp7945
I-1
aaNtp7946
(S'data'
p7947
(lp7948
S'int32'
p7949
ag42
aNtp7950
tp7951
tp7952
sS'DAQmxSetAnlgEdgeRefTrigLvl'
p7953
((lp7954
S'int32'
p7955
ag34
a((S'taskHandle'
p7956
(lp7957
S'TaskHandle'
p7958
aNtp7959
(S'data'
p7960
(lp7961
S'float64'
p7962
aNtp7963
tp7964
tp7965
sS'DAQmxCreateAIVoltageChan'
p7966
((lp7967
S'int32'
p7968
ag34
a((S'taskHandle'
p7969
(lp7970
S'TaskHandle'
p7971
aNtp7972
(S'physicalChannel'
p7973
(lp7974
S'char'
p7975
a(lp7976
I-1
aaNtp7977
(S'nameToAssignToChannel'
p7978
(lp7979
S'char'
p7980
a(lp7981
I-1
aaNtp7982
(S'terminalConfig'
p7983
(lp7984
S'int32'
p7985
aNtp7986
(S'minVal'
p7987
(lp7988
S'float64'
p7989
aNtp7990
(S'maxVal'
p7991
(lp7992
S'float64'
p7993
aNtp7994
(S'units'
p7995
(lp7996
S'int32'
p7997
aNtp7998
(S'customScaleName'
p7999
(lp8000
S'char'
p8001
a(lp8002
I-1
aaNtp8003
tp8004
tp8005
sS'DAQmxGetCITimestampUnits'
p8006
((lp8007
S'int32'
p8008
ag34
a((S'taskHandle'
p8009
(lp8010
S'TaskHandle'
p8011
aNtp8012
(S'channel'
p8013
(lp8014
S'char'
p8015
a(lp8016
I-1
aaNtp8017
(S'data'
p8018
(lp8019
S'int32'
p8020
ag42
aNtp8021
tp8022
tp8023
sS'DAQmxGetAILowpassSwitchCapExtClkFreq'
p8024
((lp8025
S'int32'
p8026
ag34
a((S'taskHandle'
p8027
(lp8028
S'TaskHandle'
p8029
aNtp8030
(S'channel'
p8031
(lp8032
S'char'
p8033
a(lp8034
I-1
aaNtp8035
(S'data'
p8036
(lp8037
S'float64'
p8038
ag42
aNtp8039
tp8040
tp8041
sS'DAQmxGetChangeDetectDIFallingEdgePhysicalChans'
p8042
((lp8043
S'int32'
p8044
ag34
a((S'taskHandle'
p8045
(lp8046
S'TaskHandle'
p8047
aNtp8048
(S'data'
p8049
(lp8050
S'char'
p8051
ag42
aNtp8052
(S'bufferSize'
p8053
(lp8054
S'uInt32'
p8055
aNtp8056
tp8057
tp8058
sS'DAQmxGetDigEdgeArmStartTrigDigFltrTimebaseRate'
p8059
((lp8060
S'int32'
p8061
ag34
a((S'taskHandle'
p8062
(lp8063
S'TaskHandle'
p8064
aNtp8065
(S'data'
p8066
(lp8067
S'float64'
p8068
ag42
aNtp8069
tp8070
tp8071
sS'DAQmxGetDevPCIBusNum'
p8072
((lp8073
S'int32'
p8074
ag34
a((S'device'
p8075
(lp8076
S'char'
p8077
a(lp8078
I-1
aaNtp8079
(S'data'
p8080
(lp8081
S'uInt32'
p8082
ag42
aNtp8083
tp8084
tp8085
sS'DAQmxSetCIPeriodStartingEdge'
p8086
((lp8087
S'int32'
p8088
ag34
a((S'taskHandle'
p8089
(lp8090
S'TaskHandle'
p8091
aNtp8092
(S'channel'
p8093
(lp8094
S'char'
p8095
a(lp8096
I-1
aaNtp8097
(S'data'
p8098
(lp8099
S'int32'
p8100
aNtp8101
tp8102
tp8103
sS'DAQmxSetExportedChangeDetectEventPulsePolarity'
p8104
((lp8105
S'int32'
p8106
ag34
a((S'taskHandle'
p8107
(lp8108
S'TaskHandle'
p8109
aNtp8110
(S'data'
p8111
(lp8112
S'int32'
p8113
aNtp8114
tp8115
tp8116
sS'DAQmxGetDevProductNum'
p8117
((lp8118
S'int32'
p8119
ag34
a((S'device'
p8120
(lp8121
S'char'
p8122
a(lp8123
I-1
aaNtp8124
(S'data'
p8125
(lp8126
S'uInt32'
p8127
ag42
aNtp8128
tp8129
tp8130
sS'DAQmxResetCITimestampUnits'
p8131
((lp8132
S'int32'
p8133
ag34
a((S'taskHandle'
p8134
(lp8135
S'TaskHandle'
p8136
aNtp8137
(S'channel'
p8138
(lp8139
S'char'
p8140
a(lp8141
I-1
aaNtp8142
tp8143
tp8144
sS'DAQmxGetDevCIPhysicalChans'
p8145
((lp8146
S'int32'
p8147
ag34
a((S'device'
p8148
(lp8149
S'char'
p8150
a(lp8151
I-1
aaNtp8152
(S'data'
p8153
(lp8154
S'char'
p8155
ag42
aNtp8156
(S'bufferSize'
p8157
(lp8158
S'uInt32'
p8159
aNtp8160
tp8161
tp8162
sS'DAQmxGetCICountEdgesDigFltrTimebaseSrc'
p8163
((lp8164
S'int32'
p8165
ag34
a((S'taskHandle'
p8166
(lp8167
S'TaskHandle'
p8168
aNtp8169
(S'channel'
p8170
(lp8171
S'char'
p8172
a(lp8173
I-1
aaNtp8174
(S'data'
p8175
(lp8176
S'char'
p8177
ag42
aNtp8178
(S'bufferSize'
p8179
(lp8180
S'uInt32'
p8181
aNtp8182
tp8183
tp8184
sS'DAQmxGetExportedAdvCmpltEventPulseWidth'
p8185
((lp8186
S'int32'
p8187
ag34
a((S'taskHandle'
p8188
(lp8189
S'TaskHandle'
p8190
aNtp8191
(S'data'
p8192
(lp8193
S'float64'
p8194
ag42
aNtp8195
tp8196
tp8197
sS'DAQmxGetAIDitherEnable'
p8198
((lp8199
S'int32'
p8200
ag34
a((S'taskHandle'
p8201
(lp8202
S'TaskHandle'
p8203
aNtp8204
(S'channel'
p8205
(lp8206
S'char'
p8207
a(lp8208
I-1
aaNtp8209
(S'data'
p8210
(lp8211
S'bool32'
p8212
ag42
aNtp8213
tp8214
tp8215
sS'DAQmxResetCIPeriodDigSyncEnable'
p8216
((lp8217
S'int32'
p8218
ag34
a((S'taskHandle'
p8219
(lp8220
S'TaskHandle'
p8221
aNtp8222
(S'channel'
p8223
(lp8224
S'char'
p8225
a(lp8226
I-1
aaNtp8227
tp8228
tp8229
sS'DAQmxSetCOCtrTimebaseDigFltrEnable'
p8230
((lp8231
S'int32'
p8232
ag34
a((S'taskHandle'
p8233
(lp8234
S'TaskHandle'
p8235
aNtp8236
(S'channel'
p8237
(lp8238
S'char'
p8239
a(lp8240
I-1
aaNtp8241
(S'data'
p8242
(lp8243
S'bool32'
p8244
aNtp8245
tp8246
tp8247
sS'DAQmxSetAIFreqUnits'
p8248
((lp8249
S'int32'
p8250
ag34
a((S'taskHandle'
p8251
(lp8252
S'TaskHandle'
p8253
aNtp8254
(S'channel'
p8255
(lp8256
S'char'
p8257
a(lp8258
I-1
aaNtp8259
(S'data'
p8260
(lp8261
S'int32'
p8262
aNtp8263
tp8264
tp8265
sS'DAQmxSetAIStrainGageCfg'
p8266
((lp8267
S'int32'
p8268
ag34
a((S'taskHandle'
p8269
(lp8270
S'TaskHandle'
p8271
aNtp8272
(S'channel'
p8273
(lp8274
S'char'
p8275
a(lp8276
I-1
aaNtp8277
(S'data'
p8278
(lp8279
S'int32'
p8280
aNtp8281
tp8282
tp8283
sS'DAQmxResetWatchdogTimeout'
p8284
((lp8285
S'int32'
p8286
ag34
a((S'taskHandle'
p8287
(lp8288
S'TaskHandle'
p8289
aNtp8290
tp8291
tp8292
sS'DAQmxResetAIDitherEnable'
p8293
((lp8294
S'int32'
p8295
ag34
a((S'taskHandle'
p8296
(lp8297
S'TaskHandle'
p8298
aNtp8299
(S'channel'
p8300
(lp8301
S'char'
p8302
a(lp8303
I-1
aaNtp8304
tp8305
tp8306
sS'DAQmxGetAISampAndHoldEnable'
p8307
((lp8308
S'int32'
p8309
ag34
a((S'taskHandle'
p8310
(lp8311
S'TaskHandle'
p8312
aNtp8313
(S'channel'
p8314
(lp8315
S'char'
p8316
a(lp8317
I-1
aaNtp8318
(S'data'
p8319
(lp8320
S'bool32'
p8321
ag42
aNtp8322
tp8323
tp8324
sS'DAQmxGetDigEdgeStartTrigSrc'
p8325
((lp8326
S'int32'
p8327
ag34
a((S'taskHandle'
p8328
(lp8329
S'TaskHandle'
p8330
aNtp8331
(S'data'
p8332
(lp8333
S'char'
p8334
ag42
aNtp8335
(S'bufferSize'
p8336
(lp8337
S'uInt32'
p8338
aNtp8339
tp8340
tp8341
sS'DAQmxSetCOPulseHighTicks'
p8342
((lp8343
S'int32'
p8344
ag34
a((S'taskHandle'
p8345
(lp8346
S'TaskHandle'
p8347
aNtp8348
(S'channel'
p8349
(lp8350
S'char'
p8351
a(lp8352
I-1
aaNtp8353
(S'data'
p8354
(lp8355
S'uInt32'
p8356
aNtp8357
tp8358
tp8359
sS'DAQmxWriteBinaryU16'
p8360
((lp8361
S'int32'
p8362
ag34
a((S'taskHandle'
p8363
(lp8364
S'TaskHandle'
p8365
aNtp8366
(S'numSampsPerChan'
p8367
(lp8368
S'int32'
p8369
aNtp8370
(S'autoStart'
p8371
(lp8372
S'bool32'
p8373
aNtp8374
(S'timeout'
p8375
(lp8376
S'float64'
p8377
aNtp8378
(S'dataLayout'
p8379
(lp8380
S'bool32'
p8381
aNtp8382
(S'writeArray'
p8383
(lp8384
S'uInt16'
p8385
a(lp8386
I-1
aaNtp8387
(S'sampsPerChanWritten'
p8388
(lp8389
S'int32'
p8390
ag42
aNtp8391
(S'reserved'
p8392
(lp8393
S'bool32'
p8394
ag42
aNtp8395
tp8396
tp8397
sS'DAQmxSetAIChanCalPolyForwardCoeff'
p8398
((lp8399
S'int32'
p8400
ag34
a((S'taskHandle'
p8401
(lp8402
S'TaskHandle'
p8403
aNtp8404
(S'channel'
p8405
(lp8406
S'char'
p8407
a(lp8408
I-1
aaNtp8409
(S'data'
p8410
(lp8411
S'float64'
p8412
ag42
aNtp8413
(S'arraySizeInSamples'
p8414
(lp8415
S'uInt32'
p8416
aNtp8417
tp8418
tp8419
sS'DAQmxGetAIConvActiveEdge'
p8420
((lp8421
S'int32'
p8422
ag34
a((S'taskHandle'
p8423
(lp8424
S'TaskHandle'
p8425
aNtp8426
(S'data'
p8427
(lp8428
S'int32'
p8429
ag42
aNtp8430
tp8431
tp8432
sS'DAQmxSetCICountEdgesDigSyncEnable'
p8433
((lp8434
S'int32'
p8435
ag34
a((S'taskHandle'
p8436
(lp8437
S'TaskHandle'
p8438
aNtp8439
(S'channel'
p8440
(lp8441
S'char'
p8442
a(lp8443
I-1
aaNtp8444
(S'data'
p8445
(lp8446
S'bool32'
p8447
aNtp8448
tp8449
tp8450
sS'DAQmxCfgAnlgEdgeStartTrig'
p8451
((lp8452
S'int32'
p8453
ag34
a((S'taskHandle'
p8454
(lp8455
S'TaskHandle'
p8456
aNtp8457
(S'triggerSource'
p8458
(lp8459
S'char'
p8460
a(lp8461
I-1
aaNtp8462
(S'triggerSlope'
p8463
(lp8464
S'int32'
p8465
aNtp8466
(S'triggerLevel'
p8467
(lp8468
S'float64'
p8469
aNtp8470
tp8471
tp8472
sS'DAQmxSetCalUserDefinedInfo'
p8473
((lp8474
S'int32'
p8475
ag34
a((S'deviceName'
p8476
(lp8477
S'char'
p8478
a(lp8479
I-1
aaNtp8480
(S'data'
p8481
(lp8482
S'char'
p8483
ag42
aNtp8484
tp8485
tp8486
sS'DAQmxGetReadDigitalLinesBytesPerChan'
p8487
((lp8488
S'int32'
p8489
ag34
a((S'taskHandle'
p8490
(lp8491
S'TaskHandle'
p8492
aNtp8493
(S'data'
p8494
(lp8495
S'uInt32'
p8496
ag42
aNtp8497
tp8498
tp8499
sS'DAQmxResetAIConvTimebaseDiv'
p8500
((lp8501
S'int32'
p8502
ag34
a((S'taskHandle'
p8503
(lp8504
S'TaskHandle'
p8505
aNtp8506
tp8507
tp8508
sS'DAQmxGetPhysicalChanTEDSModelNum'
p8509
((lp8510
S'int32'
p8511
ag34
a((S'physicalChannel'
p8512
(lp8513
S'char'
p8514
a(lp8515
I-1
aaNtp8516
(S'data'
p8517
(lp8518
S'uInt32'
p8519
ag42
aNtp8520
tp8521
tp8522
sS'DAQmxGetSampClkDigSyncEnable'
p8523
((lp8524
S'int32'
p8525
ag34
a((S'taskHandle'
p8526
(lp8527
S'TaskHandle'
p8528
aNtp8529
(S'data'
p8530
(lp8531
S'bool32'
p8532
ag42
aNtp8533
tp8534
tp8535
sS'DAQmxGetSwitchChanMaxACSwitchPwr'
p8536
((lp8537
S'int32'
p8538
ag34
a((S'switchChannelName'
p8539
(lp8540
S'char'
p8541
a(lp8542
I-1
aaNtp8543
(S'data'
p8544
(lp8545
S'float64'
p8546
ag42
aNtp8547
tp8548
tp8549
sS'DAQmxSetAIAccelSensitivityUnits'
p8550
((lp8551
S'int32'
p8552
ag34
a((S'taskHandle'
p8553
(lp8554
S'TaskHandle'
p8555
aNtp8556
(S'channel'
p8557
(lp8558
S'char'
p8559
a(lp8560
I-1
aaNtp8561
(S'data'
p8562
(lp8563
S'int32'
p8564
aNtp8565
tp8566
tp8567
sS'DAQmxResetAnlgWinPauseTrigBtm'
p8568
((lp8569
S'int32'
p8570
ag34
a((S'taskHandle'
p8571
(lp8572
S'TaskHandle'
p8573
aNtp8574
tp8575
tp8576
sS'DAQmxResetWriteRelativeTo'
p8577
((lp8578
S'int32'
p8579
ag34
a((S'taskHandle'
p8580
(lp8581
S'TaskHandle'
p8582
aNtp8583
tp8584
tp8585
sS'DAQmxResetAIExcitActualVal'
p8586
((lp8587
S'int32'
p8588
ag34
a((S'taskHandle'
p8589
(lp8590
S'TaskHandle'
p8591
aNtp8592
(S'channel'
p8593
(lp8594
S'char'
p8595
a(lp8596
I-1
aaNtp8597
tp8598
tp8599
sS'DAQmxSetSampClkTimebaseSrc'
p8600
((lp8601
S'int32'
p8602
ag34
a((S'taskHandle'
p8603
(lp8604
S'TaskHandle'
p8605
aNtp8606
(S'data'
p8607
(lp8608
S'char'
p8609
ag42
aNtp8610
tp8611
tp8612
sS'DAQmxResetChangeDetectDIRisingEdgePhysicalChans'
p8613
((lp8614
S'int32'
p8615
ag34
a((S'taskHandle'
p8616
(lp8617
S'TaskHandle'
p8618
aNtp8619
tp8620
tp8621
sS'DAQmxGetExportedSampClkPulsePolarity'
p8622
((lp8623
S'int32'
p8624
ag34
a((S'taskHandle'
p8625
(lp8626
S'TaskHandle'
p8627
aNtp8628
(S'data'
p8629
(lp8630
S'int32'
p8631
ag42
aNtp8632
tp8633
tp8634
sS'DAQmxGetSwitchChanMaxDCSwitchPwr'
p8635
((lp8636
S'int32'
p8637
ag34
a((S'switchChannelName'
p8638
(lp8639
S'char'
p8640
a(lp8641
I-1
aaNtp8642
(S'data'
p8643
(lp8644
S'float64'
p8645
ag42
aNtp8646
tp8647
tp8648
sS'DAQmxGetDigEdgeStartTrigEdge'
p8649
((lp8650
S'int32'
p8651
ag34
a((S'taskHandle'
p8652
(lp8653
S'TaskHandle'
p8654
aNtp8655
(S'data'
p8656
(lp8657
S'int32'
p8658
ag42
aNtp8659
tp8660
tp8661
sS'DAQmxIsReadOrWriteLate'
p8662
((lp8663
S'bool32'
p8664
ag34
a((S'errorCode'
p8665
(lp8666
S'int32'
p8667
aNtp8668
tp8669
tp8670
sS'DAQmxGetDigEdgeArmStartTrigDigSyncEnable'
p8671
((lp8672
S'int32'
p8673
ag34
a((S'taskHandle'
p8674
(lp8675
S'TaskHandle'
p8676
aNtp8677
(S'data'
p8678
(lp8679
S'bool32'
p8680
ag42
aNtp8681
tp8682
tp8683
sS'DAQmxSetAnlgWinRefTrigSrc'
p8684
((lp8685
S'int32'
p8686
ag34
a((S'taskHandle'
p8687
(lp8688
S'TaskHandle'
p8689
aNtp8690
(S'data'
p8691
(lp8692
S'char'
p8693
ag42
aNtp8694
tp8695
tp8696
sS'DAQmxGetExportedCtrOutEventPulsePolarity'
p8697
((lp8698
S'int32'
p8699
ag34
a((S'taskHandle'
p8700
(lp8701
S'TaskHandle'
p8702
aNtp8703
(S'data'
p8704
(lp8705
S'int32'
p8706
ag42
aNtp8707
tp8708
tp8709
sS'DAQmxSetCIFreqMeasMeth'
p8710
((lp8711
S'int32'
p8712
ag34
a((S'taskHandle'
p8713
(lp8714
S'TaskHandle'
p8715
aNtp8716
(S'channel'
p8717
(lp8718
S'char'
p8719
a(lp8720
I-1
aaNtp8721
(S'data'
p8722
(lp8723
S'int32'
p8724
aNtp8725
tp8726
tp8727
sS'DAQmxResetAIChanCalTablePreScaledVals'
p8728
((lp8729
S'int32'
p8730
ag34
a((S'taskHandle'
p8731
(lp8732
S'TaskHandle'
p8733
aNtp8734
(S'channel'
p8735
(lp8736
S'char'
p8737
a(lp8738
I-1
aaNtp8739
tp8740
tp8741
sS'DAQmxResetAIConvActiveEdge'
p8742
((lp8743
S'int32'
p8744
ag34
a((S'taskHandle'
p8745
(lp8746
S'TaskHandle'
p8747
aNtp8748
tp8749
tp8750
sS'DAQmxGetScaleLinYIntercept'
p8751
((lp8752
S'int32'
p8753
ag34
a((S'scaleName'
p8754
(lp8755
S'char'
p8756
a(lp8757
I-1
aaNtp8758
(S'data'
p8759
(lp8760
S'float64'
p8761
ag42
aNtp8762
tp8763
tp8764
sS'DAQmxAdjust1102Cal'
p8765
((lp8766
S'int32'
p8767
ag34
a((S'calHandle'
p8768
(lp8769
S'uInt32'
p8770
aNtp8771
(S'refVoltage'
p8772
(lp8773
S'float64'
p8774
aNtp8775
(S'measOutput'
p8776
(lp8777
S'float64'
p8778
aNtp8779
tp8780
tp8781
sS'DAQmxGetCICtrTimebaseActiveEdge'
p8782
((lp8783
S'int32'
p8784
ag34
a((S'taskHandle'
p8785
(lp8786
S'TaskHandle'
p8787
aNtp8788
(S'channel'
p8789
(lp8790
S'char'
p8791
a(lp8792
I-1
aaNtp8793
(S'data'
p8794
(lp8795
S'int32'
p8796
ag42
aNtp8797
tp8798
tp8799
sS'DAQmxResetCICtrTimebaseSrc'
p8800
((lp8801
S'int32'
p8802
ag34
a((S'taskHandle'
p8803
(lp8804
S'TaskHandle'
p8805
aNtp8806
(S'channel'
p8807
(lp8808
S'char'
p8809
a(lp8810
I-1
aaNtp8811
tp8812
tp8813
sS'DAQmxResetBufOutputOnbrdBufSize'
p8814
((lp8815
S'int32'
p8816
ag34
a((S'taskHandle'
p8817
(lp8818
S'TaskHandle'
p8819
aNtp8820
tp8821
tp8822
sS'DAQmxSetDelayFromSampClkDelayUnits'
p8823
((lp8824
S'int32'
p8825
ag34
a((S'taskHandle'
p8826
(lp8827
S'TaskHandle'
p8828
aNtp8829
(S'data'
p8830
(lp8831
S'int32'
p8832
aNtp8833
tp8834
tp8835
sS'DAQmxSetAIChanCalCalDate'
p8836
((lp8837
S'int32'
p8838
ag34
a((S'taskHandle'
p8839
(lp8840
S'TaskHandle'
p8841
aNtp8842
(S'channelName'
p8843
(lp8844
S'char'
p8845
a(lp8846
I-1
aaNtp8847
(S'year'
p8848
(lp8849
S'uInt32'
p8850
aNtp8851
(S'month'
p8852
(lp8853
S'uInt32'
p8854
aNtp8855
(S'day'
p8856
(lp8857
S'uInt32'
p8858
aNtp8859
(S'hour'
p8860
(lp8861
S'uInt32'
p8862
aNtp8863
(S'minute'
p8864
(lp8865
S'uInt32'
p8866
aNtp8867
tp8868
tp8869
sS'DAQmxSetScaleMapPreScaledMax'
p8870
((lp8871
S'int32'
p8872
ag34
a((S'scaleName'
p8873
(lp8874
S'char'
p8875
a(lp8876
I-1
aaNtp8877
(S'data'
p8878
(lp8879
S'float64'
p8880
aNtp8881
tp8882
tp8883
sS'DAQmxGetBufOutputOnbrdBufSize'
p8884
((lp8885
S'int32'
p8886
ag34
a((S'taskHandle'
p8887
(lp8888
S'TaskHandle'
p8889
aNtp8890
(S'data'
p8891
(lp8892
S'uInt32'
p8893
ag42
aNtp8894
tp8895
tp8896
sS'DAQmxSetDITristate'
p8897
((lp8898
S'int32'
p8899
ag34
a((S'taskHandle'
p8900
(lp8901
S'TaskHandle'
p8902
aNtp8903
(S'channel'
p8904
(lp8905
S'char'
p8906
a(lp8907
I-1
aaNtp8908
(S'data'
p8909
(lp8910
S'bool32'
p8911
aNtp8912
tp8913
tp8914
sS'DAQmxSetCIAngEncoderInitialAngle'
p8915
((lp8916
S'int32'
p8917
ag34
a((S'taskHandle'
p8918
(lp8919
S'TaskHandle'
p8920
aNtp8921
(S'channel'
p8922
(lp8923
S'char'
p8924
a(lp8925
I-1
aaNtp8926
(S'data'
p8927
(lp8928
S'float64'
p8929
aNtp8930
tp8931
tp8932
sS'DAQmxSetWriteRelativeTo'
p8933
((lp8934
S'int32'
p8935
ag34
a((S'taskHandle'
p8936
(lp8937
S'TaskHandle'
p8938
aNtp8939
(S'data'
p8940
(lp8941
S'int32'
p8942
aNtp8943
tp8944
tp8945
sS'DAQmxSetReadRelativeTo'
p8946
((lp8947
S'int32'
p8948
ag34
a((S'taskHandle'
p8949
(lp8950
S'TaskHandle'
p8951
aNtp8952
(S'data'
p8953
(lp8954
S'int32'
p8955
aNtp8956
tp8957
tp8958
sS'DAQmxGetAIRVDTSensitivity'
p8959
((lp8960
S'int32'
p8961
ag34
a((S'taskHandle'
p8962
(lp8963
S'TaskHandle'
p8964
aNtp8965
(S'channel'
p8966
(lp8967
S'char'
p8968
a(lp8969
I-1
aaNtp8970
(S'data'
p8971
(lp8972
S'float64'
p8973
ag42
aNtp8974
tp8975
tp8976
sS'DAQmxResetDigEdgeStartTrigDigSyncEnable'
p8977
((lp8978
S'int32'
p8979
ag34
a((S'taskHandle'
p8980
(lp8981
S'TaskHandle'
p8982
aNtp8983
tp8984
tp8985
sS'DAQmxGetDODataXferMech'
p8986
((lp8987
S'int32'
p8988
ag34
a((S'taskHandle'
p8989
(lp8990
S'TaskHandle'
p8991
aNtp8992
(S'channel'
p8993
(lp8994
S'char'
p8995
a(lp8996
I-1
aaNtp8997
(S'data'
p8998
(lp8999
S'int32'
p9000
ag42
aNtp9001
tp9002
tp9003
sS'DAQmxSetAIRTDR0'
p9004
((lp9005
S'int32'
p9006
ag34
a((S'taskHandle'
p9007
(lp9008
S'TaskHandle'
p9009
aNtp9010
(S'channel'
p9011
(lp9012
S'char'
p9013
a(lp9014
I-1
aaNtp9015
(S'data'
p9016
(lp9017
S'float64'
p9018
aNtp9019
tp9020
tp9021
sS'DAQmxResetAOUseOnlyOnBrdMem'
p9022
((lp9023
S'int32'
p9024
ag34
a((S'taskHandle'
p9025
(lp9026
S'TaskHandle'
p9027
aNtp9028
(S'channel'
p9029
(lp9030
S'char'
p9031
a(lp9032
I-1
aaNtp9033
tp9034
tp9035
sS'DAQmxGetCIEncoderAInputDigFltrTimebaseSrc'
p9036
((lp9037
S'int32'
p9038
ag34
a((S'taskHandle'
p9039
(lp9040
S'TaskHandle'
p9041
aNtp9042
(S'channel'
p9043
(lp9044
S'char'
p9045
a(lp9046
I-1
aaNtp9047
(S'data'
p9048
(lp9049
S'char'
p9050
ag42
aNtp9051
(S'bufferSize'
p9052
(lp9053
S'uInt32'
p9054
aNtp9055
tp9056
tp9057
sS'DAQmxGetDevDOPorts'
p9058
((lp9059
S'int32'
p9060
ag34
a((S'device'
p9061
(lp9062
S'char'
p9063
a(lp9064
I-1
aaNtp9065
(S'data'
p9066
(lp9067
S'char'
p9068
ag42
aNtp9069
(S'bufferSize'
p9070
(lp9071
S'uInt32'
p9072
aNtp9073
tp9074
tp9075
sS'DAQmxGetCIEncoderAInputDigSyncEnable'
p9076
((lp9077
S'int32'
p9078
ag34
a((S'taskHandle'
p9079
(lp9080
S'TaskHandle'
p9081
aNtp9082
(S'channel'
p9083
(lp9084
S'char'
p9085
a(lp9086
I-1
aaNtp9087
(S'data'
p9088
(lp9089
S'bool32'
p9090
ag42
aNtp9091
tp9092
tp9093
sS'DAQmxGetAICoupling'
p9094
((lp9095
S'int32'
p9096
ag34
a((S'taskHandle'
p9097
(lp9098
S'TaskHandle'
p9099
aNtp9100
(S'channel'
p9101
(lp9102
S'char'
p9103
a(lp9104
I-1
aaNtp9105
(S'data'
p9106
(lp9107
S'int32'
p9108
ag42
aNtp9109
tp9110
tp9111
sS'DAQmxSetExportedCtrOutEventOutputTerm'
p9112
((lp9113
S'int32'
p9114
ag34
a((S'taskHandle'
p9115
(lp9116
S'TaskHandle'
p9117
aNtp9118
(S'data'
p9119
(lp9120
S'char'
p9121
ag42
aNtp9122
tp9123
tp9124
sS'DAQmxSetScaleTablePreScaledVals'
p9125
((lp9126
S'int32'
p9127
ag34
a((S'scaleName'
p9128
(lp9129
S'char'
p9130
a(lp9131
I-1
aaNtp9132
(S'data'
p9133
(lp9134
S'float64'
p9135
ag42
aNtp9136
(S'arraySizeInSamples'
p9137
(lp9138
S'uInt32'
p9139
aNtp9140
tp9141
tp9142
sS'DAQmxResetAIDataXferMech'
p9143
((lp9144
S'int32'
p9145
ag34
a((S'taskHandle'
p9146
(lp9147
S'TaskHandle'
p9148
aNtp9149
(S'channel'
p9150
(lp9151
S'char'
p9152
a(lp9153
I-1
aaNtp9154
tp9155
tp9156
sS'DAQmxSetReadWaitMode'
p9157
((lp9158
S'int32'
p9159
ag34
a((S'taskHandle'
p9160
(lp9161
S'TaskHandle'
p9162
aNtp9163
(S'data'
p9164
(lp9165
S'int32'
p9166
aNtp9167
tp9168
tp9169
sS'DAQmxSetExportedSampClkPulsePolarity'
p9170
((lp9171
S'int32'
p9172
ag34
a((S'taskHandle'
p9173
(lp9174
S'TaskHandle'
p9175
aNtp9176
(S'data'
p9177
(lp9178
S'int32'
p9179
aNtp9180
tp9181
tp9182
sS'DAQmxGetCITwoEdgeSepSecondDigSyncEnable'
p9183
((lp9184
S'int32'
p9185
ag34
a((S'taskHandle'
p9186
(lp9187
S'TaskHandle'
p9188
aNtp9189
(S'channel'
p9190
(lp9191
S'char'
p9192
a(lp9193
I-1
aaNtp9194
(S'data'
p9195
(lp9196
S'bool32'
p9197
ag42
aNtp9198
tp9199
tp9200
sS'DAQmxResetCIAngEncoderInitialAngle'
p9201
((lp9202
S'int32'
p9203
ag34
a((S'taskHandle'
p9204
(lp9205
S'TaskHandle'
p9206
aNtp9207
(S'channel'
p9208
(lp9209
S'char'
p9210
a(lp9211
I-1
aaNtp9212
tp9213
tp9214
sS'DAQmxSetCIPulseWidthDigFltrTimebaseSrc'
p9215
((lp9216
S'int32'
p9217
ag34
a((S'taskHandle'
p9218
(lp9219
S'TaskHandle'
p9220
aNtp9221
(S'channel'
p9222
(lp9223
S'char'
p9224
a(lp9225
I-1
aaNtp9226
(S'data'
p9227
(lp9228
S'char'
p9229
ag42
aNtp9230
tp9231
tp9232
sS'DAQmxResetStartTrigType'
p9233
((lp9234
S'int32'
p9235
ag34
a((S'taskHandle'
p9236
(lp9237
S'TaskHandle'
p9238
aNtp9239
tp9240
tp9241
sS'DAQmxResetAODACRefConnToGnd'
p9242
((lp9243
S'int32'
p9244
ag34
a((S'taskHandle'
p9245
(lp9246
S'TaskHandle'
p9247
aNtp9248
(S'channel'
p9249
(lp9250
S'char'
p9251
a(lp9252
I-1
aaNtp9253
tp9254
tp9255
sS'DAQmxSetAIThrmstrC'
p9256
((lp9257
S'int32'
p9258
ag34
a((S'taskHandle'
p9259
(lp9260
S'TaskHandle'
p9261
aNtp9262
(S'channel'
p9263
(lp9264
S'char'
p9265
a(lp9266
I-1
aaNtp9267
(S'data'
p9268
(lp9269
S'float64'
p9270
aNtp9271
tp9272
tp9273
sS'DAQmxSetAIThrmstrB'
p9274
((lp9275
S'int32'
p9276
ag34
a((S'taskHandle'
p9277
(lp9278
S'TaskHandle'
p9279
aNtp9280
(S'channel'
p9281
(lp9282
S'char'
p9283
a(lp9284
I-1
aaNtp9285
(S'data'
p9286
(lp9287
S'float64'
p9288
aNtp9289
tp9290
tp9291
sS'DAQmxSetAIThrmstrA'
p9292
((lp9293
S'int32'
p9294
ag34
a((S'taskHandle'
p9295
(lp9296
S'TaskHandle'
p9297
aNtp9298
(S'channel'
p9299
(lp9300
S'char'
p9301
a(lp9302
I-1
aaNtp9303
(S'data'
p9304
(lp9305
S'float64'
p9306
aNtp9307
tp9308
tp9309
sS'DAQmxReadBinaryI16'
p9310
((lp9311
S'int32'
p9312
ag34
a((S'taskHandle'
p9313
(lp9314
S'TaskHandle'
p9315
aNtp9316
(S'numSampsPerChan'
p9317
(lp9318
S'int32'
p9319
aNtp9320
(S'timeout'
p9321
(lp9322
S'float64'
p9323
aNtp9324
(S'fillMode'
p9325
(lp9326
S'bool32'
p9327
aNtp9328
(S'readArray'
p9329
(lp9330
S'int16'
p9331
a(lp9332
I-1
aaNtp9333
(S'arraySizeInSamps'
p9334
(lp9335
S'uInt32'
p9336
aNtp9337
(S'sampsPerChanRead'
p9338
(lp9339
S'int32'
p9340
ag42
aNtp9341
(S'reserved'
p9342
(lp9343
S'bool32'
p9344
ag42
aNtp9345
tp9346
tp9347
sS'DAQmxGetAIChanCalTablePreScaledVals'
p9348
((lp9349
S'int32'
p9350
ag34
a((S'taskHandle'
p9351
(lp9352
S'TaskHandle'
p9353
aNtp9354
(S'channel'
p9355
(lp9356
S'char'
p9357
a(lp9358
I-1
aaNtp9359
(S'data'
p9360
(lp9361
S'float64'
p9362
ag42
aNtp9363
(S'arraySizeInSamples'
p9364
(lp9365
S'uInt32'
p9366
aNtp9367
tp9368
tp9369
sS'DAQmxGetSampClkTimebaseMasterTimebaseDiv'
p9370
((lp9371
S'int32'
p9372
ag34
a((S'taskHandle'
p9373
(lp9374
S'TaskHandle'
p9375
aNtp9376
(S'data'
p9377
(lp9378
S'uInt32'
p9379
ag42
aNtp9380
tp9381
tp9382
sS'DAQmxDeleteSavedGlobalChan'
p9383
((lp9384
S'int32'
p9385
ag34
a((S'channelName'
p9386
(lp9387
S'char'
p9388
a(lp9389
I-1
aaNtp9390
tp9391
tp9392
sS'DAQmxGetExportedAdvTrigOutputTerm'
p9393
((lp9394
S'int32'
p9395
ag34
a((S'taskHandle'
p9396
(lp9397
S'TaskHandle'
p9398
aNtp9399
(S'data'
p9400
(lp9401
S'char'
p9402
ag42
aNtp9403
(S'bufferSize'
p9404
(lp9405
S'uInt32'
p9406
aNtp9407
tp9408
tp9409
sS'DAQmxGetAIInputSrc'
p9410
((lp9411
S'int32'
p9412
ag34
a((S'taskHandle'
p9413
(lp9414
S'TaskHandle'
p9415
aNtp9416
(S'channel'
p9417
(lp9418
S'char'
p9419
a(lp9420
I-1
aaNtp9421
(S'data'
p9422
(lp9423
S'char'
p9424
ag42
aNtp9425
(S'bufferSize'
p9426
(lp9427
S'uInt32'
p9428
aNtp9429
tp9430
tp9431
sS'DAQmxSwitchGetSingleRelayCount'
p9432
((lp9433
S'int32'
p9434
ag34
a((S'relayName'
p9435
(lp9436
S'char'
p9437
a(lp9438
I-1
aaNtp9439
(S'count'
p9440
(lp9441
S'uInt32'
p9442
ag42
aNtp9443
tp9444
tp9445
sS'DAQmxGetCICountEdgesDigFltrEnable'
p9446
((lp9447
S'int32'
p9448
ag34
a((S'taskHandle'
p9449
(lp9450
S'TaskHandle'
p9451
aNtp9452
(S'channel'
p9453
(lp9454
S'char'
p9455
a(lp9456
I-1
aaNtp9457
(S'data'
p9458
(lp9459
S'bool32'
p9460
ag42
aNtp9461
tp9462
tp9463
sS'DAQmxGetDigEdgeStartTrigDigFltrTimebaseSrc'
p9464
((lp9465
S'int32'
p9466
ag34
a((S'taskHandle'
p9467
(lp9468
S'TaskHandle'
p9469
aNtp9470
(S'data'
p9471
(lp9472
S'char'
p9473
ag42
aNtp9474
(S'bufferSize'
p9475
(lp9476
S'uInt32'
p9477
aNtp9478
tp9479
tp9480
sS'DAQmxGetCIEncoderDecodingType'
p9481
((lp9482
S'int32'
p9483
ag34
a((S'taskHandle'
p9484
(lp9485
S'TaskHandle'
p9486
aNtp9487
(S'channel'
p9488
(lp9489
S'char'
p9490
a(lp9491
I-1
aaNtp9492
(S'data'
p9493
(lp9494
S'int32'
p9495
ag42
aNtp9496
tp9497
tp9498
sS'DAQmxResetCICountEdgesDigFltrTimebaseRate'
p9499
((lp9500
S'int32'
p9501
ag34
a((S'taskHandle'
p9502
(lp9503
S'TaskHandle'
p9504
aNtp9505
(S'channel'
p9506
(lp9507
S'char'
p9508
a(lp9509
I-1
aaNtp9510
tp9511
tp9512
sS'DAQmxAdjustDSAAOCal'
p9513
((lp9514
S'int32'
p9515
ag34
a((S'calHandle'
p9516
(lp9517
S'uInt32'
p9518
aNtp9519
(S'channel'
p9520
(lp9521
S'uInt32'
p9522
aNtp9523
(S'requestedLowVoltage'
p9524
(lp9525
S'float64'
p9526
aNtp9527
(S'actualLowVoltage'
p9528
(lp9529
S'float64'
p9530
aNtp9531
(S'requestedHighVoltage'
p9532
(lp9533
S'float64'
p9534
aNtp9535
(S'actualHighVoltage'
p9536
(lp9537
S'float64'
p9538
aNtp9539
(S'gainSetting'
p9540
(lp9541
S'float64'
p9542
aNtp9543
tp9544
tp9545
sS'DAQmxSetAODACOffsetSrc'
p9546
((lp9547
S'int32'
p9548
ag34
a((S'taskHandle'
p9549
(lp9550
S'TaskHandle'
p9551
aNtp9552
(S'channel'
p9553
(lp9554
S'char'
p9555
a(lp9556
I-1
aaNtp9557
(S'data'
p9558
(lp9559
S'int32'
p9560
aNtp9561
tp9562
tp9563
sS'DAQmxGetCIPeriodMeasTime'
p9564
((lp9565
S'int32'
p9566
ag34
a((S'taskHandle'
p9567
(lp9568
S'TaskHandle'
p9569
aNtp9570
(S'channel'
p9571
(lp9572
S'char'
p9573
a(lp9574
I-1
aaNtp9575
(S'data'
p9576
(lp9577
S'float64'
p9578
ag42
aNtp9579
tp9580
tp9581
sS'DAQmxSetDigEdgeArmStartTrigDigSyncEnable'
p9582
((lp9583
S'int32'
p9584
ag34
a((S'taskHandle'
p9585
(lp9586
S'TaskHandle'
p9587
aNtp9588
(S'data'
p9589
(lp9590
S'bool32'
p9591
aNtp9592
tp9593
tp9594
sS'DAQmxResetAIBridgeNomResistance'
p9595
((lp9596
S'int32'
p9597
ag34
a((S'taskHandle'
p9598
(lp9599
S'TaskHandle'
p9600
aNtp9601
(S'channel'
p9602
(lp9603
S'char'
p9604
a(lp9605
I-1
aaNtp9606
tp9607
tp9608
sS'DAQmxGetCIEncoderBInputDigFltrEnable'
p9609
((lp9610
S'int32'
p9611
ag34
a((S'taskHandle'
p9612
(lp9613
S'TaskHandle'
p9614
aNtp9615
(S'channel'
p9616
(lp9617
S'char'
p9618
a(lp9619
I-1
aaNtp9620
(S'data'
p9621
(lp9622
S'bool32'
p9623
ag42
aNtp9624
tp9625
tp9626
sS'DAQmxResetAIChanCalOperatorName'
p9627
((lp9628
S'int32'
p9629
ag34
a((S'taskHandle'
p9630
(lp9631
S'TaskHandle'
p9632
aNtp9633
(S'channel'
p9634
(lp9635
S'char'
p9636
a(lp9637
I-1
aaNtp9638
tp9639
tp9640
sS'DAQmxGetCIMax'
p9641
((lp9642
S'int32'
p9643
ag34
a((S'taskHandle'
p9644
(lp9645
S'TaskHandle'
p9646
aNtp9647
(S'channel'
p9648
(lp9649
S'char'
p9650
a(lp9651
I-1
aaNtp9652
(S'data'
p9653
(lp9654
S'float64'
p9655
ag42
aNtp9656
tp9657
tp9658
sS'DAQmxResetCIEncoderZIndexPhase'
p9659
((lp9660
S'int32'
p9661
ag34
a((S'taskHandle'
p9662
(lp9663
S'TaskHandle'
p9664
aNtp9665
(S'channel'
p9666
(lp9667
S'char'
p9668
a(lp9669
I-1
aaNtp9670
tp9671
tp9672
sS'DAQmxResetCOAutoIncrCnt'
p9673
((lp9674
S'int32'
p9675
ag34
a((S'taskHandle'
p9676
(lp9677
S'TaskHandle'
p9678
aNtp9679
(S'channel'
p9680
(lp9681
S'char'
p9682
a(lp9683
I-1
aaNtp9684
tp9685
tp9686
sS'DAQmxSetSyncPulseMinDelayToStart'
p9687
((lp9688
S'int32'
p9689
ag34
a((S'taskHandle'
p9690
(lp9691
S'TaskHandle'
p9692
aNtp9693
(S'data'
p9694
(lp9695
S'float64'
p9696
aNtp9697
tp9698
tp9699
sS'DAQmxResetAODACOffsetSrc'
p9700
((lp9701
S'int32'
p9702
ag34
a((S'taskHandle'
p9703
(lp9704
S'TaskHandle'
p9705
aNtp9706
(S'channel'
p9707
(lp9708
S'char'
p9709
a(lp9710
I-1
aaNtp9711
tp9712
tp9713
sS'DAQmxGetPhysicalChanTEDSVersionNum'
p9714
((lp9715
S'int32'
p9716
ag34
a((S'physicalChannel'
p9717
(lp9718
S'char'
p9719
a(lp9720
I-1
aaNtp9721
(S'data'
p9722
(lp9723
S'uInt32'
p9724
ag42
aNtp9725
tp9726
tp9727
sS'DAQmxResetExportedAdvTrigPulseWidthUnits'
p9728
((lp9729
S'int32'
p9730
ag34
a((S'taskHandle'
p9731
(lp9732
S'TaskHandle'
p9733
aNtp9734
tp9735
tp9736
sS'DAQmxResetCIPeriodTerm'
p9737
((lp9738
S'int32'
p9739
ag34
a((S'taskHandle'
p9740
(lp9741
S'TaskHandle'
p9742
aNtp9743
(S'channel'
p9744
(lp9745
S'char'
p9746
a(lp9747
I-1
aaNtp9748
tp9749
tp9750
sS'DAQmxResetDigEdgeWatchdogExpirTrigSrc'
p9751
((lp9752
S'int32'
p9753
ag34
a((S'taskHandle'
p9754
(lp9755
S'TaskHandle'
p9756
aNtp9757
tp9758
tp9759
sS'DAQmxResetExportedSampClkOutputBehavior'
p9760
((lp9761
S'int32'
p9762
ag34
a((S'taskHandle'
p9763
(lp9764
S'TaskHandle'
p9765
aNtp9766
tp9767
tp9768
sS'DAQmxResetCIEncoderAInputDigFltrEnable'
p9769
((lp9770
S'int32'
p9771
ag34
a((S'taskHandle'
p9772
(lp9773
S'TaskHandle'
p9774
aNtp9775
(S'channel'
p9776
(lp9777
S'char'
p9778
a(lp9779
I-1
aaNtp9780
tp9781
tp9782
sS'DAQmxGetAnlgLvlPauseTrigWhen'
p9783
((lp9784
S'int32'
p9785
ag34
a((S'taskHandle'
p9786
(lp9787
S'TaskHandle'
p9788
aNtp9789
(S'data'
p9790
(lp9791
S'int32'
p9792
ag42
aNtp9793
tp9794
tp9795
sS'DAQmxSetCIPeriodMeasMeth'
p9796
((lp9797
S'int32'
p9798
ag34
a((S'taskHandle'
p9799
(lp9800
S'TaskHandle'
p9801
aNtp9802
(S'channel'
p9803
(lp9804
S'char'
p9805
a(lp9806
I-1
aaNtp9807
(S'data'
p9808
(lp9809
S'int32'
p9810
aNtp9811
tp9812
tp9813
sS'DAQmxSetCIPulseWidthDigFltrEnable'
p9814
((lp9815
S'int32'
p9816
ag34
a((S'taskHandle'
p9817
(lp9818
S'TaskHandle'
p9819
aNtp9820
(S'channel'
p9821
(lp9822
S'char'
p9823
a(lp9824
I-1
aaNtp9825
(S'data'
p9826
(lp9827
S'bool32'
p9828
aNtp9829
tp9830
tp9831
sS'DAQmxGetCOCtrTimebaseMasterTimebaseDiv'
p9832
((lp9833
S'int32'
p9834
ag34
a((S'taskHandle'
p9835
(lp9836
S'TaskHandle'
p9837
aNtp9838
(S'channel'
p9839
(lp9840
S'char'
p9841
a(lp9842
I-1
aaNtp9843
(S'data'
p9844
(lp9845
S'uInt32'
p9846
ag42
aNtp9847
tp9848
tp9849
sS'DAQmxGetCIEncoderBInputTerm'
p9850
((lp9851
S'int32'
p9852
ag34
a((S'taskHandle'
p9853
(lp9854
S'TaskHandle'
p9855
aNtp9856
(S'channel'
p9857
(lp9858
S'char'
p9859
a(lp9860
I-1
aaNtp9861
(S'data'
p9862
(lp9863
S'char'
p9864
ag42
aNtp9865
(S'bufferSize'
p9866
(lp9867
S'uInt32'
p9868
aNtp9869
tp9870
tp9871
sS'DAQmxCreateCIPeriodChan'
p9872
((lp9873
S'int32'
p9874
ag34
a((S'taskHandle'
p9875
(lp9876
S'TaskHandle'
p9877
aNtp9878
(S'counter'
p9879
(lp9880
S'char'
p9881
a(lp9882
I-1
aaNtp9883
(S'nameToAssignToChannel'
p9884
(lp9885
S'char'
p9886
a(lp9887
I-1
aaNtp9888
(S'minVal'
p9889
(lp9890
S'float64'
p9891
aNtp9892
(S'maxVal'
p9893
(lp9894
S'float64'
p9895
aNtp9896
(S'units'
p9897
(lp9898
S'int32'
p9899
aNtp9900
(S'edge'
p9901
(lp9902
S'int32'
p9903
aNtp9904
(S'measMethod'
p9905
(lp9906
S'int32'
p9907
aNtp9908
(S'measTime'
p9909
(lp9910
S'float64'
p9911
aNtp9912
(S'divisor'
p9913
(lp9914
S'uInt32'
p9915
aNtp9916
(S'customScaleName'
p9917
(lp9918
S'char'
p9919
a(lp9920
I-1
aaNtp9921
tp9922
tp9923
sS'DAQmxResetSampClkDigFltrTimebaseSrc'
p9924
((lp9925
S'int32'
p9926
ag34
a((S'taskHandle'
p9927
(lp9928
S'TaskHandle'
p9929
aNtp9930
tp9931
tp9932
sS'DAQmxResetAIConvRate'
p9933
((lp9934
S'int32'
p9935
ag34
a((S'taskHandle'
p9936
(lp9937
S'TaskHandle'
p9938
aNtp9939
tp9940
tp9941
sS'DAQmxSetSampQuantSampMode'
p9942
((lp9943
S'int32'
p9944
ag34
a((S'taskHandle'
p9945
(lp9946
S'TaskHandle'
p9947
aNtp9948
(S'data'
p9949
(lp9950
S'int32'
p9951
aNtp9952
tp9953
tp9954
sS'DAQmxResetCIPeriodMeasMeth'
p9955
((lp9956
S'int32'
p9957
ag34
a((S'taskHandle'
p9958
(lp9959
S'TaskHandle'
p9960
aNtp9961
(S'channel'
p9962
(lp9963
S'char'
p9964
a(lp9965
I-1
aaNtp9966
tp9967
tp9968
sS'DAQmxSetAILowpassSwitchCapClkSrc'
p9969
((lp9970
S'int32'
p9971
ag34
a((S'taskHandle'
p9972
(lp9973
S'TaskHandle'
p9974
aNtp9975
(S'channel'
p9976
(lp9977
S'char'
p9978
a(lp9979
I-1
aaNtp9980
(S'data'
p9981
(lp9982
S'int32'
p9983
aNtp9984
tp9985
tp9986
sS'DAQmxResetCOPulseHighTicks'
p9987
((lp9988
S'int32'
p9989
ag34
a((S'taskHandle'
p9990
(lp9991
S'TaskHandle'
p9992
aNtp9993
(S'channel'
p9994
(lp9995
S'char'
p9996
a(lp9997
I-1
aaNtp9998
tp9999
tp10000
sS'DAQmxGetChanType'
p10001
((lp10002
S'int32'
p10003
ag34
a((S'taskHandle'
p10004
(lp10005
S'TaskHandle'
p10006
aNtp10007
(S'channel'
p10008
(lp10009
S'char'
p10010
a(lp10011
I-1
aaNtp10012
(S'data'
p10013
(lp10014
S'int32'
p10015
ag42
aNtp10016
tp10017
tp10018
sS'DAQmxGetAODACRngLow'
p10019
((lp10020
S'int32'
p10021
ag34
a((S'taskHandle'
p10022
(lp10023
S'TaskHandle'
p10024
aNtp10025
(S'channel'
p10026
(lp10027
S'char'
p10028
a(lp10029
I-1
aaNtp10030
(S'data'
p10031
(lp10032
S'float64'
p10033
ag42
aNtp10034
tp10035
tp10036
sS'DAQmxResetRealTimeReportMissedSamp'
p10037
((lp10038
S'int32'
p10039
ag34
a((S'taskHandle'
p10040
(lp10041
S'TaskHandle'
p10042
aNtp10043
tp10044
tp10045
sS'DAQmxResetCICountEdgesInitialCnt'
p10046
((lp10047
S'int32'
p10048
ag34
a((S'taskHandle'
p10049
(lp10050
S'TaskHandle'
p10051
aNtp10052
(S'channel'
p10053
(lp10054
S'char'
p10055
a(lp10056
I-1
aaNtp10057
tp10058
tp10059
sS'DAQmxGetCITwoEdgeSepFirstDigSyncEnable'
p10060
((lp10061
S'int32'
p10062
ag34
a((S'taskHandle'
p10063
(lp10064
S'TaskHandle'
p10065
aNtp10066
(S'channel'
p10067
(lp10068
S'char'
p10069
a(lp10070
I-1
aaNtp10071
(S'data'
p10072
(lp10073
S'bool32'
p10074
ag42
aNtp10075
tp10076
tp10077
sS'DAQmxCreateCOPulseChanTicks'
p10078
((lp10079
S'int32'
p10080
ag34
a((S'taskHandle'
p10081
(lp10082
S'TaskHandle'
p10083
aNtp10084
(S'counter'
p10085
(lp10086
S'char'
p10087
a(lp10088
I-1
aaNtp10089
(S'nameToAssignToChannel'
p10090
(lp10091
S'char'
p10092
a(lp10093
I-1
aaNtp10094
(S'sourceTerminal'
p10095
(lp10096
S'char'
p10097
a(lp10098
I-1
aaNtp10099
(S'idleState'
p10100
(lp10101
S'int32'
p10102
aNtp10103
(S'initialDelay'
p10104
(lp10105
S'int32'
p10106
aNtp10107
(S'lowTicks'
p10108
(lp10109
S'int32'
p10110
aNtp10111
(S'highTicks'
p10112
(lp10113
S'int32'
p10114
aNtp10115
tp10116
tp10117
sS'DAQmxResetCIPeriodStartingEdge'
p10118
((lp10119
S'int32'
p10120
ag34
a((S'taskHandle'
p10121
(lp10122
S'TaskHandle'
p10123
aNtp10124
(S'channel'
p10125
(lp10126
S'char'
p10127
a(lp10128
I-1
aaNtp10129
tp10130
tp10131
sS'DAQmxResetCOCtrTimebaseDigSyncEnable'
p10132
((lp10133
S'int32'
p10134
ag34
a((S'taskHandle'
p10135
(lp10136
S'TaskHandle'
p10137
aNtp10138
(S'channel'
p10139
(lp10140
S'char'
p10141
a(lp10142
I-1
aaNtp10143
tp10144
tp10145
sS'DAQmxGetDigLvlPauseTrigDigFltrTimebaseRate'
p10146
((lp10147
S'int32'
p10148
ag34
a((S'taskHandle'
p10149
(lp10150
S'TaskHandle'
p10151
aNtp10152
(S'data'
p10153
(lp10154
S'float64'
p10155
ag42
aNtp10156
tp10157
tp10158
sS'DAQmxGetExportedAIConvClkOutputTerm'
p10159
((lp10160
S'int32'
p10161
ag34
a((S'taskHandle'
p10162
(lp10163
S'TaskHandle'
p10164
aNtp10165
(S'data'
p10166
(lp10167
S'char'
p10168
ag42
aNtp10169
(S'bufferSize'
p10170
(lp10171
S'uInt32'
p10172
aNtp10173
tp10174
tp10175
sS'DAQmxResetCISemiPeriodDigSyncEnable'
p10176
((lp10177
S'int32'
p10178
ag34
a((S'taskHandle'
p10179
(lp10180
S'TaskHandle'
p10181
aNtp10182
(S'channel'
p10183
(lp10184
S'char'
p10185
a(lp10186
I-1
aaNtp10187
tp10188
tp10189
sS'DAQmxResetRefTrigPretrigSamples'
p10190
((lp10191
S'int32'
p10192
ag34
a((S'taskHandle'
p10193
(lp10194
S'TaskHandle'
p10195
aNtp10196
tp10197
tp10198
sS'DAQmxSetAICurrentShuntResistance'
p10199
((lp10200
S'int32'
p10201
ag34
a((S'taskHandle'
p10202
(lp10203
S'TaskHandle'
p10204
aNtp10205
(S'channel'
p10206
(lp10207
S'char'
p10208
a(lp10209
I-1
aaNtp10210
(S'data'
p10211
(lp10212
S'float64'
p10213
aNtp10214
tp10215
tp10216
sS'DAQmxResetAIRngHigh'
p10217
((lp10218
S'int32'
p10219
ag34
a((S'taskHandle'
p10220
(lp10221
S'TaskHandle'
p10222
aNtp10223
(S'channel'
p10224
(lp10225
S'char'
p10226
a(lp10227
I-1
aaNtp10228
tp10229
tp10230
sS'DAQmxResetAILowpassSwitchCapExtClkDiv'
p10231
((lp10232
S'int32'
p10233
ag34
a((S'taskHandle'
p10234
(lp10235
S'TaskHandle'
p10236
aNtp10237
(S'channel'
p10238
(lp10239
S'char'
p10240
a(lp10241
I-1
aaNtp10242
tp10243
tp10244
sS'DAQmxSetCICountEdgesDigFltrEnable'
p10245
((lp10246
S'int32'
p10247
ag34
a((S'taskHandle'
p10248
(lp10249
S'TaskHandle'
p10250
aNtp10251
(S'channel'
p10252
(lp10253
S'char'
p10254
a(lp10255
I-1
aaNtp10256
(S'data'
p10257
(lp10258
S'bool32'
p10259
aNtp10260
tp10261
tp10262
sS'DAQmxResetExportedChangeDetectEventPulsePolarity'
p10263
((lp10264
S'int32'
p10265
ag34
a((S'taskHandle'
p10266
(lp10267
S'TaskHandle'
p10268
aNtp10269
tp10270
tp10271
sS'DAQmxGetExportedRefTrigOutputTerm'
p10272
((lp10273
S'int32'
p10274
ag34
a((S'taskHandle'
p10275
(lp10276
S'TaskHandle'
p10277
aNtp10278
(S'data'
p10279
(lp10280
S'char'
p10281
ag42
aNtp10282
(S'bufferSize'
p10283
(lp10284
S'uInt32'
p10285
aNtp10286
tp10287
tp10288
sS'DAQmxSetExportedCtrOutEventOutputBehavior'
p10289
((lp10290
S'int32'
p10291
ag34
a((S'taskHandle'
p10292
(lp10293
S'TaskHandle'
p10294
aNtp10295
(S'data'
p10296
(lp10297
S'int32'
p10298
aNtp10299
tp10300
tp10301
sS'DAQmxGetDevAIPhysicalChans'
p10302
((lp10303
S'int32'
p10304
ag34
a((S'device'
p10305
(lp10306
S'char'
p10307
a(lp10308
I-1
aaNtp10309
(S'data'
p10310
(lp10311
S'char'
p10312
ag42
aNtp10313
(S'bufferSize'
p10314
(lp10315
S'uInt32'
p10316
aNtp10317
tp10318
tp10319
sS'DAQmxGetAIStrainGageGageFactor'
p10320
((lp10321
S'int32'
p10322
ag34
a((S'taskHandle'
p10323
(lp10324
S'TaskHandle'
p10325
aNtp10326
(S'channel'
p10327
(lp10328
S'char'
p10329
a(lp10330
I-1
aaNtp10331
(S'data'
p10332
(lp10333
S'float64'
p10334
ag42
aNtp10335
tp10336
tp10337
sS'DAQmxGetPersistedTaskAuthor'
p10338
((lp10339
S'int32'
p10340
ag34
a((S'taskName'
p10341
(lp10342
S'char'
p10343
a(lp10344
I-1
aaNtp10345
(S'data'
p10346
(lp10347
S'char'
p10348
ag42
aNtp10349
(S'bufferSize'
p10350
(lp10351
S'uInt32'
p10352
aNtp10353
tp10354
tp10355
sS'DAQmxResetAIRawDataCompressionType'
p10356
((lp10357
S'int32'
p10358
ag34
a((S'taskHandle'
p10359
(lp10360
S'TaskHandle'
p10361
aNtp10362
(S'channel'
p10363
(lp10364
S'char'
p10365
a(lp10366
I-1
aaNtp10367
tp10368
tp10369
sS'DAQmxResetReadReadAllAvailSamp'
p10370
((lp10371
S'int32'
p10372
ag34
a((S'taskHandle'
p10373
(lp10374
S'TaskHandle'
p10375
aNtp10376
tp10377
tp10378
sS'DAQmxSetAIConvTimebaseSrc'
p10379
((lp10380
S'int32'
p10381
ag34
a((S'taskHandle'
p10382
(lp10383
S'TaskHandle'
p10384
aNtp10385
(S'data'
p10386
(lp10387
S'int32'
p10388
aNtp10389
tp10390
tp10391
sS'DAQmxCreateTEDSAIThrmcplChan'
p10392
((lp10393
S'int32'
p10394
ag34
a((S'taskHandle'
p10395
(lp10396
S'TaskHandle'
p10397
aNtp10398
(S'physicalChannel'
p10399
(lp10400
S'char'
p10401
a(lp10402
I-1
aaNtp10403
(S'nameToAssignToChannel'
p10404
(lp10405
S'char'
p10406
a(lp10407
I-1
aaNtp10408
(S'minVal'
p10409
(lp10410
S'float64'
p10411
aNtp10412
(S'maxVal'
p10413
(lp10414
S'float64'
p10415
aNtp10416
(S'units'
p10417
(lp10418
S'int32'
p10419
aNtp10420
(S'cjcSource'
p10421
(lp10422
S'int32'
p10423
aNtp10424
(S'cjcVal'
p10425
(lp10426
S'float64'
p10427
aNtp10428
(S'cjcChannel'
p10429
(lp10430
S'char'
p10431
a(lp10432
I-1
aaNtp10433
tp10434
tp10435
sS'DAQmxGetAIBridgeBalanceCoarsePot'
p10436
((lp10437
S'int32'
p10438
ag34
a((S'taskHandle'
p10439
(lp10440
S'TaskHandle'
p10441
aNtp10442
(S'channel'
p10443
(lp10444
S'char'
p10445
a(lp10446
I-1
aaNtp10447
(S'data'
p10448
(lp10449
S'int32'
p10450
ag42
aNtp10451
tp10452
tp10453
sS'DAQmxSetScaleTableScaledVals'
p10454
((lp10455
S'int32'
p10456
ag34
a((S'scaleName'
p10457
(lp10458
S'char'
p10459
a(lp10460
I-1
aaNtp10461
(S'data'
p10462
(lp10463
S'float64'
p10464
ag42
aNtp10465
(S'arraySizeInSamples'
p10466
(lp10467
S'uInt32'
p10468
aNtp10469
tp10470
tp10471
sS'DAQmxGetDigEdgeRefTrigSrc'
p10472
((lp10473
S'int32'
p10474
ag34
a((S'taskHandle'
p10475
(lp10476
S'TaskHandle'
p10477
aNtp10478
(S'data'
p10479
(lp10480
S'char'
p10481
ag42
aNtp10482
(S'bufferSize'
p10483
(lp10484
S'uInt32'
p10485
aNtp10486
tp10487
tp10488
sS'DAQmxGetCOCtrTimebaseActiveEdge'
p10489
((lp10490
S'int32'
p10491
ag34
a((S'taskHandle'
p10492
(lp10493
S'TaskHandle'
p10494
aNtp10495
(S'channel'
p10496
(lp10497
S'char'
p10498
a(lp10499
I-1
aaNtp10500
(S'data'
p10501
(lp10502
S'int32'
p10503
ag42
aNtp10504
tp10505
tp10506
sS'DAQmxGetCIEncoderBInputDigFltrMinPulseWidth'
p10507
((lp10508
S'int32'
p10509
ag34
a((S'taskHandle'
p10510
(lp10511
S'TaskHandle'
p10512
aNtp10513
(S'channel'
p10514
(lp10515
S'char'
p10516
a(lp10517
I-1
aaNtp10518
(S'data'
p10519
(lp10520
S'float64'
p10521
ag42
aNtp10522
tp10523
tp10524
sS'DAQmxGetExportedSampClkOutputTerm'
p10525
((lp10526
S'int32'
p10527
ag34
a((S'taskHandle'
p10528
(lp10529
S'TaskHandle'
p10530
aNtp10531
(S'data'
p10532
(lp10533
S'char'
p10534
ag42
aNtp10535
(S'bufferSize'
p10536
(lp10537
S'uInt32'
p10538
aNtp10539
tp10540
tp10541
sS'DAQmxSetAOReglitchEnable'
p10542
((lp10543
S'int32'
p10544
ag34
a((S'taskHandle'
p10545
(lp10546
S'TaskHandle'
p10547
aNtp10548
(S'channel'
p10549
(lp10550
S'char'
p10551
a(lp10552
I-1
aaNtp10553
(S'data'
p10554
(lp10555
S'bool32'
p10556
aNtp10557
tp10558
tp10559
sS'DAQmxGetCIPulseWidthTerm'
p10560
((lp10561
S'int32'
p10562
ag34
a((S'taskHandle'
p10563
(lp10564
S'TaskHandle'
p10565
aNtp10566
(S'channel'
p10567
(lp10568
S'char'
p10569
a(lp10570
I-1
aaNtp10571
(S'data'
p10572
(lp10573
S'char'
p10574
ag42
aNtp10575
(S'bufferSize'
p10576
(lp10577
S'uInt32'
p10578
aNtp10579
tp10580
tp10581
sS'DAQmxSetCITwoEdgeSepSecondDigFltrTimebaseRate'
p10582
((lp10583
S'int32'
p10584
ag34
a((S'taskHandle'
p10585
(lp10586
S'TaskHandle'
p10587
aNtp10588
(S'channel'
p10589
(lp10590
S'char'
p10591
a(lp10592
I-1
aaNtp10593
(S'data'
p10594
(lp10595
S'float64'
p10596
aNtp10597
tp10598
tp10599
sS'DAQmxGetWriteDigitalLinesBytesPerChan'
p10600
((lp10601
S'int32'
p10602
ag34
a((S'taskHandle'
p10603
(lp10604
S'TaskHandle'
p10605
aNtp10606
(S'data'
p10607
(lp10608
S'uInt32'
p10609
ag42
aNtp10610
tp10611
tp10612
sS'DAQmxSetExportedHshkEventPulsePolarity'
p10613
((lp10614
S'int32'
p10615
ag34
a((S'taskHandle'
p10616
(lp10617
S'TaskHandle'
p10618
aNtp10619
(S'data'
p10620
(lp10621
S'int32'
p10622
aNtp10623
tp10624
tp10625
sS'DAQmxSetAIFreqHyst'
p10626
((lp10627
S'int32'
p10628
ag34
a((S'taskHandle'
p10629
(lp10630
S'TaskHandle'
p10631
aNtp10632
(S'channel'
p10633
(lp10634
S'char'
p10635
a(lp10636
I-1
aaNtp10637
(S'data'
p10638
(lp10639
S'float64'
p10640
aNtp10641
tp10642
tp10643
sS'DAQmxGetSwitchScanBreakMode'
p10644
((lp10645
S'int32'
p10646
ag34
a((S'taskHandle'
p10647
(lp10648
S'TaskHandle'
p10649
aNtp10650
(S'data'
p10651
(lp10652
S'int32'
p10653
ag42
aNtp10654
tp10655
tp10656
sS'DAQmxSetReadReadAllAvailSamp'
p10657
((lp10658
S'int32'
p10659
ag34
a((S'taskHandle'
p10660
(lp10661
S'TaskHandle'
p10662
aNtp10663
(S'data'
p10664
(lp10665
S'bool32'
p10666
aNtp10667
tp10668
tp10669
sS'DAQmxResetCISemiPeriodDigFltrMinPulseWidth'
p10670
((lp10671
S'int32'
p10672
ag34
a((S'taskHandle'
p10673
(lp10674
S'TaskHandle'
p10675
aNtp10676
(S'channel'
p10677
(lp10678
S'char'
p10679
a(lp10680
I-1
aaNtp10681
tp10682
tp10683
sS'DAQmxGetAIRVDTSensitivityUnits'
p10684
((lp10685
S'int32'
p10686
ag34
a((S'taskHandle'
p10687
(lp10688
S'TaskHandle'
p10689
aNtp10690
(S'channel'
p10691
(lp10692
S'char'
p10693
a(lp10694
I-1
aaNtp10695
(S'data'
p10696
(lp10697
S'int32'
p10698
ag42
aNtp10699
tp10700
tp10701
sS'DAQmxSendSoftwareTrigger'
p10702
((lp10703
S'int32'
p10704
ag34
a((S'taskHandle'
p10705
(lp10706
S'TaskHandle'
p10707
aNtp10708
(S'triggerID'
p10709
(lp10710
S'int32'
p10711
aNtp10712
tp10713
tp10714
sS'DAQmxSetAIMin'
p10715
((lp10716
S'int32'
p10717
ag34
a((S'taskHandle'
p10718
(lp10719
S'TaskHandle'
p10720
aNtp10721
(S'channel'
p10722
(lp10723
S'char'
p10724
a(lp10725
I-1
aaNtp10726
(S'data'
p10727
(lp10728
S'float64'
p10729
aNtp10730
tp10731
tp10732
sS'DAQmxGetSampQuantSampMode'
p10733
((lp10734
S'int32'
p10735
ag34
a((S'taskHandle'
p10736
(lp10737
S'TaskHandle'
p10738
aNtp10739
(S'data'
p10740
(lp10741
S'int32'
p10742
ag42
aNtp10743
tp10744
tp10745
sS'DAQmxGetCICountEdgesDigFltrMinPulseWidth'
p10746
((lp10747
S'int32'
p10748
ag34
a((S'taskHandle'
p10749
(lp10750
S'TaskHandle'
p10751
aNtp10752
(S'channel'
p10753
(lp10754
S'char'
p10755
a(lp10756
I-1
aaNtp10757
(S'data'
p10758
(lp10759
S'float64'
p10760
ag42
aNtp10761
tp10762
tp10763
sS'DAQmxGetAOVoltageUnits'
p10764
((lp10765
S'int32'
p10766
ag34
a((S'taskHandle'
p10767
(lp10768
S'TaskHandle'
p10769
aNtp10770
(S'channel'
p10771
(lp10772
S'char'
p10773
a(lp10774
I-1
aaNtp10775
(S'data'
p10776
(lp10777
S'int32'
p10778
ag42
aNtp10779
tp10780
tp10781
sS'DAQmxResetSampQuantSampPerChan'
p10782
((lp10783
S'int32'
p10784
ag34
a((S'taskHandle'
p10785
(lp10786
S'TaskHandle'
p10787
aNtp10788
tp10789
tp10790
sS'DAQmxResetCITimestampInitialSeconds'
p10791
((lp10792
S'int32'
p10793
ag34
a((S'taskHandle'
p10794
(lp10795
S'TaskHandle'
p10796
aNtp10797
(S'channel'
p10798
(lp10799
S'char'
p10800
a(lp10801
I-1
aaNtp10802
tp10803
tp10804
sS'DAQmxGetAIBridgeShuntCalEnable'
p10805
((lp10806
S'int32'
p10807
ag34
a((S'taskHandle'
p10808
(lp10809
S'TaskHandle'
p10810
aNtp10811
(S'channel'
p10812
(lp10813
S'char'
p10814
a(lp10815
I-1
aaNtp10816
(S'data'
p10817
(lp10818
S'bool32'
p10819
ag42
aNtp10820
tp10821
tp10822
sS'DAQmxResetAIStrainGageGageFactor'
p10823
((lp10824
S'int32'
p10825
ag34
a((S'taskHandle'
p10826
(lp10827
S'TaskHandle'
p10828
aNtp10829
(S'channel'
p10830
(lp10831
S'char'
p10832
a(lp10833
I-1
aaNtp10834
tp10835
tp10836
sS'DAQmxSetDigEdgeRefTrigSrc'
p10837
((lp10838
S'int32'
p10839
ag34
a((S'taskHandle'
p10840
(lp10841
S'TaskHandle'
p10842
aNtp10843
(S'data'
p10844
(lp10845
S'char'
p10846
ag42
aNtp10847
tp10848
tp10849
sS'DAQmxResetAOReglitchEnable'
p10850
((lp10851
S'int32'
p10852
ag34
a((S'taskHandle'
p10853
(lp10854
S'TaskHandle'
p10855
aNtp10856
(S'channel'
p10857
(lp10858
S'char'
p10859
a(lp10860
I-1
aaNtp10861
tp10862
tp10863
sS'DAQmxSetAIVoltageUnits'
p10864
((lp10865
S'int32'
p10866
ag34
a((S'taskHandle'
p10867
(lp10868
S'TaskHandle'
p10869
aNtp10870
(S'channel'
p10871
(lp10872
S'char'
p10873
a(lp10874
I-1
aaNtp10875
(S'data'
p10876
(lp10877
S'int32'
p10878
aNtp10879
tp10880
tp10881
sS'DAQmxGetAIThrmcplCJCChan'
p10882
((lp10883
S'int32'
p10884
ag34
a((S'taskHandle'
p10885
(lp10886
S'TaskHandle'
p10887
aNtp10888
(S'channel'
p10889
(lp10890
S'char'
p10891
a(lp10892
I-1
aaNtp10893
(S'data'
p10894
(lp10895
S'char'
p10896
ag42
aNtp10897
(S'bufferSize'
p10898
(lp10899
S'uInt32'
p10900
aNtp10901
tp10902
tp10903
sS'DAQmxResetCIEncoderBInputDigSyncEnable'
p10904
((lp10905
S'int32'
p10906
ag34
a((S'taskHandle'
p10907
(lp10908
S'TaskHandle'
p10909
aNtp10910
(S'channel'
p10911
(lp10912
S'char'
p10913
a(lp10914
I-1
aaNtp10915
tp10916
tp10917
sS'DAQmxGetSwitchChanMaxACCarryCurrent'
p10918
((lp10919
S'int32'
p10920
ag34
a((S'switchChannelName'
p10921
(lp10922
S'char'
p10923
a(lp10924
I-1
aaNtp10925
(S'data'
p10926
(lp10927
S'float64'
p10928
ag42
aNtp10929
tp10930
tp10931
sS'DAQmxResetAODACRngHigh'
p10932
((lp10933
S'int32'
p10934
ag34
a((S'taskHandle'
p10935
(lp10936
S'TaskHandle'
p10937
aNtp10938
(S'channel'
p10939
(lp10940
S'char'
p10941
a(lp10942
I-1
aaNtp10943
tp10944
tp10945
sS'DAQmxSetExportedAIHoldCmpltEventPulsePolarity'
p10946
((lp10947
S'int32'
p10948
ag34
a((S'taskHandle'
p10949
(lp10950
S'TaskHandle'
p10951
aNtp10952
(S'data'
p10953
(lp10954
S'int32'
p10955
aNtp10956
tp10957
tp10958
sS'DAQmxGetDigPatternStartTrigWhen'
p10959
((lp10960
S'int32'
p10961
ag34
a((S'taskHandle'
p10962
(lp10963
S'TaskHandle'
p10964
aNtp10965
(S'data'
p10966
(lp10967
S'int32'
p10968
ag42
aNtp10969
tp10970
tp10971
sS'DAQmxGetDevPCIDevNum'
p10972
((lp10973
S'int32'
p10974
ag34
a((S'device'
p10975
(lp10976
S'char'
p10977
a(lp10978
I-1
aaNtp10979
(S'data'
p10980
(lp10981
S'uInt32'
p10982
ag42
aNtp10983
tp10984
tp10985
sS'DAQmxGetMasterTimebaseRate'
p10986
((lp10987
S'int32'
p10988
ag34
a((S'taskHandle'
p10989
(lp10990
S'TaskHandle'
p10991
aNtp10992
(S'data'
p10993
(lp10994
S'float64'
p10995
ag42
aNtp10996
tp10997
tp10998
sS'DAQmxResetCICtrTimebaseMasterTimebaseDiv'
p10999
((lp11000
S'int32'
p11001
ag34
a((S'taskHandle'
p11002
(lp11003
S'TaskHandle'
p11004
aNtp11005
(S'channel'
p11006
(lp11007
S'char'
p11008
a(lp11009
I-1
aaNtp11010
tp11011
tp11012
sS'DAQmxGetCICountEdgesInitialCnt'
p11013
((lp11014
S'int32'
p11015
ag34
a((S'taskHandle'
p11016
(lp11017
S'TaskHandle'
p11018
aNtp11019
(S'channel'
p11020
(lp11021
S'char'
p11022
a(lp11023
I-1
aaNtp11024
(S'data'
p11025
(lp11026
S'uInt32'
p11027
ag42
aNtp11028
tp11029
tp11030
sS'DAQmxResetCICountEdgesDigFltrEnable'
p11031
((lp11032
S'int32'
p11033
ag34
a((S'taskHandle'
p11034
(lp11035
S'TaskHandle'
p11036
aNtp11037
(S'channel'
p11038
(lp11039
S'char'
p11040
a(lp11041
I-1
aaNtp11042
tp11043
tp11044
sS'DAQmxResetReadChannelsToRead'
p11045
((lp11046
S'int32'
p11047
ag34
a((S'taskHandle'
p11048
(lp11049
S'TaskHandle'
p11050
aNtp11051
tp11052
tp11053
sS'DAQmxResetAOMemMapEnable'
p11054
((lp11055
S'int32'
p11056
ag34
a((S'taskHandle'
p11057
(lp11058
S'TaskHandle'
p11059
aNtp11060
(S'channel'
p11061
(lp11062
S'char'
p11063
a(lp11064
I-1
aaNtp11065
tp11066
tp11067
sS'DAQmxSetCITwoEdgeSepSecondTerm'
p11068
((lp11069
S'int32'
p11070
ag34
a((S'taskHandle'
p11071
(lp11072
S'TaskHandle'
p11073
aNtp11074
(S'channel'
p11075
(lp11076
S'char'
p11077
a(lp11078
I-1
aaNtp11079
(S'data'
p11080
(lp11081
S'char'
p11082
ag42
aNtp11083
tp11084
tp11085
sS'DAQmxGetDigPatternRefTrigPattern'
p11086
((lp11087
S'int32'
p11088
ag34
a((S'taskHandle'
p11089
(lp11090
S'TaskHandle'
p11091
aNtp11092
(S'data'
p11093
(lp11094
S'char'
p11095
ag42
aNtp11096
(S'bufferSize'
p11097
(lp11098
S'uInt32'
p11099
aNtp11100
tp11101
tp11102
sS'DAQmxResetAIACExcitSyncEnable'
p11103
((lp11104
S'int32'
p11105
ag34
a((S'taskHandle'
p11106
(lp11107
S'TaskHandle'
p11108
aNtp11109
(S'channel'
p11110
(lp11111
S'char'
p11112
a(lp11113
I-1
aaNtp11114
tp11115
tp11116
sS'DAQmxSetAOMax'
p11117
((lp11118
S'int32'
p11119
ag34
a((S'taskHandle'
p11120
(lp11121
S'TaskHandle'
p11122
aNtp11123
(S'channel'
p11124
(lp11125
S'char'
p11126
a(lp11127
I-1
aaNtp11128
(S'data'
p11129
(lp11130
S'float64'
p11131
aNtp11132
tp11133
tp11134
sS'DAQmxResetCIFreqUnits'
p11135
((lp11136
S'int32'
p11137
ag34
a((S'taskHandle'
p11138
(lp11139
S'TaskHandle'
p11140
aNtp11141
(S'channel'
p11142
(lp11143
S'char'
p11144
a(lp11145
I-1
aaNtp11146
tp11147
tp11148
sS'DAQmxSetAILVDTSensitivity'
p11149
((lp11150
S'int32'
p11151
ag34
a((S'taskHandle'
p11152
(lp11153
S'TaskHandle'
p11154
aNtp11155
(S'channel'
p11156
(lp11157
S'char'
p11158
a(lp11159
I-1
aaNtp11160
(S'data'
p11161
(lp11162
S'float64'
p11163
aNtp11164
tp11165
tp11166
sS'DAQmxResetAIAtten'
p11167
((lp11168
S'int32'
p11169
ag34
a((S'taskHandle'
p11170
(lp11171
S'TaskHandle'
p11172
aNtp11173
(S'channel'
p11174
(lp11175
S'char'
p11176
a(lp11177
I-1
aaNtp11178
tp11179
tp11180
sS'DAQmxSetCIFreqDigSyncEnable'
p11181
((lp11182
S'int32'
p11183
ag34
a((S'taskHandle'
p11184
(lp11185
S'TaskHandle'
p11186
aNtp11187
(S'channel'
p11188
(lp11189
S'char'
p11190
a(lp11191
I-1
aaNtp11192
(S'data'
p11193
(lp11194
S'bool32'
p11195
aNtp11196
tp11197
tp11198
sS'DAQmxResetCICountEdgesDigSyncEnable'
p11199
((lp11200
S'int32'
p11201
ag34
a((S'taskHandle'
p11202
(lp11203
S'TaskHandle'
p11204
aNtp11205
(S'channel'
p11206
(lp11207
S'char'
p11208
a(lp11209
I-1
aaNtp11210
tp11211
tp11212
sS'DAQmxGetReadAutoStart'
p11213
((lp11214
S'int32'
p11215
ag34
a((S'taskHandle'
p11216
(lp11217
S'TaskHandle'
p11218
aNtp11219
(S'data'
p11220
(lp11221
S'bool32'
p11222
ag42
aNtp11223
tp11224
tp11225
sS'DAQmxGetChanDescr'
p11226
((lp11227
S'int32'
p11228
ag34
a((S'taskHandle'
p11229
(lp11230
S'TaskHandle'
p11231
aNtp11232
(S'channel'
p11233
(lp11234
S'char'
p11235
a(lp11236
I-1
aaNtp11237
(S'data'
p11238
(lp11239
S'char'
p11240
ag42
aNtp11241
(S'bufferSize'
p11242
(lp11243
S'uInt32'
p11244
aNtp11245
tp11246
tp11247
sS'DAQmxResetCOPulseTimeUnits'
p11248
((lp11249
S'int32'
p11250
ag34
a((S'taskHandle'
p11251
(lp11252
S'TaskHandle'
p11253
aNtp11254
(S'channel'
p11255
(lp11256
S'char'
p11257
a(lp11258
I-1
aaNtp11259
tp11260
tp11261
sS'DAQmxSetCIEncoderZInputDigSyncEnable'
p11262
((lp11263
S'int32'
p11264
ag34
a((S'taskHandle'
p11265
(lp11266
S'TaskHandle'
p11267
aNtp11268
(S'channel'
p11269
(lp11270
S'char'
p11271
a(lp11272
I-1
aaNtp11273
(S'data'
p11274
(lp11275
S'bool32'
p11276
aNtp11277
tp11278
tp11279
sS'DAQmxSetAnlgWinRefTrigTop'
p11280
((lp11281
S'int32'
p11282
ag34
a((S'taskHandle'
p11283
(lp11284
S'TaskHandle'
p11285
aNtp11286
(S'data'
p11287
(lp11288
S'float64'
p11289
aNtp11290
tp11291
tp11292
sS'DAQmxGetAIStrainGageCfg'
p11293
((lp11294
S'int32'
p11295
ag34
a((S'taskHandle'
p11296
(lp11297
S'TaskHandle'
p11298
aNtp11299
(S'channel'
p11300
(lp11301
S'char'
p11302
a(lp11303
I-1
aaNtp11304
(S'data'
p11305
(lp11306
S'int32'
p11307
ag42
aNtp11308
tp11309
tp11310
sS'DAQmxSetAIChanCalDesc'
p11311
((lp11312
S'int32'
p11313
ag34
a((S'taskHandle'
p11314
(lp11315
S'TaskHandle'
p11316
aNtp11317
(S'channel'
p11318
(lp11319
S'char'
p11320
a(lp11321
I-1
aaNtp11322
(S'data'
p11323
(lp11324
S'char'
p11325
ag42
aNtp11326
tp11327
tp11328
sS'DAQmxSetAOVoltageUnits'
p11329
((lp11330
S'int32'
p11331
ag34
a((S'taskHandle'
p11332
(lp11333
S'TaskHandle'
p11334
aNtp11335
(S'channel'
p11336
(lp11337
S'char'
p11338
a(lp11339
I-1
aaNtp11340
(S'data'
p11341
(lp11342
S'int32'
p11343
aNtp11344
tp11345
tp11346
sS'DAQmxResetExportedRdyForXferEventLvlActiveLvl'
p11347
((lp11348
S'int32'
p11349
ag34
a((S'taskHandle'
p11350
(lp11351
S'TaskHandle'
p11352
aNtp11353
tp11354
tp11355
sS'DAQmxResetCITwoEdgeSepSecondDigSyncEnable'
p11356
((lp11357
S'int32'
p11358
ag34
a((S'taskHandle'
p11359
(lp11360
S'TaskHandle'
p11361
aNtp11362
(S'channel'
p11363
(lp11364
S'char'
p11365
a(lp11366
I-1
aaNtp11367
tp11368
tp11369
sS'DAQmxGetScalePolyReverseCoeff'
p11370
((lp11371
S'int32'
p11372
ag34
a((S'scaleName'
p11373
(lp11374
S'char'
p11375
a(lp11376
I-1
aaNtp11377
(S'data'
p11378
(lp11379
S'float64'
p11380
ag42
aNtp11381
(S'arraySizeInSamples'
p11382
(lp11383
S'uInt32'
p11384
aNtp11385
tp11386
tp11387
sS'DAQmxGetPhysicalChanTEDSBitStream'
p11388
((lp11389
S'int32'
p11390
ag34
a((S'physicalChannel'
p11391
(lp11392
S'char'
p11393
a(lp11394
I-1
aaNtp11395
(S'data'
p11396
(lp11397
S'uInt8'
p11398
ag42
aNtp11399
(S'arraySizeInSamples'
p11400
(lp11401
S'uInt32'
p11402
aNtp11403
tp11404
tp11405
sS'DAQmxSetAILowpassSwitchCapExtClkFreq'
p11406
((lp11407
S'int32'
p11408
ag34
a((S'taskHandle'
p11409
(lp11410
S'TaskHandle'
p11411
aNtp11412
(S'channel'
p11413
(lp11414
S'char'
p11415
a(lp11416
I-1
aaNtp11417
(S'data'
p11418
(lp11419
S'float64'
p11420
aNtp11421
tp11422
tp11423
sS'DAQmxGetChangeDetectDIRisingEdgePhysicalChans'
p11424
((lp11425
S'int32'
p11426
ag34
a((S'taskHandle'
p11427
(lp11428
S'TaskHandle'
p11429
aNtp11430
(S'data'
p11431
(lp11432
S'char'
p11433
ag42
aNtp11434
(S'bufferSize'
p11435
(lp11436
S'uInt32'
p11437
aNtp11438
tp11439
tp11440
sS'DAQmxResetAIStrainGageCfg'
p11441
((lp11442
S'int32'
p11443
ag34
a((S'taskHandle'
p11444
(lp11445
S'TaskHandle'
p11446
aNtp11447
(S'channel'
p11448
(lp11449
S'char'
p11450
a(lp11451
I-1
aaNtp11452
tp11453
tp11454
sS'DAQmxSetCIEncoderAInputDigFltrMinPulseWidth'
p11455
((lp11456
S'int32'
p11457
ag34
a((S'taskHandle'
p11458
(lp11459
S'TaskHandle'
p11460
aNtp11461
(S'channel'
p11462
(lp11463
S'char'
p11464
a(lp11465
I-1
aaNtp11466
(S'data'
p11467
(lp11468
S'float64'
p11469
aNtp11470
tp11471
tp11472
sS'DAQmxResetReadAttribute'
p11473
((lp11474
S'int32'
p11475
ag34
a((S'taskHandle'
p11476
(lp11477
S'TaskHandle'
p11478
aNtp11479
(S'attribute'
p11480
(lp11481
S'int32'
p11482
aNtp11483
tp11484
tp11485
sS'DAQmxSetAILowpassSwitchCapOutClkDiv'
p11486
((lp11487
S'int32'
p11488
ag34
a((S'taskHandle'
p11489
(lp11490
S'TaskHandle'
p11491
aNtp11492
(S'channel'
p11493
(lp11494
S'char'
p11495
a(lp11496
I-1
aaNtp11497
(S'data'
p11498
(lp11499
S'uInt32'
p11500
aNtp11501
tp11502
tp11503
sS'DAQmxGetDONumLines'
p11504
((lp11505
S'int32'
p11506
ag34
a((S'taskHandle'
p11507
(lp11508
S'TaskHandle'
p11509
aNtp11510
(S'channel'
p11511
(lp11512
S'char'
p11513
a(lp11514
I-1
aaNtp11515
(S'data'
p11516
(lp11517
S'uInt32'
p11518
ag42
aNtp11519
tp11520
tp11521
sS'DAQmxSetAILossyLSBRemovalCompressedSampSize'
p11522
((lp11523
S'int32'
p11524
ag34
a((S'taskHandle'
p11525
(lp11526
S'TaskHandle'
p11527
aNtp11528
(S'channel'
p11529
(lp11530
S'char'
p11531
a(lp11532
I-1
aaNtp11533
(S'data'
p11534
(lp11535
S'uInt32'
p11536
aNtp11537
tp11538
tp11539
sS'DAQmxSetCITimestampInitialSeconds'
p11540
((lp11541
S'int32'
p11542
ag34
a((S'taskHandle'
p11543
(lp11544
S'TaskHandle'
p11545
aNtp11546
(S'channel'
p11547
(lp11548
S'char'
p11549
a(lp11550
I-1
aaNtp11551
(S'data'
p11552
(lp11553
S'uInt32'
p11554
aNtp11555
tp11556
tp11557
sS'DAQmxGetDigEdgeStartTrigDigFltrTimebaseRate'
p11558
((lp11559
S'int32'
p11560
ag34
a((S'taskHandle'
p11561
(lp11562
S'TaskHandle'
p11563
aNtp11564
(S'data'
p11565
(lp11566
S'float64'
p11567
ag42
aNtp11568
tp11569
tp11570
sS'DAQmxGetCOAutoIncrCnt'
p11571
((lp11572
S'int32'
p11573
ag34
a((S'taskHandle'
p11574
(lp11575
S'TaskHandle'
p11576
aNtp11577
(S'channel'
p11578
(lp11579
S'char'
p11580
a(lp11581
I-1
aaNtp11582
(S'data'
p11583
(lp11584
S'uInt32'
p11585
ag42
aNtp11586
tp11587
tp11588
sS'DAQmxSetDODataXferReqCond'
p11589
((lp11590
S'int32'
p11591
ag34
a((S'taskHandle'
p11592
(lp11593
S'TaskHandle'
p11594
aNtp11595
(S'channel'
p11596
(lp11597
S'char'
p11598
a(lp11599
I-1
aaNtp11600
(S'data'
p11601
(lp11602
S'int32'
p11603
aNtp11604
tp11605
tp11606
sS'DAQmxCfgAnlgWindowRefTrig'
p11607
((lp11608
S'int32'
p11609
ag34
a((S'taskHandle'
p11610
(lp11611
S'TaskHandle'
p11612
aNtp11613
(S'triggerSource'
p11614
(lp11615
S'char'
p11616
a(lp11617
I-1
aaNtp11618
(S'triggerWhen'
p11619
(lp11620
S'int32'
p11621
aNtp11622
(S'windowTop'
p11623
(lp11624
S'float64'
p11625
aNtp11626
(S'windowBottom'
p11627
(lp11628
S'float64'
p11629
aNtp11630
(S'pretriggerSamples'
p11631
(lp11632
S'uInt32'
p11633
aNtp11634
tp11635
tp11636
sS'DAQmxSetDigPatternRefTrigPattern'
p11637
((lp11638
S'int32'
p11639
ag34
a((S'taskHandle'
p11640
(lp11641
S'TaskHandle'
p11642
aNtp11643
(S'data'
p11644
(lp11645
S'char'
p11646
ag42
aNtp11647
tp11648
tp11649
sS'DAQmxResetExportedSyncPulseEventOutputTerm'
p11650
((lp11651
S'int32'
p11652
ag34
a((S'taskHandle'
p11653
(lp11654
S'TaskHandle'
p11655
aNtp11656
tp11657
tp11658
sS'DAQmxGetCIPulseWidthDigFltrEnable'
p11659
((lp11660
S'int32'
p11661
ag34
a((S'taskHandle'
p11662
(lp11663
S'TaskHandle'
p11664
aNtp11665
(S'channel'
p11666
(lp11667
S'char'
p11668
a(lp11669
I-1
aaNtp11670
(S'data'
p11671
(lp11672
S'bool32'
p11673
ag42
aNtp11674
tp11675
tp11676
sS'DAQmxGetDevPXIChassisNum'
p11677
((lp11678
S'int32'
p11679
ag34
a((S'device'
p11680
(lp11681
S'char'
p11682
a(lp11683
I-1
aaNtp11684
(S'data'
p11685
(lp11686
S'uInt32'
p11687
ag42
aNtp11688
tp11689
tp11690
sS'DAQmxGetSwitchChanMaxACCarryPwr'
p11691
((lp11692
S'int32'
p11693
ag34
a((S'switchChannelName'
p11694
(lp11695
S'char'
p11696
a(lp11697
I-1
aaNtp11698
(S'data'
p11699
(lp11700
S'float64'
p11701
ag42
aNtp11702
tp11703
tp11704
sS'DAQmxGetAIBridgeInitialVoltage'
p11705
((lp11706
S'int32'
p11707
ag34
a((S'taskHandle'
p11708
(lp11709
S'TaskHandle'
p11710
aNtp11711
(S'channel'
p11712
(lp11713
S'char'
p11714
a(lp11715
I-1
aaNtp11716
(S'data'
p11717
(lp11718
S'float64'
p11719
ag42
aNtp11720
tp11721
tp11722
sS'DAQmxSetAnlgLvlPauseTrigCoupling'
p11723
((lp11724
S'int32'
p11725
ag34
a((S'taskHandle'
p11726
(lp11727
S'TaskHandle'
p11728
aNtp11729
(S'data'
p11730
(lp11731
S'int32'
p11732
aNtp11733
tp11734
tp11735
sS'DAQmxResetCICountEdgesCountDirDigSyncEnable'
p11736
((lp11737
S'int32'
p11738
ag34
a((S'taskHandle'
p11739
(lp11740
S'TaskHandle'
p11741
aNtp11742
(S'channel'
p11743
(lp11744
S'char'
p11745
a(lp11746
I-1
aaNtp11747
tp11748
tp11749
sS'DAQmxResetSampClkRate'
p11750
((lp11751
S'int32'
p11752
ag34
a((S'taskHandle'
p11753
(lp11754
S'TaskHandle'
p11755
aNtp11756
tp11757
tp11758
sS'DAQmxGetAIRngLow'
p11759
((lp11760
S'int32'
p11761
ag34
a((S'taskHandle'
p11762
(lp11763
S'TaskHandle'
p11764
aNtp11765
(S'channel'
p11766
(lp11767
S'char'
p11768
a(lp11769
I-1
aaNtp11770
(S'data'
p11771
(lp11772
S'float64'
p11773
ag42
aNtp11774
tp11775
tp11776
sS'DAQmxResetDigLvlPauseTrigDigFltrMinPulseWidth'
p11777
((lp11778
S'int32'
p11779
ag34
a((S'taskHandle'
p11780
(lp11781
S'TaskHandle'
p11782
aNtp11783
tp11784
tp11785
sS'DAQmxResetWatchdogDOExpirState'
p11786
((lp11787
S'int32'
p11788
ag34
a((S'taskHandle'
p11789
(lp11790
S'TaskHandle'
p11791
aNtp11792
(S'channel'
p11793
(lp11794
S'char'
p11795
a(lp11796
I-1
aaNtp11797
tp11798
tp11799
sS'DAQmxGetAODACRefConnToGnd'
p11800
((lp11801
S'int32'
p11802
ag34
a((S'taskHandle'
p11803
(lp11804
S'TaskHandle'
p11805
aNtp11806
(S'channel'
p11807
(lp11808
S'char'
p11809
a(lp11810
I-1
aaNtp11811
(S'data'
p11812
(lp11813
S'bool32'
p11814
ag42
aNtp11815
tp11816
tp11817
sS'DAQmxSetAIChanCalScaleType'
p11818
((lp11819
S'int32'
p11820
ag34
a((S'taskHandle'
p11821
(lp11822
S'TaskHandle'
p11823
aNtp11824
(S'channel'
p11825
(lp11826
S'char'
p11827
a(lp11828
I-1
aaNtp11829
(S'data'
p11830
(lp11831
S'int32'
p11832
aNtp11833
tp11834
tp11835
sS'DAQmxGetSelfCalSupported'
p11836
((lp11837
S'int32'
p11838
ag34
a((S'deviceName'
p11839
(lp11840
S'char'
p11841
a(lp11842
I-1
aaNtp11843
(S'data'
p11844
(lp11845
S'bool32'
p11846
ag42
aNtp11847
tp11848
tp11849
sS'DAQmxGetPersistedTaskAllowInteractiveDeletion'
p11850
((lp11851
S'int32'
p11852
ag34
a((S'taskName'
p11853
(lp11854
S'char'
p11855
a(lp11856
I-1
aaNtp11857
(S'data'
p11858
(lp11859
S'bool32'
p11860
ag42
aNtp11861
tp11862
tp11863
sS'DAQmxGetCOCtrTimebaseDigFltrTimebaseRate'
p11864
((lp11865
S'int32'
p11866
ag34
a((S'taskHandle'
p11867
(lp11868
S'TaskHandle'
p11869
aNtp11870
(S'channel'
p11871
(lp11872
S'char'
p11873
a(lp11874
I-1
aaNtp11875
(S'data'
p11876
(lp11877
S'float64'
p11878
ag42
aNtp11879
tp11880
tp11881
sS'DAQmxResetCOCtrTimebaseDigFltrMinPulseWidth'
p11882
((lp11883
S'int32'
p11884
ag34
a((S'taskHandle'
p11885
(lp11886
S'TaskHandle'
p11887
aNtp11888
(S'channel'
p11889
(lp11890
S'char'
p11891
a(lp11892
I-1
aaNtp11893
tp11894
tp11895
sS'DAQmxGetAODACOffsetExtSrc'
p11896
((lp11897
S'int32'
p11898
ag34
a((S'taskHandle'
p11899
(lp11900
S'TaskHandle'
p11901
aNtp11902
(S'channel'
p11903
(lp11904
S'char'
p11905
a(lp11906
I-1
aaNtp11907
(S'data'
p11908
(lp11909
S'char'
p11910
ag42
aNtp11911
(S'bufferSize'
p11912
(lp11913
S'uInt32'
p11914
aNtp11915
tp11916
tp11917
sS'DAQmxResetAIExcitDCorAC'
p11918
((lp11919
S'int32'
p11920
ag34
a((S'taskHandle'
p11921
(lp11922
S'TaskHandle'
p11923
aNtp11924
(S'channel'
p11925
(lp11926
S'char'
p11927
a(lp11928
I-1
aaNtp11929
tp11930
tp11931
sS'DAQmxGetCOCtrTimebaseRate'
p11932
((lp11933
S'int32'
p11934
ag34
a((S'taskHandle'
p11935
(lp11936
S'TaskHandle'
p11937
aNtp11938
(S'channel'
p11939
(lp11940
S'char'
p11941
a(lp11942
I-1
aaNtp11943
(S'data'
p11944
(lp11945
S'float64'
p11946
ag42
aNtp11947
tp11948
tp11949
sS'DAQmxSetCOPulseIdleState'
p11950
((lp11951
S'int32'
p11952
ag34
a((S'taskHandle'
p11953
(lp11954
S'TaskHandle'
p11955
aNtp11956
(S'channel'
p11957
(lp11958
S'char'
p11959
a(lp11960
I-1
aaNtp11961
(S'data'
p11962
(lp11963
S'int32'
p11964
aNtp11965
tp11966
tp11967
sS'DAQmxGetSwitchChanBandwidth'
p11968
((lp11969
S'int32'
p11970
ag34
a((S'switchChannelName'
p11971
(lp11972
S'char'
p11973
a(lp11974
I-1
aaNtp11975
(S'data'
p11976
(lp11977
S'float64'
p11978
ag42
aNtp11979
tp11980
tp11981
sS'DAQmxSetAIRTDType'
p11982
((lp11983
S'int32'
p11984
ag34
a((S'taskHandle'
p11985
(lp11986
S'TaskHandle'
p11987
aNtp11988
(S'channel'
p11989
(lp11990
S'char'
p11991
a(lp11992
I-1
aaNtp11993
(S'data'
p11994
(lp11995
S'int32'
p11996
aNtp11997
tp11998
tp11999
sS'DAQmxSetAIChanCalEnableCal'
p12000
((lp12001
S'int32'
p12002
ag34
a((S'taskHandle'
p12003
(lp12004
S'TaskHandle'
p12005
aNtp12006
(S'channel'
p12007
(lp12008
S'char'
p12009
a(lp12010
I-1
aaNtp12011
(S'data'
p12012
(lp12013
S'bool32'
p12014
aNtp12015
tp12016
tp12017
sS'DAQmxGetAIBridgeShuntCalSelect'
p12018
((lp12019
S'int32'
p12020
ag34
a((S'taskHandle'
p12021
(lp12022
S'TaskHandle'
p12023
aNtp12024
(S'channel'
p12025
(lp12026
S'char'
p12027
a(lp12028
I-1
aaNtp12029
(S'data'
p12030
(lp12031
S'int32'
p12032
ag42
aNtp12033
tp12034
tp12035
sS'DAQmxGetDigEdgeWatchdogExpirTrigSrc'
p12036
((lp12037
S'int32'
p12038
ag34
a((S'taskHandle'
p12039
(lp12040
S'TaskHandle'
p12041
aNtp12042
(S'data'
p12043
(lp12044
S'char'
p12045
ag42
aNtp12046
(S'bufferSize'
p12047
(lp12048
S'uInt32'
p12049
aNtp12050
tp12051
tp12052
sS'DAQmxGetHshkSampleInputDataWhen'
p12053
((lp12054
S'int32'
p12055
ag34
a((S'taskHandle'
p12056
(lp12057
S'TaskHandle'
p12058
aNtp12059
(S'data'
p12060
(lp12061
S'int32'
p12062
ag42
aNtp12063
tp12064
tp12065
sS'DAQmxGetInterlockedHshkTrigAssertedLvl'
p12066
((lp12067
S'int32'
p12068
ag34
a((S'taskHandle'
p12069
(lp12070
S'TaskHandle'
p12071
aNtp12072
(S'data'
p12073
(lp12074
S'int32'
p12075
ag42
aNtp12076
tp12077
tp12078
sS'DAQmxGetCIEncoderZInputDigSyncEnable'
p12079
((lp12080
S'int32'
p12081
ag34
a((S'taskHandle'
p12082
(lp12083
S'TaskHandle'
p12084
aNtp12085
(S'channel'
p12086
(lp12087
S'char'
p12088
a(lp12089
I-1
aaNtp12090
(S'data'
p12091
(lp12092
S'bool32'
p12093
ag42
aNtp12094
tp12095
tp12096
sS'DAQmxResetAnlgWinRefTrigTop'
p12097
((lp12098
S'int32'
p12099
ag34
a((S'taskHandle'
p12100
(lp12101
S'TaskHandle'
p12102
aNtp12103
tp12104
tp12105
sS'DAQmxGetAIExcitSrc'
p12106
((lp12107
S'int32'
p12108
ag34
a((S'taskHandle'
p12109
(lp12110
S'TaskHandle'
p12111
aNtp12112
(S'channel'
p12113
(lp12114
S'char'
p12115
a(lp12116
I-1
aaNtp12117
(S'data'
p12118
(lp12119
S'int32'
p12120
ag42
aNtp12121
tp12122
tp12123
sS'DAQmxSetAdvTrigType'
p12124
((lp12125
S'int32'
p12126
ag34
a((S'taskHandle'
p12127
(lp12128
S'TaskHandle'
p12129
aNtp12130
(S'data'
p12131
(lp12132
S'int32'
p12133
aNtp12134
tp12135
tp12136
sS'DAQmxResetAILeadWireResistance'
p12137
((lp12138
S'int32'
p12139
ag34
a((S'taskHandle'
p12140
(lp12141
S'TaskHandle'
p12142
aNtp12143
(S'channel'
p12144
(lp12145
S'char'
p12146
a(lp12147
I-1
aaNtp12148
tp12149
tp12150
sS'DAQmxResetDITristate'
p12151
((lp12152
S'int32'
p12153
ag34
a((S'taskHandle'
p12154
(lp12155
S'TaskHandle'
p12156
aNtp12157
(S'channel'
p12158
(lp12159
S'char'
p12160
a(lp12161
I-1
aaNtp12162
tp12163
tp12164
sS'DAQmxSetAODACRefConnToGnd'
p12165
((lp12166
S'int32'
p12167
ag34
a((S'taskHandle'
p12168
(lp12169
S'TaskHandle'
p12170
aNtp12171
(S'channel'
p12172
(lp12173
S'char'
p12174
a(lp12175
I-1
aaNtp12176
(S'data'
p12177
(lp12178
S'bool32'
p12179
aNtp12180
tp12181
tp12182
sS'DAQmxResetCIEncoderZIndexEnable'
p12183
((lp12184
S'int32'
p12185
ag34
a((S'taskHandle'
p12186
(lp12187
S'TaskHandle'
p12188
aNtp12189
(S'channel'
p12190
(lp12191
S'char'
p12192
a(lp12193
I-1
aaNtp12194
tp12195
tp12196
sS'DAQmxCfgDigPatternRefTrig'
p12197
((lp12198
S'int32'
p12199
ag34
a((S'taskHandle'
p12200
(lp12201
S'TaskHandle'
p12202
aNtp12203
(S'triggerSource'
p12204
(lp12205
S'char'
p12206
a(lp12207
I-1
aaNtp12208
(S'triggerPattern'
p12209
(lp12210
S'char'
p12211
a(lp12212
I-1
aaNtp12213
(S'triggerWhen'
p12214
(lp12215
S'int32'
p12216
aNtp12217
(S'pretriggerSamples'
p12218
(lp12219
S'uInt32'
p12220
aNtp12221
tp12222
tp12223
sS'DAQmxResetWriteSleepTime'
p12224
((lp12225
S'int32'
p12226
ag34
a((S'taskHandle'
p12227
(lp12228
S'TaskHandle'
p12229
aNtp12230
tp12231
tp12232
sS'DAQmxResetSampClkTimebaseRate'
p12233
((lp12234
S'int32'
p12235
ag34
a((S'taskHandle'
p12236
(lp12237
S'TaskHandle'
p12238
aNtp12239
tp12240
tp12241
sS'DAQmxResetAnlgEdgeStartTrigSlope'
p12242
((lp12243
S'int32'
p12244
ag34
a((S'taskHandle'
p12245
(lp12246
S'TaskHandle'
p12247
aNtp12248
tp12249
tp12250
sS'DAQmxSetAIResistanceUnits'
p12251
((lp12252
S'int32'
p12253
ag34
a((S'taskHandle'
p12254
(lp12255
S'TaskHandle'
p12256
aNtp12257
(S'channel'
p12258
(lp12259
S'char'
p12260
a(lp12261
I-1
aaNtp12262
(S'data'
p12263
(lp12264
S'int32'
p12265
aNtp12266
tp12267
tp12268
sS'DAQmxGetAIDataXferMech'
p12269
((lp12270
S'int32'
p12271
ag34
a((S'taskHandle'
p12272
(lp12273
S'TaskHandle'
p12274
aNtp12275
(S'channel'
p12276
(lp12277
S'char'
p12278
a(lp12279
I-1
aaNtp12280
(S'data'
p12281
(lp12282
S'int32'
p12283
ag42
aNtp12284
tp12285
tp12286
sS'DAQmxResetDigLvlPauseTrigDigFltrTimebaseSrc'
p12287
((lp12288
S'int32'
p12289
ag34
a((S'taskHandle'
p12290
(lp12291
S'TaskHandle'
p12292
aNtp12293
tp12294
tp12295
sS'DAQmxGetAICurrentShuntLoc'
p12296
((lp12297
S'int32'
p12298
ag34
a((S'taskHandle'
p12299
(lp12300
S'TaskHandle'
p12301
aNtp12302
(S'channel'
p12303
(lp12304
S'char'
p12305
a(lp12306
I-1
aaNtp12307
(S'data'
p12308
(lp12309
S'int32'
p12310
ag42
aNtp12311
tp12312
tp12313
sS'DAQmxGetCITwoEdgeSepSecondDigFltrMinPulseWidth'
p12314
((lp12315
S'int32'
p12316
ag34
a((S'taskHandle'
p12317
(lp12318
S'TaskHandle'
p12319
aNtp12320
(S'channel'
p12321
(lp12322
S'char'
p12323
a(lp12324
I-1
aaNtp12325
(S'data'
p12326
(lp12327
S'float64'
p12328
ag42
aNtp12329
tp12330
tp12331
sS'DAQmxGetAIThrmstrC'
p12332
((lp12333
S'int32'
p12334
ag34
a((S'taskHandle'
p12335
(lp12336
S'TaskHandle'
p12337
aNtp12338
(S'channel'
p12339
(lp12340
S'char'
p12341
a(lp12342
I-1
aaNtp12343
(S'data'
p12344
(lp12345
S'float64'
p12346
ag42
aNtp12347
tp12348
tp12349
sS'DAQmxGetDevBusType'
p12350
((lp12351
S'int32'
p12352
ag34
a((S'device'
p12353
(lp12354
S'char'
p12355
a(lp12356
I-1
aaNtp12357
(S'data'
p12358
(lp12359
S'int32'
p12360
ag42
aNtp12361
tp12362
tp12363
sS'DAQmxSetReadSleepTime'
p12364
((lp12365
S'int32'
p12366
ag34
a((S'taskHandle'
p12367
(lp12368
S'TaskHandle'
p12369
aNtp12370
(S'data'
p12371
(lp12372
S'float64'
p12373
aNtp12374
tp12375
tp12376
sS'DAQmxGetCIAngEncoderUnits'
p12377
((lp12378
S'int32'
p12379
ag34
a((S'taskHandle'
p12380
(lp12381
S'TaskHandle'
p12382
aNtp12383
(S'channel'
p12384
(lp12385
S'char'
p12386
a(lp12387
I-1
aaNtp12388
(S'data'
p12389
(lp12390
S'int32'
p12391
ag42
aNtp12392
tp12393
tp12394
sS'DAQmxGetRefTrigType'
p12395
((lp12396
S'int32'
p12397
ag34
a((S'taskHandle'
p12398
(lp12399
S'TaskHandle'
p12400
aNtp12401
(S'data'
p12402
(lp12403
S'int32'
p12404
ag42
aNtp12405
tp12406
tp12407
sS'DAQmxGetSwitchDevSettled'
p12408
((lp12409
S'int32'
p12410
ag34
a((S'deviceName'
p12411
(lp12412
S'char'
p12413
a(lp12414
I-1
aaNtp12415
(S'data'
p12416
(lp12417
S'bool32'
p12418
ag42
aNtp12419
tp12420
tp12421
sS'DAQmxResetCICountEdgesCountDirDigFltrTimebaseRate'
p12422
((lp12423
S'int32'
p12424
ag34
a((S'taskHandle'
p12425
(lp12426
S'TaskHandle'
p12427
aNtp12428
(S'channel'
p12429
(lp12430
S'char'
p12431
a(lp12432
I-1
aaNtp12433
tp12434
tp12435
sS'DAQmxResetAISoundPressureUnits'
p12436
((lp12437
S'int32'
p12438
ag34
a((S'taskHandle'
p12439
(lp12440
S'TaskHandle'
p12441
aNtp12442
(S'channel'
p12443
(lp12444
S'char'
p12445
a(lp12446
I-1
aaNtp12447
tp12448
tp12449
sS'DAQmxSetAILowpassCutoffFreq'
p12450
((lp12451
S'int32'
p12452
ag34
a((S'taskHandle'
p12453
(lp12454
S'TaskHandle'
p12455
aNtp12456
(S'channel'
p12457
(lp12458
S'char'
p12459
a(lp12460
I-1
aaNtp12461
(S'data'
p12462
(lp12463
S'float64'
p12464
aNtp12465
tp12466
tp12467
sS'DAQmxResetAIDataXferReqCond'
p12468
((lp12469
S'int32'
p12470
ag34
a((S'taskHandle'
p12471
(lp12472
S'TaskHandle'
p12473
aNtp12474
(S'channel'
p12475
(lp12476
S'char'
p12477
a(lp12478
I-1
aaNtp12479
tp12480
tp12481
sS'DAQmxGetInterlockedHshkTrigSrc'
p12482
((lp12483
S'int32'
p12484
ag34
a((S'taskHandle'
p12485
(lp12486
S'TaskHandle'
p12487
aNtp12488
(S'data'
p12489
(lp12490
S'char'
p12491
ag42
aNtp12492
(S'bufferSize'
p12493
(lp12494
S'uInt32'
p12495
aNtp12496
tp12497
tp12498
sS'DAQmxGetExportedSampClkTimebaseOutputTerm'
p12499
((lp12500
S'int32'
p12501
ag34
a((S'taskHandle'
p12502
(lp12503
S'TaskHandle'
p12504
aNtp12505
(S'data'
p12506
(lp12507
S'char'
p12508
ag42
aNtp12509
(S'bufferSize'
p12510
(lp12511
S'uInt32'
p12512
aNtp12513
tp12514
tp12515
sS'DAQmxSetPauseTrigType'
p12516
((lp12517
S'int32'
p12518
ag34
a((S'taskHandle'
p12519
(lp12520
S'TaskHandle'
p12521
aNtp12522
(S'data'
p12523
(lp12524
S'int32'
p12525
aNtp12526
tp12527
tp12528
sS'DAQmxGetCIGPSSyncSrc'
p12529
((lp12530
S'int32'
p12531
ag34
a((S'taskHandle'
p12532
(lp12533
S'TaskHandle'
p12534
aNtp12535
(S'channel'
p12536
(lp12537
S'char'
p12538
a(lp12539
I-1
aaNtp12540
(S'data'
p12541
(lp12542
S'char'
p12543
ag42
aNtp12544
(S'bufferSize'
p12545
(lp12546
S'uInt32'
p12547
aNtp12548
tp12549
tp12550
sS'DAQmxSetBufOutputBufSize'
p12551
((lp12552
S'int32'
p12553
ag34
a((S'taskHandle'
p12554
(lp12555
S'TaskHandle'
p12556
aNtp12557
(S'data'
p12558
(lp12559
S'uInt32'
p12560
aNtp12561
tp12562
tp12563
sS'DAQmxAdjust1520Cal'
p12564
((lp12565
S'int32'
p12566
ag34
a((S'calHandle'
p12567
(lp12568
S'uInt32'
p12569
aNtp12570
(S'refVoltage'
p12571
(lp12572
S'float64'
p12573
aNtp12574
(S'measOutput'
p12575
(lp12576
S'float64'
p12577
aNtp12578
tp12579
tp12580
sS'DAQmxResetExportedWatchdogExpiredEventOutputTerm'
p12581
((lp12582
S'int32'
p12583
ag34
a((S'taskHandle'
p12584
(lp12585
S'TaskHandle'
p12586
aNtp12587
tp12588
tp12589
sS'DAQmxResetWatchdogAttribute'
p12590
((lp12591
S'int32'
p12592
ag34
a((S'taskHandle'
p12593
(lp12594
S'TaskHandle'
p12595
aNtp12596
(S'lines'
p12597
(lp12598
S'char'
p12599
a(lp12600
I-1
aaNtp12601
(S'attribute'
p12602
(lp12603
S'int32'
p12604
aNtp12605
tp12606
tp12607
sS'DAQmxSetAIDitherEnable'
p12608
((lp12609
S'int32'
p12610
ag34
a((S'taskHandle'
p12611
(lp12612
S'TaskHandle'
p12613
aNtp12614
(S'channel'
p12615
(lp12616
S'char'
p12617
a(lp12618
I-1
aaNtp12619
(S'data'
p12620
(lp12621
S'bool32'
p12622
aNtp12623
tp12624
tp12625
sS'DAQmxCreateMapScale'
p12626
((lp12627
S'int32'
p12628
ag34
a((S'name'
p12629
(lp12630
S'char'
p12631
a(lp12632
I-1
aaNtp12633
(S'prescaledMin'
p12634
(lp12635
S'float64'
p12636
aNtp12637
(S'prescaledMax'
p12638
(lp12639
S'float64'
p12640
aNtp12641
(S'scaledMin'
p12642
(lp12643
S'float64'
p12644
aNtp12645
(S'scaledMax'
p12646
(lp12647
S'float64'
p12648
aNtp12649
(S'preScaledUnits'
p12650
(lp12651
S'int32'
p12652
aNtp12653
(S'scaledUnits'
p12654
(lp12655
S'char'
p12656
a(lp12657
I-1
aaNtp12658
tp12659
tp12660
sS'DAQmxGetCOCtrTimebaseDigFltrTimebaseSrc'
p12661
((lp12662
S'int32'
p12663
ag34
a((S'taskHandle'
p12664
(lp12665
S'TaskHandle'
p12666
aNtp12667
(S'channel'
p12668
(lp12669
S'char'
p12670
a(lp12671
I-1
aaNtp12672
(S'data'
p12673
(lp12674
S'char'
p12675
ag42
aNtp12676
(S'bufferSize'
p12677
(lp12678
S'uInt32'
p12679
aNtp12680
tp12681
tp12682
sS'DAQmxGetSampClkActiveEdge'
p12683
((lp12684
S'int32'
p12685
ag34
a((S'taskHandle'
p12686
(lp12687
S'TaskHandle'
p12688
aNtp12689
(S'data'
p12690
(lp12691
S'int32'
p12692
ag42
aNtp12693
tp12694
tp12695
sS'DAQmxResetCIPeriodUnits'
p12696
((lp12697
S'int32'
p12698
ag34
a((S'taskHandle'
p12699
(lp12700
S'TaskHandle'
p12701
aNtp12702
(S'channel'
p12703
(lp12704
S'char'
p12705
a(lp12706
I-1
aaNtp12707
tp12708
tp12709
sS'DAQmxGetAIMin'
p12710
((lp12711
S'int32'
p12712
ag34
a((S'taskHandle'
p12713
(lp12714
S'TaskHandle'
p12715
aNtp12716
(S'channel'
p12717
(lp12718
S'char'
p12719
a(lp12720
I-1
aaNtp12721
(S'data'
p12722
(lp12723
S'float64'
p12724
ag42
aNtp12725
tp12726
tp12727
sS'DAQmxSetAnlgEdgeRefTrigHyst'
p12728
((lp12729
S'int32'
p12730
ag34
a((S'taskHandle'
p12731
(lp12732
S'TaskHandle'
p12733
aNtp12734
(S'data'
p12735
(lp12736
S'float64'
p12737
aNtp12738
tp12739
tp12740
sS'DAQmxResetCIPeriodDiv'
p12741
((lp12742
S'int32'
p12743
ag34
a((S'taskHandle'
p12744
(lp12745
S'TaskHandle'
p12746
aNtp12747
(S'channel'
p12748
(lp12749
S'char'
p12750
a(lp12751
I-1
aaNtp12752
tp12753
tp12754
sS'DAQmxResetSwitchScanRepeatMode'
p12755
((lp12756
S'int32'
p12757
ag34
a((S'taskHandle'
p12758
(lp12759
S'TaskHandle'
p12760
aNtp12761
tp12762
tp12763
sS'DAQmxSetCITwoEdgeSepSecondDigFltrEnable'
p12764
((lp12765
S'int32'
p12766
ag34
a((S'taskHandle'
p12767
(lp12768
S'TaskHandle'
p12769
aNtp12770
(S'channel'
p12771
(lp12772
S'char'
p12773
a(lp12774
I-1
aaNtp12775
(S'data'
p12776
(lp12777
S'bool32'
p12778
aNtp12779
tp12780
tp12781
sS'DAQmxSetExportedSampClkTimebaseOutputTerm'
p12782
((lp12783
S'int32'
p12784
ag34
a((S'taskHandle'
p12785
(lp12786
S'TaskHandle'
p12787
aNtp12788
(S'data'
p12789
(lp12790
S'char'
p12791
ag42
aNtp12792
tp12793
tp12794
sS'DAQmxGetAIConvSrc'
p12795
((lp12796
S'int32'
p12797
ag34
a((S'taskHandle'
p12798
(lp12799
S'TaskHandle'
p12800
aNtp12801
(S'data'
p12802
(lp12803
S'char'
p12804
ag42
aNtp12805
(S'bufferSize'
p12806
(lp12807
S'uInt32'
p12808
aNtp12809
tp12810
tp12811
sS'DAQmxSetCIMax'
p12812
((lp12813
S'int32'
p12814
ag34
a((S'taskHandle'
p12815
(lp12816
S'TaskHandle'
p12817
aNtp12818
(S'channel'
p12819
(lp12820
S'char'
p12821
a(lp12822
I-1
aaNtp12823
(S'data'
p12824
(lp12825
S'float64'
p12826
aNtp12827
tp12828
tp12829
sS'DAQmxResetAIMemMapEnable'
p12830
((lp12831
S'int32'
p12832
ag34
a((S'taskHandle'
p12833
(lp12834
S'TaskHandle'
p12835
aNtp12836
(S'channel'
p12837
(lp12838
S'char'
p12839
a(lp12840
I-1
aaNtp12841
tp12842
tp12843
sS'DAQmxSetCITwoEdgeSepSecondDigFltrMinPulseWidth'
p12844
((lp12845
S'int32'
p12846
ag34
a((S'taskHandle'
p12847
(lp12848
S'TaskHandle'
p12849
aNtp12850
(S'channel'
p12851
(lp12852
S'char'
p12853
a(lp12854
I-1
aaNtp12855
(S'data'
p12856
(lp12857
S'float64'
p12858
aNtp12859
tp12860
tp12861
sS'DAQmxResetDigEdgeArmStartTrigEdge'
p12862
((lp12863
S'int32'
p12864
ag34
a((S'taskHandle'
p12865
(lp12866
S'TaskHandle'
p12867
aNtp12868
tp12869
tp12870
sS'DAQmxSetCIPulseWidthDigFltrMinPulseWidth'
p12871
((lp12872
S'int32'
p12873
ag34
a((S'taskHandle'
p12874
(lp12875
S'TaskHandle'
p12876
aNtp12877
(S'channel'
p12878
(lp12879
S'char'
p12880
a(lp12881
I-1
aaNtp12882
(S'data'
p12883
(lp12884
S'float64'
p12885
aNtp12886
tp12887
tp12888
sS'DAQmxSetCISemiPeriodUnits'
p12889
((lp12890
S'int32'
p12891
ag34
a((S'taskHandle'
p12892
(lp12893
S'TaskHandle'
p12894
aNtp12895
(S'channel'
p12896
(lp12897
S'char'
p12898
a(lp12899
I-1
aaNtp12900
(S'data'
p12901
(lp12902
S'int32'
p12903
aNtp12904
tp12905
tp12906
sS'DAQmxResetAISoundPressureMaxSoundPressureLvl'
p12907
((lp12908
S'int32'
p12909
ag34
a((S'taskHandle'
p12910
(lp12911
S'TaskHandle'
p12912
aNtp12913
(S'channel'
p12914
(lp12915
S'char'
p12916
a(lp12917
I-1
aaNtp12918
tp12919
tp12920
sS'DAQmxGetSwitchDevSwitchChanList'
p12921
((lp12922
S'int32'
p12923
ag34
a((S'deviceName'
p12924
(lp12925
S'char'
p12926
a(lp12927
I-1
aaNtp12928
(S'data'
p12929
(lp12930
S'char'
p12931
ag42
aNtp12932
(S'bufferSize'
p12933
(lp12934
S'uInt32'
p12935
aNtp12936
tp12937
tp12938
sS'DAQmxGetCIEncoderAInputTerm'
p12939
((lp12940
S'int32'
p12941
ag34
a((S'taskHandle'
p12942
(lp12943
S'TaskHandle'
p12944
aNtp12945
(S'channel'
p12946
(lp12947
S'char'
p12948
a(lp12949
I-1
aaNtp12950
(S'data'
p12951
(lp12952
S'char'
p12953
ag42
aNtp12954
(S'bufferSize'
p12955
(lp12956
S'uInt32'
p12957
aNtp12958
tp12959
tp12960
sS'DAQmxGetAnlgEdgeRefTrigCoupling'
p12961
((lp12962
S'int32'
p12963
ag34
a((S'taskHandle'
p12964
(lp12965
S'TaskHandle'
p12966
aNtp12967
(S'data'
p12968
(lp12969
S'int32'
p12970
ag42
aNtp12971
tp12972
tp12973
sS'DAQmxResetAILVDTUnits'
p12974
((lp12975
S'int32'
p12976
ag34
a((S'taskHandle'
p12977
(lp12978
S'TaskHandle'
p12979
aNtp12980
(S'channel'
p12981
(lp12982
S'char'
p12983
a(lp12984
I-1
aaNtp12985
tp12986
tp12987
sS'DAQmxResetCIEncoderBInputDigFltrEnable'
p12988
((lp12989
S'int32'
p12990
ag34
a((S'taskHandle'
p12991
(lp12992
S'TaskHandle'
p12993
aNtp12994
(S'channel'
p12995
(lp12996
S'char'
p12997
a(lp12998
I-1
aaNtp12999
tp13000
tp13001
sS'DAQmxGetScaleMapScaledMin'
p13002
((lp13003
S'int32'
p13004
ag34
a((S'scaleName'
p13005
(lp13006
S'char'
p13007
a(lp13008
I-1
aaNtp13009
(S'data'
p13010
(lp13011
S'float64'
p13012
ag42
aNtp13013
tp13014
tp13015
sS'DAQmxGetReadTotalSampPerChanAcquired'
p13016
((lp13017
S'int32'
p13018
ag34
a((S'taskHandle'
p13019
(lp13020
S'TaskHandle'
p13021
aNtp13022
(S'data'
p13023
(lp13024
S'uInt64'
p13025
ag42
aNtp13026
tp13027
tp13028
sS'DAQmxSetWriteSleepTime'
p13029
((lp13030
S'int32'
p13031
ag34
a((S'taskHandle'
p13032
(lp13033
S'TaskHandle'
p13034
aNtp13035
(S'data'
p13036
(lp13037
S'float64'
p13038
aNtp13039
tp13040
tp13041
sS'DAQmxCreateTEDSAIStrainGageChan'
p13042
((lp13043
S'int32'
p13044
ag34
a((S'taskHandle'
p13045
(lp13046
S'TaskHandle'
p13047
aNtp13048
(S'physicalChannel'
p13049
(lp13050
S'char'
p13051
a(lp13052
I-1
aaNtp13053
(S'nameToAssignToChannel'
p13054
(lp13055
S'char'
p13056
a(lp13057
I-1
aaNtp13058
(S'minVal'
p13059
(lp13060
S'float64'
p13061
aNtp13062
(S'maxVal'
p13063
(lp13064
S'float64'
p13065
aNtp13066
(S'units'
p13067
(lp13068
S'int32'
p13069
aNtp13070
(S'voltageExcitSource'
p13071
(lp13072
S'int32'
p13073
aNtp13074
(S'voltageExcitVal'
p13075
(lp13076
S'float64'
p13077
aNtp13078
(S'initialBridgeVoltage'
p13079
(lp13080
S'float64'
p13081
aNtp13082
(S'leadWireResistance'
p13083
(lp13084
S'float64'
p13085
aNtp13086
(S'customScaleName'
p13087
(lp13088
S'char'
p13089
a(lp13090
I-1
aaNtp13091
tp13092
tp13093
sS'DAQmxGetAOIdleOutputBehavior'
p13094
((lp13095
S'int32'
p13096
ag34
a((S'taskHandle'
p13097
(lp13098
S'TaskHandle'
p13099
aNtp13100
(S'channel'
p13101
(lp13102
S'char'
p13103
a(lp13104
I-1
aaNtp13105
(S'data'
p13106
(lp13107
S'int32'
p13108
ag42
aNtp13109
tp13110
tp13111
sS'DAQmxSetAOResolutionUnits'
p13112
((lp13113
S'int32'
p13114
ag34
a((S'taskHandle'
p13115
(lp13116
S'TaskHandle'
p13117
aNtp13118
(S'channel'
p13119
(lp13120
S'char'
p13121
a(lp13122
I-1
aaNtp13123
(S'data'
p13124
(lp13125
S'int32'
p13126
aNtp13127
tp13128
tp13129
sS'DAQmxGetAIRVDTUnits'
p13130
((lp13131
S'int32'
p13132
ag34
a((S'taskHandle'
p13133
(lp13134
S'TaskHandle'
p13135
aNtp13136
(S'channel'
p13137
(lp13138
S'char'
p13139
a(lp13140
I-1
aaNtp13141
(S'data'
p13142
(lp13143
S'int32'
p13144
ag42
aNtp13145
tp13146
tp13147
sS'DAQmxGetAIExcitVoltageOrCurrent'
p13148
((lp13149
S'int32'
p13150
ag34
a((S'taskHandle'
p13151
(lp13152
S'TaskHandle'
p13153
aNtp13154
(S'channel'
p13155
(lp13156
S'char'
p13157
a(lp13158
I-1
aaNtp13159
(S'data'
p13160
(lp13161
S'int32'
p13162
ag42
aNtp13163
tp13164
tp13165
sS'DAQmxResetAIResistanceUnits'
p13166
((lp13167
S'int32'
p13168
ag34
a((S'taskHandle'
p13169
(lp13170
S'TaskHandle'
p13171
aNtp13172
(S'channel'
p13173
(lp13174
S'char'
p13175
a(lp13176
I-1
aaNtp13177
tp13178
tp13179
sS'DAQmxSetCICountEdgesDir'
p13180
((lp13181
S'int32'
p13182
ag34
a((S'taskHandle'
p13183
(lp13184
S'TaskHandle'
p13185
aNtp13186
(S'channel'
p13187
(lp13188
S'char'
p13189
a(lp13190
I-1
aaNtp13191
(S'data'
p13192
(lp13193
S'int32'
p13194
aNtp13195
tp13196
tp13197
sS'DAQmxResetAIBridgeCfg'
p13198
((lp13199
S'int32'
p13200
ag34
a((S'taskHandle'
p13201
(lp13202
S'TaskHandle'
p13203
aNtp13204
(S'channel'
p13205
(lp13206
S'char'
p13207
a(lp13208
I-1
aaNtp13209
tp13210
tp13211
sS'DAQmxGetAILeadWireResistance'
p13212
((lp13213
S'int32'
p13214
ag34
a((S'taskHandle'
p13215
(lp13216
S'TaskHandle'
p13217
aNtp13218
(S'channel'
p13219
(lp13220
S'char'
p13221
a(lp13222
I-1
aaNtp13223
(S'data'
p13224
(lp13225
S'float64'
p13226
ag42
aNtp13227
tp13228
tp13229
sS'DAQmxResetExportedHshkEventInterlockedAssertOnStart'
p13230
((lp13231
S'int32'
p13232
ag34
a((S'taskHandle'
p13233
(lp13234
S'TaskHandle'
p13235
aNtp13236
tp13237
tp13238
sS'DAQmxAdjustDSAAICal'
p13239
((lp13240
S'int32'
p13241
ag34
a((S'calHandle'
p13242
(lp13243
S'uInt32'
p13244
aNtp13245
(S'referenceVoltage'
p13246
(lp13247
S'float64'
p13248
aNtp13249
tp13250
tp13251
sS'DAQmxResetCOPulseFreq'
p13252
((lp13253
S'int32'
p13254
ag34
a((S'taskHandle'
p13255
(lp13256
S'TaskHandle'
p13257
aNtp13258
(S'channel'
p13259
(lp13260
S'char'
p13261
a(lp13262
I-1
aaNtp13263
tp13264
tp13265
sS'DAQmxGetDigEdgeArmStartTrigDigFltrMinPulseWidth'
p13266
((lp13267
S'int32'
p13268
ag34
a((S'taskHandle'
p13269
(lp13270
S'TaskHandle'
p13271
aNtp13272
(S'data'
p13273
(lp13274
S'float64'
p13275
ag42
aNtp13276
tp13277
tp13278
sS'DAQmxGetExported20MHzTimebaseOutputTerm'
p13279
((lp13280
S'int32'
p13281
ag34
a((S'taskHandle'
p13282
(lp13283
S'TaskHandle'
p13284
aNtp13285
(S'data'
p13286
(lp13287
S'char'
p13288
ag42
aNtp13289
(S'bufferSize'
p13290
(lp13291
S'uInt32'
p13292
aNtp13293
tp13294
tp13295
sS'DAQmxGetDigEdgeArmStartTrigDigFltrTimebaseSrc'
p13296
((lp13297
S'int32'
p13298
ag34
a((S'taskHandle'
p13299
(lp13300
S'TaskHandle'
p13301
aNtp13302
(S'data'
p13303
(lp13304
S'char'
p13305
ag42
aNtp13306
(S'bufferSize'
p13307
(lp13308
S'uInt32'
p13309
aNtp13310
tp13311
tp13312
sS'DAQmxResetCIPulseWidthDigFltrTimebaseRate'
p13313
((lp13314
S'int32'
p13315
ag34
a((S'taskHandle'
p13316
(lp13317
S'TaskHandle'
p13318
aNtp13319
(S'channel'
p13320
(lp13321
S'char'
p13322
a(lp13323
I-1
aaNtp13324
tp13325
tp13326
sS'DAQmxResetCIPulseWidthDigFltrTimebaseSrc'
p13327
((lp13328
S'int32'
p13329
ag34
a((S'taskHandle'
p13330
(lp13331
S'TaskHandle'
p13332
aNtp13333
(S'channel'
p13334
(lp13335
S'char'
p13336
a(lp13337
I-1
aaNtp13338
tp13339
tp13340
sS'DAQmxSetCIEncoderZInputDigFltrTimebaseSrc'
p13341
((lp13342
S'int32'
p13343
ag34
a((S'taskHandle'
p13344
(lp13345
S'TaskHandle'
p13346
aNtp13347
(S'channel'
p13348
(lp13349
S'char'
p13350
a(lp13351
I-1
aaNtp13352
(S'data'
p13353
(lp13354
S'char'
p13355
ag42
aNtp13356
tp13357
tp13358
sS'DAQmxGetPersistedChanAllowInteractiveEditing'
p13359
((lp13360
S'int32'
p13361
ag34
a((S'channel'
p13362
(lp13363
S'char'
p13364
a(lp13365
I-1
aaNtp13366
(S'data'
p13367
(lp13368
S'bool32'
p13369
ag42
aNtp13370
tp13371
tp13372
sS'DAQmxResetAIThrmstrR1'
p13373
((lp13374
S'int32'
p13375
ag34
a((S'taskHandle'
p13376
(lp13377
S'TaskHandle'
p13378
aNtp13379
(S'channel'
p13380
(lp13381
S'char'
p13382
a(lp13383
I-1
aaNtp13384
tp13385
tp13386
sS'DAQmxGetAODataXferReqCond'
p13387
((lp13388
S'int32'
p13389
ag34
a((S'taskHandle'
p13390
(lp13391
S'TaskHandle'
p13392
aNtp13393
(S'channel'
p13394
(lp13395
S'char'
p13396
a(lp13397
I-1
aaNtp13398
(S'data'
p13399
(lp13400
S'int32'
p13401
ag42
aNtp13402
tp13403
tp13404
sS'DAQmxResetDODataXferReqCond'
p13405
((lp13406
S'int32'
p13407
ag34
a((S'taskHandle'
p13408
(lp13409
S'TaskHandle'
p13410
aNtp13411
(S'channel'
p13412
(lp13413
S'char'
p13414
a(lp13415
I-1
aaNtp13416
tp13417
tp13418
sS'DAQmxResetAIEnhancedAliasRejectionEnable'
p13419
((lp13420
S'int32'
p13421
ag34
a((S'taskHandle'
p13422
(lp13423
S'TaskHandle'
p13424
aNtp13425
(S'channel'
p13426
(lp13427
S'char'
p13428
a(lp13429
I-1
aaNtp13430
tp13431
tp13432
sS'DAQmxResetCITwoEdgeSepSecondTerm'
p13433
((lp13434
S'int32'
p13435
ag34
a((S'taskHandle'
p13436
(lp13437
S'TaskHandle'
p13438
aNtp13439
(S'channel'
p13440
(lp13441
S'char'
p13442
a(lp13443
I-1
aaNtp13444
tp13445
tp13446
sS'DAQmxSetScaleLinSlope'
p13447
((lp13448
S'int32'
p13449
ag34
a((S'scaleName'
p13450
(lp13451
S'char'
p13452
a(lp13453
I-1
aaNtp13454
(S'data'
p13455
(lp13456
S'float64'
p13457
aNtp13458
tp13459
tp13460
sS'DAQmxResetExportedAdvCmpltEventPulseWidth'
p13461
((lp13462
S'int32'
p13463
ag34
a((S'taskHandle'
p13464
(lp13465
S'TaskHandle'
p13466
aNtp13467
tp13468
tp13469
sS'DAQmxGetSampClkTimebaseSrc'
p13470
((lp13471
S'int32'
p13472
ag34
a((S'taskHandle'
p13473
(lp13474
S'TaskHandle'
p13475
aNtp13476
(S'data'
p13477
(lp13478
S'char'
p13479
ag42
aNtp13480
(S'bufferSize'
p13481
(lp13482
S'uInt32'
p13483
aNtp13484
tp13485
tp13486
sS'DAQmxGetBufInputOnbrdBufSize'
p13487
((lp13488
S'int32'
p13489
ag34
a((S'taskHandle'
p13490
(lp13491
S'TaskHandle'
p13492
aNtp13493
(S'data'
p13494
(lp13495
S'uInt32'
p13496
ag42
aNtp13497
tp13498
tp13499
sS'DAQmxReadBinaryI32'
p13500
((lp13501
S'int32'
p13502
ag34
a((S'taskHandle'
p13503
(lp13504
S'TaskHandle'
p13505
aNtp13506
(S'numSampsPerChan'
p13507
(lp13508
S'int32'
p13509
aNtp13510
(S'timeout'
p13511
(lp13512
S'float64'
p13513
aNtp13514
(S'fillMode'
p13515
(lp13516
S'bool32'
p13517
aNtp13518
(S'readArray'
p13519
(lp13520
S'int32'
p13521
a(lp13522
I-1
aaNtp13523
(S'arraySizeInSamps'
p13524
(lp13525
S'uInt32'
p13526
aNtp13527
(S'sampsPerChanRead'
p13528
(lp13529
S'int32'
p13530
ag42
aNtp13531
(S'reserved'
p13532
(lp13533
S'bool32'
p13534
ag42
aNtp13535
tp13536
tp13537
sS'DAQmxSetOnDemandSimultaneousAOEnable'
p13538
((lp13539
S'int32'
p13540
ag34
a((S'taskHandle'
p13541
(lp13542
S'TaskHandle'
p13543
aNtp13544
(S'data'
p13545
(lp13546
S'bool32'
p13547
aNtp13548
tp13549
tp13550
sS'DAQmxResetAnlgWinStartTrigWhen'
p13551
((lp13552
S'int32'
p13553
ag34
a((S'taskHandle'
p13554
(lp13555
S'TaskHandle'
p13556
aNtp13557
tp13558
tp13559
sS'DAQmxCreateAIRTDChan'
p13560
((lp13561
S'int32'
p13562
ag34
a((S'taskHandle'
p13563
(lp13564
S'TaskHandle'
p13565
aNtp13566
(S'physicalChannel'
p13567
(lp13568
S'char'
p13569
a(lp13570
I-1
aaNtp13571
(S'nameToAssignToChannel'
p13572
(lp13573
S'char'
p13574
a(lp13575
I-1
aaNtp13576
(S'minVal'
p13577
(lp13578
S'float64'
p13579
aNtp13580
(S'maxVal'
p13581
(lp13582
S'float64'
p13583
aNtp13584
(S'units'
p13585
(lp13586
S'int32'
p13587
aNtp13588
(S'rtdType'
p13589
(lp13590
S'int32'
p13591
aNtp13592
(S'resistanceConfig'
p13593
(lp13594
S'int32'
p13595
aNtp13596
(S'currentExcitSource'
p13597
(lp13598
S'int32'
p13599
aNtp13600
(S'currentExcitVal'
p13601
(lp13602
S'float64'
p13603
aNtp13604
(S'r0'
p13605
(lp13606
S'float64'
p13607
aNtp13608
tp13609
tp13610
sS'DAQmxGetWatchdogTimeout'
p13611
((lp13612
S'int32'
p13613
ag34
a((S'taskHandle'
p13614
(lp13615
S'TaskHandle'
p13616
aNtp13617
(S'data'
p13618
(lp13619
S'float64'
p13620
ag42
aNtp13621
tp13622
tp13623
sS'DAQmxResetDOInvertLines'
p13624
((lp13625
S'int32'
p13626
ag34
a((S'taskHandle'
p13627
(lp13628
S'TaskHandle'
p13629
aNtp13630
(S'channel'
p13631
(lp13632
S'char'
p13633
a(lp13634
I-1
aaNtp13635
tp13636
tp13637
sS'DAQmxSetCIFreqStartingEdge'
p13638
((lp13639
S'int32'
p13640
ag34
a((S'taskHandle'
p13641
(lp13642
S'TaskHandle'
p13643
aNtp13644
(S'channel'
p13645
(lp13646
S'char'
p13647
a(lp13648
I-1
aaNtp13649
(S'data'
p13650
(lp13651
S'int32'
p13652
aNtp13653
tp13654
tp13655
sS'DAQmxResetCIEncoderAInputDigSyncEnable'
p13656
((lp13657
S'int32'
p13658
ag34
a((S'taskHandle'
p13659
(lp13660
S'TaskHandle'
p13661
aNtp13662
(S'channel'
p13663
(lp13664
S'char'
p13665
a(lp13666
I-1
aaNtp13667
tp13668
tp13669
sS'DAQmxSetAIChanCalTablePreScaledVals'
p13670
((lp13671
S'int32'
p13672
ag34
a((S'taskHandle'
p13673
(lp13674
S'TaskHandle'
p13675
aNtp13676
(S'channel'
p13677
(lp13678
S'char'
p13679
a(lp13680
I-1
aaNtp13681
(S'data'
p13682
(lp13683
S'float64'
p13684
ag42
aNtp13685
(S'arraySizeInSamples'
p13686
(lp13687
S'uInt32'
p13688
aNtp13689
tp13690
tp13691
sS'DAQmxResetAIInputSrc'
p13692
((lp13693
S'int32'
p13694
ag34
a((S'taskHandle'
p13695
(lp13696
S'TaskHandle'
p13697
aNtp13698
(S'channel'
p13699
(lp13700
S'char'
p13701
a(lp13702
I-1
aaNtp13703
tp13704
tp13705
sS'DAQmxResetCIEncoderZInputDigSyncEnable'
p13706
((lp13707
S'int32'
p13708
ag34
a((S'taskHandle'
p13709
(lp13710
S'TaskHandle'
p13711
aNtp13712
(S'channel'
p13713
(lp13714
S'char'
p13715
a(lp13716
I-1
aaNtp13717
tp13718
tp13719
sS'DAQmxResetCIEncoderZInputDigFltrEnable'
p13720
((lp13721
S'int32'
p13722
ag34
a((S'taskHandle'
p13723
(lp13724
S'TaskHandle'
p13725
aNtp13726
(S'channel'
p13727
(lp13728
S'char'
p13729
a(lp13730
I-1
aaNtp13731
tp13732
tp13733
sS'DAQmxResetDOOutputDriveType'
p13734
((lp13735
S'int32'
p13736
ag34
a((S'taskHandle'
p13737
(lp13738
S'TaskHandle'
p13739
aNtp13740
(S'channel'
p13741
(lp13742
S'char'
p13743
a(lp13744
I-1
aaNtp13745
tp13746
tp13747
sS'DAQmxSetAnlgWinStartTrigBtm'
p13748
((lp13749
S'int32'
p13750
ag34
a((S'taskHandle'
p13751
(lp13752
S'TaskHandle'
p13753
aNtp13754
(S'data'
p13755
(lp13756
S'float64'
p13757
aNtp13758
tp13759
tp13760
sS'DAQmxGetDevIsSimulated'
p13761
((lp13762
S'int32'
p13763
ag34
a((S'device'
p13764
(lp13765
S'char'
p13766
a(lp13767
I-1
aaNtp13768
(S'data'
p13769
(lp13770
S'bool32'
p13771
ag42
aNtp13772
tp13773
tp13774
sS'DAQmxResetAOCurrentUnits'
p13775
((lp13776
S'int32'
p13777
ag34
a((S'taskHandle'
p13778
(lp13779
S'TaskHandle'
p13780
aNtp13781
(S'channel'
p13782
(lp13783
S'char'
p13784
a(lp13785
I-1
aaNtp13786
tp13787
tp13788
sS'DAQmxWriteDigitalU16'
p13789
((lp13790
S'int32'
p13791
ag34
a((S'taskHandle'
p13792
(lp13793
S'TaskHandle'
p13794
aNtp13795
(S'numSampsPerChan'
p13796
(lp13797
S'int32'
p13798
aNtp13799
(S'autoStart'
p13800
(lp13801
S'bool32'
p13802
aNtp13803
(S'timeout'
p13804
(lp13805
S'float64'
p13806
aNtp13807
(S'dataLayout'
p13808
(lp13809
S'bool32'
p13810
aNtp13811
(S'writeArray'
p13812
(lp13813
S'uInt16'
p13814
a(lp13815
I-1
aaNtp13816
(S'sampsPerChanWritten'
p13817
(lp13818
S'int32'
p13819
ag42
aNtp13820
(S'reserved'
p13821
(lp13822
S'bool32'
p13823
ag42
aNtp13824
tp13825
tp13826
sS'DAQmxSetMasterTimebaseSrc'
p13827
((lp13828
S'int32'
p13829
ag34
a((S'taskHandle'
p13830
(lp13831
S'TaskHandle'
p13832
aNtp13833
(S'data'
p13834
(lp13835
S'char'
p13836
ag42
aNtp13837
tp13838
tp13839
sS'DAQmxResetExportedCtrOutEventOutputBehavior'
p13840
((lp13841
S'int32'
p13842
ag34
a((S'taskHandle'
p13843
(lp13844
S'TaskHandle'
p13845
aNtp13846
tp13847
tp13848
sS'DAQmxResetAIExcitVal'
p13849
((lp13850
S'int32'
p13851
ag34
a((S'taskHandle'
p13852
(lp13853
S'TaskHandle'
p13854
aNtp13855
(S'channel'
p13856
(lp13857
S'char'
p13858
a(lp13859
I-1
aaNtp13860
tp13861
tp13862
sS'DAQmxGetSampClkSrc'
p13863
((lp13864
S'int32'
p13865
ag34
a((S'taskHandle'
p13866
(lp13867
S'TaskHandle'
p13868
aNtp13869
(S'data'
p13870
(lp13871
S'char'
p13872
ag42
aNtp13873
(S'bufferSize'
p13874
(lp13875
S'uInt32'
p13876
aNtp13877
tp13878
tp13879
sS'DAQmxSetScaleLinYIntercept'
p13880
((lp13881
S'int32'
p13882
ag34
a((S'scaleName'
p13883
(lp13884
S'char'
p13885
a(lp13886
I-1
aaNtp13887
(S'data'
p13888
(lp13889
S'float64'
p13890
aNtp13891
tp13892
tp13893
sS'DAQmxCreateTEDSAIVoltageChan'
p13894
((lp13895
S'int32'
p13896
ag34
a((S'taskHandle'
p13897
(lp13898
S'TaskHandle'
p13899
aNtp13900
(S'physicalChannel'
p13901
(lp13902
S'char'
p13903
a(lp13904
I-1
aaNtp13905
(S'nameToAssignToChannel'
p13906
(lp13907
S'char'
p13908
a(lp13909
I-1
aaNtp13910
(S'terminalConfig'
p13911
(lp13912
S'int32'
p13913
aNtp13914
(S'minVal'
p13915
(lp13916
S'float64'
p13917
aNtp13918
(S'maxVal'
p13919
(lp13920
S'float64'
p13921
aNtp13922
(S'units'
p13923
(lp13924
S'int32'
p13925
aNtp13926
(S'customScaleName'
p13927
(lp13928
S'char'
p13929
a(lp13930
I-1
aaNtp13931
tp13932
tp13933
sS'DAQmxResetDigEdgeStartTrigDigFltrTimebaseSrc'
p13934
((lp13935
S'int32'
p13936
ag34
a((S'taskHandle'
p13937
(lp13938
S'TaskHandle'
p13939
aNtp13940
tp13941
tp13942
sS'DAQmxSetAOLoadImpedance'
p13943
((lp13944
S'int32'
p13945
ag34
a((S'taskHandle'
p13946
(lp13947
S'TaskHandle'
p13948
aNtp13949
(S'channel'
p13950
(lp13951
S'char'
p13952
a(lp13953
I-1
aaNtp13954
(S'data'
p13955
(lp13956
S'float64'
p13957
aNtp13958
tp13959
tp13960
sS'DAQmxResetExportedAdvCmpltEventOutputTerm'
p13961
((lp13962
S'int32'
p13963
ag34
a((S'taskHandle'
p13964
(lp13965
S'TaskHandle'
p13966
aNtp13967
tp13968
tp13969
sS'DAQmxCreateTEDSAIPosRVDTChan'
p13970
((lp13971
S'int32'
p13972
ag34
a((S'taskHandle'
p13973
(lp13974
S'TaskHandle'
p13975
aNtp13976
(S'physicalChannel'
p13977
(lp13978
S'char'
p13979
a(lp13980
I-1
aaNtp13981
(S'nameToAssignToChannel'
p13982
(lp13983
S'char'
p13984
a(lp13985
I-1
aaNtp13986
(S'minVal'
p13987
(lp13988
S'float64'
p13989
aNtp13990
(S'maxVal'
p13991
(lp13992
S'float64'
p13993
aNtp13994
(S'units'
p13995
(lp13996
S'int32'
p13997
aNtp13998
(S'voltageExcitSource'
p13999
(lp14000
S'int32'
p14001
aNtp14002
(S'voltageExcitVal'
p14003
(lp14004
S'float64'
p14005
aNtp14006
(S'voltageExcitFreq'
p14007
(lp14008
S'float64'
p14009
aNtp14010
(S'ACExcitWireMode'
p14011
(lp14012
S'int32'
p14013
aNtp14014
(S'customScaleName'
p14015
(lp14016
S'char'
p14017
a(lp14018
I-1
aaNtp14019
tp14020
tp14021
sS'DAQmxGetCIPulseWidthDigSyncEnable'
p14022
((lp14023
S'int32'
p14024
ag34
a((S'taskHandle'
p14025
(lp14026
S'TaskHandle'
p14027
aNtp14028
(S'channel'
p14029
(lp14030
S'char'
p14031
a(lp14032
I-1
aaNtp14033
(S'data'
p14034
(lp14035
S'bool32'
p14036
ag42
aNtp14037
tp14038
tp14039
sS'DAQmxGetCOOutputState'
p14040
((lp14041
S'int32'
p14042
ag34
a((S'taskHandle'
p14043
(lp14044
S'TaskHandle'
p14045
aNtp14046
(S'channel'
p14047
(lp14048
S'char'
p14049
a(lp14050
I-1
aaNtp14051
(S'data'
p14052
(lp14053
S'int32'
p14054
ag42
aNtp14055
tp14056
tp14057
sS'DAQmxGetAILowpassSwitchCapClkSrc'
p14058
((lp14059
S'int32'
p14060
ag34
a((S'taskHandle'
p14061
(lp14062
S'TaskHandle'
p14063
aNtp14064
(S'channel'
p14065
(lp14066
S'char'
p14067
a(lp14068
I-1
aaNtp14069
(S'data'
p14070
(lp14071
S'int32'
p14072
ag42
aNtp14073
tp14074
tp14075
sS'DAQmxSetExportedAdvTrigOutputTerm'
p14076
((lp14077
S'int32'
p14078
ag34
a((S'taskHandle'
p14079
(lp14080
S'TaskHandle'
p14081
aNtp14082
(S'data'
p14083
(lp14084
S'char'
p14085
ag42
aNtp14086
tp14087
tp14088
sS'DAQmxSetAnlgWinStartTrigCoupling'
p14089
((lp14090
S'int32'
p14091
ag34
a((S'taskHandle'
p14092
(lp14093
S'TaskHandle'
p14094
aNtp14095
(S'data'
p14096
(lp14097
S'int32'
p14098
aNtp14099
tp14100
tp14101
sS'DAQmxGetDINumLines'
p14102
((lp14103
S'int32'
p14104
ag34
a((S'taskHandle'
p14105
(lp14106
S'TaskHandle'
p14107
aNtp14108
(S'channel'
p14109
(lp14110
S'char'
p14111
a(lp14112
I-1
aaNtp14113
(S'data'
p14114
(lp14115
S'uInt32'
p14116
ag42
aNtp14117
tp14118
tp14119
sS'DAQmxResetDIDigFltrMinPulseWidth'
p14120
((lp14121
S'int32'
p14122
ag34
a((S'taskHandle'
p14123
(lp14124
S'TaskHandle'
p14125
aNtp14126
(S'channel'
p14127
(lp14128
S'char'
p14129
a(lp14130
I-1
aaNtp14131
tp14132
tp14133
sS'DAQmxGetAIExcitDCorAC'
p14134
((lp14135
S'int32'
p14136
ag34
a((S'taskHandle'
p14137
(lp14138
S'TaskHandle'
p14139
aNtp14140
(S'channel'
p14141
(lp14142
S'char'
p14143
a(lp14144
I-1
aaNtp14145
(S'data'
p14146
(lp14147
S'int32'
p14148
ag42
aNtp14149
tp14150
tp14151
sS'DAQmxGetExportedAdvCmpltEventOutputTerm'
p14152
((lp14153
S'int32'
p14154
ag34
a((S'taskHandle'
p14155
(lp14156
S'TaskHandle'
p14157
aNtp14158
(S'data'
p14159
(lp14160
S'char'
p14161
ag42
aNtp14162
(S'bufferSize'
p14163
(lp14164
S'uInt32'
p14165
aNtp14166
tp14167
tp14168
sS'DAQmxResetStartTrigDelayUnits'
p14169
((lp14170
S'int32'
p14171
ag34
a((S'taskHandle'
p14172
(lp14173
S'TaskHandle'
p14174
aNtp14175
tp14176
tp14177
sS'DAQmxResetDigEdgeStartTrigDigFltrMinPulseWidth'
p14178
((lp14179
S'int32'
p14180
ag34
a((S'taskHandle'
p14181
(lp14182
S'TaskHandle'
p14183
aNtp14184
tp14185
tp14186
sS'DAQmxConnectTerms'
p14187
((lp14188
S'int32'
p14189
ag34
a((S'sourceTerminal'
p14190
(lp14191
S'char'
p14192
a(lp14193
I-1
aaNtp14194
(S'destinationTerminal'
p14195
(lp14196
S'char'
p14197
a(lp14198
I-1
aaNtp14199
(S'signalModifiers'
p14200
(lp14201
S'int32'
p14202
aNtp14203
tp14204
tp14205
sS'DAQmxGetExportedAdvTrigPulsePolarity'
p14206
((lp14207
S'int32'
p14208
ag34
a((S'taskHandle'
p14209
(lp14210
S'TaskHandle'
p14211
aNtp14212
(S'data'
p14213
(lp14214
S'int32'
p14215
ag42
aNtp14216
tp14217
tp14218
sS'DAQmxSetDigEdgeArmStartTrigSrc'
p14219
((lp14220
S'int32'
p14221
ag34
a((S'taskHandle'
p14222
(lp14223
S'TaskHandle'
p14224
aNtp14225
(S'data'
p14226
(lp14227
S'char'
p14228
ag42
aNtp14229
tp14230
tp14231
sS'DAQmxGetCILinEncoderDistPerPulse'
p14232
((lp14233
S'int32'
p14234
ag34
a((S'taskHandle'
p14235
(lp14236
S'TaskHandle'
p14237
aNtp14238
(S'channel'
p14239
(lp14240
S'char'
p14241
a(lp14242
I-1
aaNtp14243
(S'data'
p14244
(lp14245
S'float64'
p14246
ag42
aNtp14247
tp14248
tp14249
sS'DAQmxGetAIChanCalVerifAcqVals'
p14250
((lp14251
S'int32'
p14252
ag34
a((S'taskHandle'
p14253
(lp14254
S'TaskHandle'
p14255
aNtp14256
(S'channel'
p14257
(lp14258
S'char'
p14259
a(lp14260
I-1
aaNtp14261
(S'data'
p14262
(lp14263
S'float64'
p14264
ag42
aNtp14265
(S'arraySizeInSamples'
p14266
(lp14267
S'uInt32'
p14268
aNtp14269
tp14270
tp14271
sS'DAQmxSetAnlgLvlPauseTrigHyst'
p14272
((lp14273
S'int32'
p14274
ag34
a((S'taskHandle'
p14275
(lp14276
S'TaskHandle'
p14277
aNtp14278
(S'data'
p14279
(lp14280
S'float64'
p14281
aNtp14282
tp14283
tp14284
sS'DAQmxGetSwitchDevNumColumns'
p14285
((lp14286
S'int32'
p14287
ag34
a((S'deviceName'
p14288
(lp14289
S'char'
p14290
a(lp14291
I-1
aaNtp14292
(S'data'
p14293
(lp14294
S'uInt32'
p14295
ag42
aNtp14296
tp14297
tp14298
sS'DAQmxSetCITwoEdgeSepFirstDigSyncEnable'
p14299
((lp14300
S'int32'
p14301
ag34
a((S'taskHandle'
p14302
(lp14303
S'TaskHandle'
p14304
aNtp14305
(S'channel'
p14306
(lp14307
S'char'
p14308
a(lp14309
I-1
aaNtp14310
(S'data'
p14311
(lp14312
S'bool32'
p14313
aNtp14314
tp14315
tp14316
sS'DAQmxSetAIAutoZeroMode'
p14317
((lp14318
S'int32'
p14319
ag34
a((S'taskHandle'
p14320
(lp14321
S'TaskHandle'
p14322
aNtp14323
(S'channel'
p14324
(lp14325
S'char'
p14326
a(lp14327
I-1
aaNtp14328
(S'data'
p14329
(lp14330
S'int32'
p14331
aNtp14332
tp14333
tp14334
sS'DAQmxSetAIFreqThreshVoltage'
p14335
((lp14336
S'int32'
p14337
ag34
a((S'taskHandle'
p14338
(lp14339
S'TaskHandle'
p14340
aNtp14341
(S'channel'
p14342
(lp14343
S'char'
p14344
a(lp14345
I-1
aaNtp14346
(S'data'
p14347
(lp14348
S'float64'
p14349
aNtp14350
tp14351
tp14352
sS'DAQmxGetAnlgWinPauseTrigBtm'
p14353
((lp14354
S'int32'
p14355
ag34
a((S'taskHandle'
p14356
(lp14357
S'TaskHandle'
p14358
aNtp14359
(S'data'
p14360
(lp14361
S'float64'
p14362
ag42
aNtp14363
tp14364
tp14365
sS'DAQmxResetDigEdgeAdvTrigDigFltrEnable'
p14366
((lp14367
S'int32'
p14368
ag34
a((S'taskHandle'
p14369
(lp14370
S'TaskHandle'
p14371
aNtp14372
tp14373
tp14374
sS'DAQmxSetExportedAdvCmpltEventPulsePolarity'
p14375
((lp14376
S'int32'
p14377
ag34
a((S'taskHandle'
p14378
(lp14379
S'TaskHandle'
p14380
aNtp14381
(S'data'
p14382
(lp14383
S'int32'
p14384
aNtp14385
tp14386
tp14387
sS'DAQmxGetSelfCalLastDateAndTime'
p14388
((lp14389
S'int32'
p14390
ag34
a((S'deviceName'
p14391
(lp14392
S'char'
p14393
a(lp14394
I-1
aaNtp14395
(S'year'
p14396
(lp14397
S'uInt32'
p14398
ag42
aNtp14399
(S'month'
p14400
(lp14401
S'uInt32'
p14402
ag42
aNtp14403
(S'day'
p14404
(lp14405
S'uInt32'
p14406
ag42
aNtp14407
(S'hour'
p14408
(lp14409
S'uInt32'
p14410
ag42
aNtp14411
(S'minute'
p14412
(lp14413
S'uInt32'
p14414
ag42
aNtp14415
tp14416
tp14417
sS'DAQmxSetReadOverWrite'
p14418
((lp14419
S'int32'
p14420
ag34
a((S'taskHandle'
p14421
(lp14422
S'TaskHandle'
p14423
aNtp14424
(S'data'
p14425
(lp14426
S'int32'
p14427
aNtp14428
tp14429
tp14430
sS'DAQmxSetAIACExcitSyncEnable'
p14431
((lp14432
S'int32'
p14433
ag34
a((S'taskHandle'
p14434
(lp14435
S'TaskHandle'
p14436
aNtp14437
(S'channel'
p14438
(lp14439
S'char'
p14440
a(lp14441
I-1
aaNtp14442
(S'data'
p14443
(lp14444
S'bool32'
p14445
aNtp14446
tp14447
tp14448
sS'DAQmxGetCIOutputState'
p14449
((lp14450
S'int32'
p14451
ag34
a((S'taskHandle'
p14452
(lp14453
S'TaskHandle'
p14454
aNtp14455
(S'channel'
p14456
(lp14457
S'char'
p14458
a(lp14459
I-1
aaNtp14460
(S'data'
p14461
(lp14462
S'int32'
p14463
ag42
aNtp14464
tp14465
tp14466
sS'DAQmxSetSwitchScanBreakMode'
p14467
((lp14468
S'int32'
p14469
ag34
a((S'taskHandle'
p14470
(lp14471
S'TaskHandle'
p14472
aNtp14473
(S'data'
p14474
(lp14475
S'int32'
p14476
aNtp14477
tp14478
tp14479
sS'DAQmxSetAIAccelUnits'
p14480
((lp14481
S'int32'
p14482
ag34
a((S'taskHandle'
p14483
(lp14484
S'TaskHandle'
p14485
aNtp14486
(S'channel'
p14487
(lp14488
S'char'
p14489
a(lp14490
I-1
aaNtp14491
(S'data'
p14492
(lp14493
S'int32'
p14494
aNtp14495
tp14496
tp14497
sS'DAQmxSetAIChanCalOperatorName'
p14498
((lp14499
S'int32'
p14500
ag34
a((S'taskHandle'
p14501
(lp14502
S'TaskHandle'
p14503
aNtp14504
(S'channel'
p14505
(lp14506
S'char'
p14507
a(lp14508
I-1
aaNtp14509
(S'data'
p14510
(lp14511
S'char'
p14512
ag42
aNtp14513
tp14514
tp14515
sS'DAQmxSetArmStartTrigType'
p14516
((lp14517
S'int32'
p14518
ag34
a((S'taskHandle'
p14519
(lp14520
S'TaskHandle'
p14521
aNtp14522
(S'data'
p14523
(lp14524
S'int32'
p14525
aNtp14526
tp14527
tp14528
sS'DAQmxSetAISoundPressureMaxSoundPressureLvl'
p14529
((lp14530
S'int32'
p14531
ag34
a((S'taskHandle'
p14532
(lp14533
S'TaskHandle'
p14534
aNtp14535
(S'channel'
p14536
(lp14537
S'char'
p14538
a(lp14539
I-1
aaNtp14540
(S'data'
p14541
(lp14542
S'float64'
p14543
aNtp14544
tp14545
tp14546
sS'DAQmxSetDigEdgeWatchdogExpirTrigEdge'
p14547
((lp14548
S'int32'
p14549
ag34
a((S'taskHandle'
p14550
(lp14551
S'TaskHandle'
p14552
aNtp14553
(S'data'
p14554
(lp14555
S'int32'
p14556
aNtp14557
tp14558
tp14559
sS'DAQmxGetAIResolutionUnits'
p14560
((lp14561
S'int32'
p14562
ag34
a((S'taskHandle'
p14563
(lp14564
S'TaskHandle'
p14565
aNtp14566
(S'channel'
p14567
(lp14568
S'char'
p14569
a(lp14570
I-1
aaNtp14571
(S'data'
p14572
(lp14573
S'int32'
p14574
ag42
aNtp14575
tp14576
tp14577
sS'DAQmxSetRealTimeNumOfWarmupIters'
p14578
((lp14579
S'int32'
p14580
ag34
a((S'taskHandle'
p14581
(lp14582
S'TaskHandle'
p14583
aNtp14584
(S'data'
p14585
(lp14586
S'uInt32'
p14587
aNtp14588
tp14589
tp14590
sS'DAQmxGetExportedHshkEventDelay'
p14591
((lp14592
S'int32'
p14593
ag34
a((S'taskHandle'
p14594
(lp14595
S'TaskHandle'
p14596
aNtp14597
(S'data'
p14598
(lp14599
S'float64'
p14600
ag42
aNtp14601
tp14602
tp14603
sS'DAQmxCreateAIThrmcplChan'
p14604
((lp14605
S'int32'
p14606
ag34
a((S'taskHandle'
p14607
(lp14608
S'TaskHandle'
p14609
aNtp14610
(S'physicalChannel'
p14611
(lp14612
S'char'
p14613
a(lp14614
I-1
aaNtp14615
(S'nameToAssignToChannel'
p14616
(lp14617
S'char'
p14618
a(lp14619
I-1
aaNtp14620
(S'minVal'
p14621
(lp14622
S'float64'
p14623
aNtp14624
(S'maxVal'
p14625
(lp14626
S'float64'
p14627
aNtp14628
(S'units'
p14629
(lp14630
S'int32'
p14631
aNtp14632
(S'thermocoupleType'
p14633
(lp14634
S'int32'
p14635
aNtp14636
(S'cjcSource'
p14637
(lp14638
S'int32'
p14639
aNtp14640
(S'cjcVal'
p14641
(lp14642
S'float64'
p14643
aNtp14644
(S'cjcChannel'
p14645
(lp14646
S'char'
p14647
a(lp14648
I-1
aaNtp14649
tp14650
tp14651
sS'DAQmxResetAOGain'
p14652
((lp14653
S'int32'
p14654
ag34
a((S'taskHandle'
p14655
(lp14656
S'TaskHandle'
p14657
aNtp14658
(S'channel'
p14659
(lp14660
S'char'
p14661
a(lp14662
I-1
aaNtp14663
tp14664
tp14665
sS'DAQmxResetDigEdgeArmStartTrigDigFltrTimebaseSrc'
p14666
((lp14667
S'int32'
p14668
ag34
a((S'taskHandle'
p14669
(lp14670
S'TaskHandle'
p14671
aNtp14672
tp14673
tp14674
sS'DAQmxSetCICtrTimebaseRate'
p14675
((lp14676
S'int32'
p14677
ag34
a((S'taskHandle'
p14678
(lp14679
S'TaskHandle'
p14680
aNtp14681
(S'channel'
p14682
(lp14683
S'char'
p14684
a(lp14685
I-1
aaNtp14686
(S'data'
p14687
(lp14688
S'float64'
p14689
aNtp14690
tp14691
tp14692
sS'DAQmxResetCITwoEdgeSepFirstDigFltrMinPulseWidth'
p14693
((lp14694
S'int32'
p14695
ag34
a((S'taskHandle'
p14696
(lp14697
S'TaskHandle'
p14698
aNtp14699
(S'channel'
p14700
(lp14701
S'char'
p14702
a(lp14703
I-1
aaNtp14704
tp14705
tp14706
sS'DAQmxGetSwitchChanWireMode'
p14707
((lp14708
S'int32'
p14709
ag34
a((S'switchChannelName'
p14710
(lp14711
S'char'
p14712
a(lp14713
I-1
aaNtp14714
(S'data'
p14715
(lp14716
S'uInt32'
p14717
ag42
aNtp14718
tp14719
tp14720
sS'DAQmxSetAnlgEdgeStartTrigCoupling'
p14721
((lp14722
S'int32'
p14723
ag34
a((S'taskHandle'
p14724
(lp14725
S'TaskHandle'
p14726
aNtp14727
(S'data'
p14728
(lp14729
S'int32'
p14730
aNtp14731
tp14732
tp14733
sS'DAQmxCreateTask'
p14734
((lp14735
S'int32'
p14736
ag34
a((S'taskName'
p14737
(lp14738
S'char'
p14739
a(lp14740
I-1
aaNtp14741
(S'taskHandle'
p14742
(lp14743
S'TaskHandle'
p14744
ag42
aNtp14745
tp14746
tp14747
sS'DAQmxCreateCIPulseWidthChan'
p14748
((lp14749
S'int32'
p14750
ag34
a((S'taskHandle'
p14751
(lp14752
S'TaskHandle'
p14753
aNtp14754
(S'counter'
p14755
(lp14756
S'char'
p14757
a(lp14758
I-1
aaNtp14759
(S'nameToAssignToChannel'
p14760
(lp14761
S'char'
p14762
a(lp14763
I-1
aaNtp14764
(S'minVal'
p14765
(lp14766
S'float64'
p14767
aNtp14768
(S'maxVal'
p14769
(lp14770
S'float64'
p14771
aNtp14772
(S'units'
p14773
(lp14774
S'int32'
p14775
aNtp14776
(S'startingEdge'
p14777
(lp14778
S'int32'
p14779
aNtp14780
(S'customScaleName'
p14781
(lp14782
S'char'
p14783
a(lp14784
I-1
aaNtp14785
tp14786
tp14787
sS'DAQmxGetAOReglitchEnable'
p14788
((lp14789
S'int32'
p14790
ag34
a((S'taskHandle'
p14791
(lp14792
S'TaskHandle'
p14793
aNtp14794
(S'channel'
p14795
(lp14796
S'char'
p14797
a(lp14798
I-1
aaNtp14799
(S'data'
p14800
(lp14801
S'bool32'
p14802
ag42
aNtp14803
tp14804
tp14805
sS'DAQmxReadDigitalScalarU32'
p14806
((lp14807
S'int32'
p14808
ag34
a((S'taskHandle'
p14809
(lp14810
S'TaskHandle'
p14811
aNtp14812
(S'timeout'
p14813
(lp14814
S'float64'
p14815
aNtp14816
(S'value'
p14817
(lp14818
S'uInt32'
p14819
ag42
aNtp14820
(S'reserved'
p14821
(lp14822
S'bool32'
p14823
ag42
aNtp14824
tp14825
tp14826
sS'DAQmxGetSwitchChanMaxDCCarryCurrent'
p14827
((lp14828
S'int32'
p14829
ag34
a((S'switchChannelName'
p14830
(lp14831
S'char'
p14832
a(lp14833
I-1
aaNtp14834
(S'data'
p14835
(lp14836
S'float64'
p14837
ag42
aNtp14838
tp14839
tp14840
sS'DAQmxGetDigEdgeArmStartTrigEdge'
p14841
((lp14842
S'int32'
p14843
ag34
a((S'taskHandle'
p14844
(lp14845
S'TaskHandle'
p14846
aNtp14847
(S'data'
p14848
(lp14849
S'int32'
p14850
ag42
aNtp14851
tp14852
tp14853
sS'DAQmxGetAnlgWinPauseTrigWhen'
p14854
((lp14855
S'int32'
p14856
ag34
a((S'taskHandle'
p14857
(lp14858
S'TaskHandle'
p14859
aNtp14860
(S'data'
p14861
(lp14862
S'int32'
p14863
ag42
aNtp14864
tp14865
tp14866
sS'DAQmxResetCITwoEdgeSepFirstDigFltrTimebaseSrc'
p14867
((lp14868
S'int32'
p14869
ag34
a((S'taskHandle'
p14870
(lp14871
S'TaskHandle'
p14872
aNtp14873
(S'channel'
p14874
(lp14875
S'char'
p14876
a(lp14877
I-1
aaNtp14878
tp14879
tp14880
sS'DAQmxGetSwitchScanAttribute'
p14881
((lp14882
S'int32'
p14883
ag2570
a((S'taskHandle'
p14884
(lp14885
S'TaskHandle'
p14886
aNtp14887
(S'attribute'
p14888
(lp14889
S'int32'
p14890
aNtp14891
(S'value'
p14892
(lp14893
S'void'
p14894
ag42
aNtp14895
tp14896
tp14897
sS'DAQmxSetAIBridgeInitialVoltage'
p14898
((lp14899
S'int32'
p14900
ag34
a((S'taskHandle'
p14901
(lp14902
S'TaskHandle'
p14903
aNtp14904
(S'channel'
p14905
(lp14906
S'char'
p14907
a(lp14908
I-1
aaNtp14909
(S'data'
p14910
(lp14911
S'float64'
p14912
aNtp14913
tp14914
tp14915
sS'DAQmxResetCOPulseFreqUnits'
p14916
((lp14917
S'int32'
p14918
ag34
a((S'taskHandle'
p14919
(lp14920
S'TaskHandle'
p14921
aNtp14922
(S'channel'
p14923
(lp14924
S'char'
p14925
a(lp14926
I-1
aaNtp14927
tp14928
tp14929
sS'DAQmxResetCIEncoderAInputDigFltrTimebaseSrc'
p14930
((lp14931
S'int32'
p14932
ag34
a((S'taskHandle'
p14933
(lp14934
S'TaskHandle'
p14935
aNtp14936
(S'channel'
p14937
(lp14938
S'char'
p14939
a(lp14940
I-1
aaNtp14941
tp14942
tp14943
sS'DAQmxSetCIGPSSyncSrc'
p14944
((lp14945
S'int32'
p14946
ag34
a((S'taskHandle'
p14947
(lp14948
S'TaskHandle'
p14949
aNtp14950
(S'channel'
p14951
(lp14952
S'char'
p14953
a(lp14954
I-1
aaNtp14955
(S'data'
p14956
(lp14957
S'char'
p14958
ag42
aNtp14959
tp14960
tp14961
sS'DAQmxResetDigEdgeStartTrigSrc'
p14962
((lp14963
S'int32'
p14964
ag34
a((S'taskHandle'
p14965
(lp14966
S'TaskHandle'
p14967
aNtp14968
tp14969
tp14970
sS'DAQmxCreateAIPosLVDTChan'
p14971
((lp14972
S'int32'
p14973
ag34
a((S'taskHandle'
p14974
(lp14975
S'TaskHandle'
p14976
aNtp14977
(S'physicalChannel'
p14978
(lp14979
S'char'
p14980
a(lp14981
I-1
aaNtp14982
(S'nameToAssignToChannel'
p14983
(lp14984
S'char'
p14985
a(lp14986
I-1
aaNtp14987
(S'minVal'
p14988
(lp14989
S'float64'
p14990
aNtp14991
(S'maxVal'
p14992
(lp14993
S'float64'
p14994
aNtp14995
(S'units'
p14996
(lp14997
S'int32'
p14998
aNtp14999
(S'sensitivity'
p15000
(lp15001
S'float64'
p15002
aNtp15003
(S'sensitivityUnits'
p15004
(lp15005
S'int32'
p15006
aNtp15007
(S'voltageExcitSource'
p15008
(lp15009
S'int32'
p15010
aNtp15011
(S'voltageExcitVal'
p15012
(lp15013
S'float64'
p15014
aNtp15015
(S'voltageExcitFreq'
p15016
(lp15017
S'float64'
p15018
aNtp15019
(S'ACExcitWireMode'
p15020
(lp15021
S'int32'
p15022
aNtp15023
(S'customScaleName'
p15024
(lp15025
S'char'
p15026
a(lp15027
I-1
aaNtp15028
tp15029
tp15030
sS'DAQmxCreateAICurrentChan'
p15031
((lp15032
S'int32'
p15033
ag34
a((S'taskHandle'
p15034
(lp15035
S'TaskHandle'
p15036
aNtp15037
(S'physicalChannel'
p15038
(lp15039
S'char'
p15040
a(lp15041
I-1
aaNtp15042
(S'nameToAssignToChannel'
p15043
(lp15044
S'char'
p15045
a(lp15046
I-1
aaNtp15047
(S'terminalConfig'
p15048
(lp15049
S'int32'
p15050
aNtp15051
(S'minVal'
p15052
(lp15053
S'float64'
p15054
aNtp15055
(S'maxVal'
p15056
(lp15057
S'float64'
p15058
aNtp15059
(S'units'
p15060
(lp15061
S'int32'
p15062
aNtp15063
(S'shuntResistorLoc'
p15064
(lp15065
S'int32'
p15066
aNtp15067
(S'extShuntResistorVal'
p15068
(lp15069
S'float64'
p15070
aNtp15071
(S'customScaleName'
p15072
(lp15073
S'char'
p15074
a(lp15075
I-1
aaNtp15076
tp15077
tp15078
sS'DAQmxGetCISemiPeriodUnits'
p15079
((lp15080
S'int32'
p15081
ag34
a((S'taskHandle'
p15082
(lp15083
S'TaskHandle'
p15084
aNtp15085
(S'channel'
p15086
(lp15087
S'char'
p15088
a(lp15089
I-1
aaNtp15090
(S'data'
p15091
(lp15092
S'int32'
p15093
ag42
aNtp15094
tp15095
tp15096
sS'DAQmxGetCICtrTimebaseDigFltrMinPulseWidth'
p15097
((lp15098
S'int32'
p15099
ag34
a((S'taskHandle'
p15100
(lp15101
S'TaskHandle'
p15102
aNtp15103
(S'channel'
p15104
(lp15105
S'char'
p15106
a(lp15107
I-1
aaNtp15108
(S'data'
p15109
(lp15110
S'float64'
p15111
ag42
aNtp15112
tp15113
tp15114
sS'DAQmxSetCICountEdgesCountDirDigFltrTimebaseRate'
p15115
((lp15116
S'int32'
p15117
ag34
a((S'taskHandle'
p15118
(lp15119
S'TaskHandle'
p15120
aNtp15121
(S'channel'
p15122
(lp15123
S'char'
p15124
a(lp15125
I-1
aaNtp15126
(S'data'
p15127
(lp15128
S'float64'
p15129
aNtp15130
tp15131
tp15132
sS'DAQmxSetup1102Cal'
p15133
((lp15134
S'int32'
p15135
ag34
a((S'calHandle'
p15136
(lp15137
S'uInt32'
p15138
aNtp15139
(S'channelNames'
p15140
(lp15141
S'char'
p15142
a(lp15143
I-1
aaNtp15144
(S'gain'
p15145
(lp15146
S'float64'
p15147
aNtp15148
tp15149
tp15150
sS'DAQmxSetAnlgWinPauseTrigBtm'
p15151
((lp15152
S'int32'
p15153
ag34
a((S'taskHandle'
p15154
(lp15155
S'TaskHandle'
p15156
aNtp15157
(S'data'
p15158
(lp15159
S'float64'
p15160
aNtp15161
tp15162
tp15163
sS'DAQmxGetAISoundPressureMaxSoundPressureLvl'
p15164
((lp15165
S'int32'
p15166
ag34
a((S'taskHandle'
p15167
(lp15168
S'TaskHandle'
p15169
aNtp15170
(S'channel'
p15171
(lp15172
S'char'
p15173
a(lp15174
I-1
aaNtp15175
(S'data'
p15176
(lp15177
S'float64'
p15178
ag42
aNtp15179
tp15180
tp15181
sS'DAQmxSetCIEncoderBInputDigFltrEnable'
p15182
((lp15183
S'int32'
p15184
ag34
a((S'taskHandle'
p15185
(lp15186
S'TaskHandle'
p15187
aNtp15188
(S'channel'
p15189
(lp15190
S'char'
p15191
a(lp15192
I-1
aaNtp15193
(S'data'
p15194
(lp15195
S'bool32'
p15196
aNtp15197
tp15198
tp15199
sS'DAQmxGetCOCtrTimebaseSrc'
p15200
((lp15201
S'int32'
p15202
ag34
a((S'taskHandle'
p15203
(lp15204
S'TaskHandle'
p15205
aNtp15206
(S'channel'
p15207
(lp15208
S'char'
p15209
a(lp15210
I-1
aaNtp15211
(S'data'
p15212
(lp15213
S'char'
p15214
ag42
aNtp15215
(S'bufferSize'
p15216
(lp15217
S'uInt32'
p15218
aNtp15219
tp15220
tp15221
sS'DAQmxSetAICustomScaleName'
p15222
((lp15223
S'int32'
p15224
ag34
a((S'taskHandle'
p15225
(lp15226
S'TaskHandle'
p15227
aNtp15228
(S'channel'
p15229
(lp15230
S'char'
p15231
a(lp15232
I-1
aaNtp15233
(S'data'
p15234
(lp15235
S'char'
p15236
ag42
aNtp15237
tp15238
tp15239
sS'DAQmxSetExportedWatchdogExpiredEventOutputTerm'
p15240
((lp15241
S'int32'
p15242
ag34
a((S'taskHandle'
p15243
(lp15244
S'TaskHandle'
p15245
aNtp15246
(S'data'
p15247
(lp15248
S'char'
p15249
ag42
aNtp15250
tp15251
tp15252
sS'DAQmxResetAODataXferMech'
p15253
((lp15254
S'int32'
p15255
ag34
a((S'taskHandle'
p15256
(lp15257
S'TaskHandle'
p15258
aNtp15259
(S'channel'
p15260
(lp15261
S'char'
p15262
a(lp15263
I-1
aaNtp15264
tp15265
tp15266
sS'DAQmxResetCISemiPeriodUnits'
p15267
((lp15268
S'int32'
p15269
ag34
a((S'taskHandle'
p15270
(lp15271
S'TaskHandle'
p15272
aNtp15273
(S'channel'
p15274
(lp15275
S'char'
p15276
a(lp15277
I-1
aaNtp15278
tp15279
tp15280
sS'DAQmxGetDOInvertLines'
p15281
((lp15282
S'int32'
p15283
ag34
a((S'taskHandle'
p15284
(lp15285
S'TaskHandle'
p15286
aNtp15287
(S'channel'
p15288
(lp15289
S'char'
p15290
a(lp15291
I-1
aaNtp15292
(S'data'
p15293
(lp15294
S'bool32'
p15295
ag42
aNtp15296
tp15297
tp15298
sS'DAQmxGetCOCount'
p15299
((lp15300
S'int32'
p15301
ag34
a((S'taskHandle'
p15302
(lp15303
S'TaskHandle'
p15304
aNtp15305
(S'channel'
p15306
(lp15307
S'char'
p15308
a(lp15309
I-1
aaNtp15310
(S'data'
p15311
(lp15312
S'uInt32'
p15313
ag42
aNtp15314
tp15315
tp15316
sS'DAQmxSetCOPulseLowTime'
p15317
((lp15318
S'int32'
p15319
ag34
a((S'taskHandle'
p15320
(lp15321
S'TaskHandle'
p15322
aNtp15323
(S'channel'
p15324
(lp15325
S'char'
p15326
a(lp15327
I-1
aaNtp15328
(S'data'
p15329
(lp15330
S'float64'
p15331
aNtp15332
tp15333
tp15334
sS'DAQmxGetAIThrmcplCJCVal'
p15335
((lp15336
S'int32'
p15337
ag34
a((S'taskHandle'
p15338
(lp15339
S'TaskHandle'
p15340
aNtp15341
(S'channel'
p15342
(lp15343
S'char'
p15344
a(lp15345
I-1
aaNtp15346
(S'data'
p15347
(lp15348
S'float64'
p15349
ag42
aNtp15350
tp15351
tp15352
sS'DAQmxResetSwitchScanAttribute'
p15353
((lp15354
S'int32'
p15355
ag34
a((S'taskHandle'
p15356
(lp15357
S'TaskHandle'
p15358
aNtp15359
(S'attribute'
p15360
(lp15361
S'int32'
p15362
aNtp15363
tp15364
tp15365
sS'DAQmxResetCIAngEncoderPulsesPerRev'
p15366
((lp15367
S'int32'
p15368
ag34
a((S'taskHandle'
p15369
(lp15370
S'TaskHandle'
p15371
aNtp15372
(S'channel'
p15373
(lp15374
S'char'
p15375
a(lp15376
I-1
aaNtp15377
tp15378
tp15379
sS'DAQmxResetDigEdgeRefTrigSrc'
p15380
((lp15381
S'int32'
p15382
ag34
a((S'taskHandle'
p15383
(lp15384
S'TaskHandle'
p15385
aNtp15386
tp15387
tp15388
sS'DAQmxWriteToTEDSFromFile'
p15389
((lp15390
S'int32'
p15391
ag34
a((S'physicalChannel'
p15392
(lp15393
S'char'
p15394
a(lp15395
I-1
aaNtp15396
(S'filePath'
p15397
(lp15398
S'char'
p15399
a(lp15400
I-1
aaNtp15401
(S'basicTEDSOptions'
p15402
(lp15403
S'int32'
p15404
aNtp15405
tp15406
tp15407
sS'DAQmxResetDigLvlPauseTrigSrc'
p15408
((lp15409
S'int32'
p15410
ag34
a((S'taskHandle'
p15411
(lp15412
S'TaskHandle'
p15413
aNtp15414
tp15415
tp15416
sS'DAQmxResetAnlgLvlPauseTrigLvl'
p15417
((lp15418
S'int32'
p15419
ag34
a((S'taskHandle'
p15420
(lp15421
S'TaskHandle'
p15422
aNtp15423
tp15424
tp15425
sS'DAQmxSetStartTrigDelayUnits'
p15426
((lp15427
S'int32'
p15428
ag34
a((S'taskHandle'
p15429
(lp15430
S'TaskHandle'
p15431
aNtp15432
(S'data'
p15433
(lp15434
S'int32'
p15435
aNtp15436
tp15437
tp15438
sS'DAQmxResetCOCtrTimebaseDigFltrTimebaseSrc'
p15439
((lp15440
S'int32'
p15441
ag34
a((S'taskHandle'
p15442
(lp15443
S'TaskHandle'
p15444
aNtp15445
(S'channel'
p15446
(lp15447
S'char'
p15448
a(lp15449
I-1
aaNtp15450
tp15451
tp15452
sS'DAQmxWriteDigitalLines'
p15453
((lp15454
S'int32'
p15455
ag34
a((S'taskHandle'
p15456
(lp15457
S'TaskHandle'
p15458
aNtp15459
(S'numSampsPerChan'
p15460
(lp15461
S'int32'
p15462
aNtp15463
(S'autoStart'
p15464
(lp15465
S'bool32'
p15466
aNtp15467
(S'timeout'
p15468
(lp15469
S'float64'
p15470
aNtp15471
(S'dataLayout'
p15472
(lp15473
S'bool32'
p15474
aNtp15475
(S'writeArray'
p15476
(lp15477
S'uInt8'
p15478
a(lp15479
I-1
aaNtp15480
(S'sampsPerChanWritten'
p15481
(lp15482
S'int32'
p15483
ag42
aNtp15484
(S'reserved'
p15485
(lp15486
S'bool32'
p15487
ag42
aNtp15488
tp15489
tp15490
sS'DAQmxSetDigLvlPauseTrigDigFltrMinPulseWidth'
p15491
((lp15492
S'int32'
p15493
ag34
a((S'taskHandle'
p15494
(lp15495
S'TaskHandle'
p15496
aNtp15497
(S'data'
p15498
(lp15499
S'float64'
p15500
aNtp15501
tp15502
tp15503
sS'DAQmxGetSelfCalLastTemp'
p15504
((lp15505
S'int32'
p15506
ag34
a((S'deviceName'
p15507
(lp15508
S'char'
p15509
a(lp15510
I-1
aaNtp15511
(S'data'
p15512
(lp15513
S'float64'
p15514
ag42
aNtp15515
tp15516
tp15517
sS'DAQmxGetCITwoEdgeSepFirstDigFltrTimebaseSrc'
p15518
((lp15519
S'int32'
p15520
ag34
a((S'taskHandle'
p15521
(lp15522
S'TaskHandle'
p15523
aNtp15524
(S'channel'
p15525
(lp15526
S'char'
p15527
a(lp15528
I-1
aaNtp15529
(S'data'
p15530
(lp15531
S'char'
p15532
ag42
aNtp15533
(S'bufferSize'
p15534
(lp15535
S'uInt32'
p15536
aNtp15537
tp15538
tp15539
sS'DAQmxResetBufferAttribute'
p15540
((lp15541
S'int32'
p15542
ag34
a((S'taskHandle'
p15543
(lp15544
S'TaskHandle'
p15545
aNtp15546
(S'attribute'
p15547
(lp15548
S'int32'
p15549
aNtp15550
tp15551
tp15552
sS'DAQmxSetAODACRefAllowConnToGnd'
p15553
((lp15554
S'int32'
p15555
ag34
a((S'taskHandle'
p15556
(lp15557
S'TaskHandle'
p15558
aNtp15559
(S'channel'
p15560
(lp15561
S'char'
p15562
a(lp15563
I-1
aaNtp15564
(S'data'
p15565
(lp15566
S'bool32'
p15567
aNtp15568
tp15569
tp15570
sS'DAQmxGetScaleLinSlope'
p15571
((lp15572
S'int32'
p15573
ag34
a((S'scaleName'
p15574
(lp15575
S'char'
p15576
a(lp15577
I-1
aaNtp15578
(S'data'
p15579
(lp15580
S'float64'
p15581
ag42
aNtp15582
tp15583
tp15584
sS'DAQmxSetAnlgEdgeRefTrigSrc'
p15585
((lp15586
S'int32'
p15587
ag34
a((S'taskHandle'
p15588
(lp15589
S'TaskHandle'
p15590
aNtp15591
(S'data'
p15592
(lp15593
S'char'
p15594
ag42
aNtp15595
tp15596
tp15597
sS'DAQmxResetExportedAIConvClkOutputTerm'
p15598
((lp15599
S'int32'
p15600
ag34
a((S'taskHandle'
p15601
(lp15602
S'TaskHandle'
p15603
aNtp15604
tp15605
tp15606
sS'DAQmxResetAICurrentUnits'
p15607
((lp15608
S'int32'
p15609
ag34
a((S'taskHandle'
p15610
(lp15611
S'TaskHandle'
p15612
aNtp15613
(S'channel'
p15614
(lp15615
S'char'
p15616
a(lp15617
I-1
aaNtp15618
tp15619
tp15620
sS'DAQmxGetBufInputBufSize'
p15621
((lp15622
S'int32'
p15623
ag34
a((S'taskHandle'
p15624
(lp15625
S'TaskHandle'
p15626
aNtp15627
(S'data'
p15628
(lp15629
S'uInt32'
p15630
ag42
aNtp15631
tp15632
tp15633
sS'DAQmxSetDelayFromSampClkDelay'
p15634
((lp15635
S'int32'
p15636
ag34
a((S'taskHandle'
p15637
(lp15638
S'TaskHandle'
p15639
aNtp15640
(S'data'
p15641
(lp15642
S'float64'
p15643
aNtp15644
tp15645
tp15646
sS'DAQmxResetDevice'
p15647
((lp15648
S'int32'
p15649
ag34
a((S'deviceName'
p15650
(lp15651
S'char'
p15652
a(lp15653
I-1
aaNtp15654
tp15655
tp15656
sS'DAQmxSwitchCloseRelays'
p15657
((lp15658
S'int32'
p15659
ag34
a((S'relayList'
p15660
(lp15661
S'char'
p15662
a(lp15663
I-1
aaNtp15664
(S'waitForSettling'
p15665
(lp15666
S'bool32'
p15667
aNtp15668
tp15669
tp15670
sS'DAQmxResetChanAttribute'
p15671
((lp15672
S'int32'
p15673
ag34
a((S'taskHandle'
p15674
(lp15675
S'TaskHandle'
p15676
aNtp15677
(S'channel'
p15678
(lp15679
S'char'
p15680
a(lp15681
I-1
aaNtp15682
(S'attribute'
p15683
(lp15684
S'int32'
p15685
aNtp15686
tp15687
tp15688
sS'DAQmxResetAIAutoZeroMode'
p15689
((lp15690
S'int32'
p15691
ag34
a((S'taskHandle'
p15692
(lp15693
S'TaskHandle'
p15694
aNtp15695
(S'channel'
p15696
(lp15697
S'char'
p15698
a(lp15699
I-1
aaNtp15700
tp15701
tp15702
sS'DAQmxSetCIPeriodDigFltrTimebaseSrc'
p15703
((lp15704
S'int32'
p15705
ag34
a((S'taskHandle'
p15706
(lp15707
S'TaskHandle'
p15708
aNtp15709
(S'channel'
p15710
(lp15711
S'char'
p15712
a(lp15713
I-1
aaNtp15714
(S'data'
p15715
(lp15716
S'char'
p15717
ag42
aNtp15718
tp15719
tp15720
sS'DAQmxResetAIRngLow'
p15721
((lp15722
S'int32'
p15723
ag34
a((S'taskHandle'
p15724
(lp15725
S'TaskHandle'
p15726
aNtp15727
(S'channel'
p15728
(lp15729
S'char'
p15730
a(lp15731
I-1
aaNtp15732
tp15733
tp15734
sS'DAQmxSetCIPeriodUnits'
p15735
((lp15736
S'int32'
p15737
ag34
a((S'taskHandle'
p15738
(lp15739
S'TaskHandle'
p15740
aNtp15741
(S'channel'
p15742
(lp15743
S'char'
p15744
a(lp15745
I-1
aaNtp15746
(S'data'
p15747
(lp15748
S'int32'
p15749
aNtp15750
tp15751
tp15752
sS'DAQmxSwitchDisconnectAll'
p15753
((lp15754
S'int32'
p15755
ag34
a((S'deviceName'
p15756
(lp15757
S'char'
p15758
a(lp15759
I-1
aaNtp15760
(S'waitForSettling'
p15761
(lp15762
S'bool32'
p15763
aNtp15764
tp15765
tp15766
sS'DAQmxAdjustDSATimebaseCal'
p15767
((lp15768
S'int32'
p15769
ag34
a((S'calHandle'
p15770
(lp15771
S'uInt32'
p15772
aNtp15773
(S'referenceFrequency'
p15774
(lp15775
S'float64'
p15776
aNtp15777
tp15778
tp15779
sS'DAQmxGetCIEncoderZIndexEnable'
p15780
((lp15781
S'int32'
p15782
ag34
a((S'taskHandle'
p15783
(lp15784
S'TaskHandle'
p15785
aNtp15786
(S'channel'
p15787
(lp15788
S'char'
p15789
a(lp15790
I-1
aaNtp15791
(S'data'
p15792
(lp15793
S'bool32'
p15794
ag42
aNtp15795
tp15796
tp15797
sS'DAQmxResetInterlockedHshkTrigAssertedLvl'
p15798
((lp15799
S'int32'
p15800
ag34
a((S'taskHandle'
p15801
(lp15802
S'TaskHandle'
p15803
aNtp15804
tp15805
tp15806
sS'DAQmxResetCISemiPeriodDigFltrTimebaseRate'
p15807
((lp15808
S'int32'
p15809
ag34
a((S'taskHandle'
p15810
(lp15811
S'TaskHandle'
p15812
aNtp15813
(S'channel'
p15814
(lp15815
S'char'
p15816
a(lp15817
I-1
aaNtp15818
tp15819
tp15820
sS'DAQmxResetSampClkDigFltrTimebaseRate'
p15821
((lp15822
S'int32'
p15823
ag34
a((S'taskHandle'
p15824
(lp15825
S'TaskHandle'
p15826
aNtp15827
tp15828
tp15829
sS'DAQmxCreateTEDSAIRTDChan'
p15830
((lp15831
S'int32'
p15832
ag34
a((S'taskHandle'
p15833
(lp15834
S'TaskHandle'
p15835
aNtp15836
(S'physicalChannel'
p15837
(lp15838
S'char'
p15839
a(lp15840
I-1
aaNtp15841
(S'nameToAssignToChannel'
p15842
(lp15843
S'char'
p15844
a(lp15845
I-1
aaNtp15846
(S'minVal'
p15847
(lp15848
S'float64'
p15849
aNtp15850
(S'maxVal'
p15851
(lp15852
S'float64'
p15853
aNtp15854
(S'units'
p15855
(lp15856
S'int32'
p15857
aNtp15858
(S'resistanceConfig'
p15859
(lp15860
S'int32'
p15861
aNtp15862
(S'currentExcitSource'
p15863
(lp15864
S'int32'
p15865
aNtp15866
(S'currentExcitVal'
p15867
(lp15868
S'float64'
p15869
aNtp15870
tp15871
tp15872
sS'DAQmxGetCORdyForNewVal'
p15873
((lp15874
S'int32'
p15875
ag34
a((S'taskHandle'
p15876
(lp15877
S'TaskHandle'
p15878
aNtp15879
(S'channel'
p15880
(lp15881
S'char'
p15882
a(lp15883
I-1
aaNtp15884
(S'data'
p15885
(lp15886
S'bool32'
p15887
ag42
aNtp15888
tp15889
tp15890
sS'DAQmxSetCITwoEdgeSepFirstDigFltrMinPulseWidth'
p15891
((lp15892
S'int32'
p15893
ag34
a((S'taskHandle'
p15894
(lp15895
S'TaskHandle'
p15896
aNtp15897
(S'channel'
p15898
(lp15899
S'char'
p15900
a(lp15901
I-1
aaNtp15902
(S'data'
p15903
(lp15904
S'float64'
p15905
aNtp15906
tp15907
tp15908
sS'DAQmxResetAIChanCalEnableCal'
p15909
((lp15910
S'int32'
p15911
ag34
a((S'taskHandle'
p15912
(lp15913
S'TaskHandle'
p15914
aNtp15915
(S'channel'
p15916
(lp15917
S'char'
p15918
a(lp15919
I-1
aaNtp15920
tp15921
tp15922
sS'DAQmxResetAILVDTSensitivity'
p15923
((lp15924
S'int32'
p15925
ag34
a((S'taskHandle'
p15926
(lp15927
S'TaskHandle'
p15928
aNtp15929
(S'channel'
p15930
(lp15931
S'char'
p15932
a(lp15933
I-1
aaNtp15934
tp15935
tp15936
sS'DAQmxGetAIThrmstrB'
p15937
((lp15938
S'int32'
p15939
ag34
a((S'taskHandle'
p15940
(lp15941
S'TaskHandle'
p15942
aNtp15943
(S'channel'
p15944
(lp15945
S'char'
p15946
a(lp15947
I-1
aaNtp15948
(S'data'
p15949
(lp15950
S'float64'
p15951
ag42
aNtp15952
tp15953
tp15954
sS'DAQmxGetAIThrmstrA'
p15955
((lp15956
S'int32'
p15957
ag34
a((S'taskHandle'
p15958
(lp15959
S'TaskHandle'
p15960
aNtp15961
(S'channel'
p15962
(lp15963
S'char'
p15964
a(lp15965
I-1
aaNtp15966
(S'data'
p15967
(lp15968
S'float64'
p15969
ag42
aNtp15970
tp15971
tp15972
sS'DAQmxGetSyncPulseSrc'
p15973
((lp15974
S'int32'
p15975
ag34
a((S'taskHandle'
p15976
(lp15977
S'TaskHandle'
p15978
aNtp15979
(S'data'
p15980
(lp15981
S'char'
p15982
ag42
aNtp15983
(S'bufferSize'
p15984
(lp15985
S'uInt32'
p15986
aNtp15987
tp15988
tp15989
sS'DAQmxGetDelayFromSampClkDelay'
p15990
((lp15991
S'int32'
p15992
ag34
a((S'taskHandle'
p15993
(lp15994
S'TaskHandle'
p15995
aNtp15996
(S'data'
p15997
(lp15998
S'float64'
p15999
ag42
aNtp16000
tp16001
tp16002
sS'DAQmxSetAIRVDTSensitivityUnits'
p16003
((lp16004
S'int32'
p16005
ag34
a((S'taskHandle'
p16006
(lp16007
S'TaskHandle'
p16008
aNtp16009
(S'channel'
p16010
(lp16011
S'char'
p16012
a(lp16013
I-1
aaNtp16014
(S'data'
p16015
(lp16016
S'int32'
p16017
aNtp16018
tp16019
tp16020
sS'DAQmxSetAnlgWinPauseTrigWhen'
p16021
((lp16022
S'int32'
p16023
ag34
a((S'taskHandle'
p16024
(lp16025
S'TaskHandle'
p16026
aNtp16027
(S'data'
p16028
(lp16029
S'int32'
p16030
aNtp16031
tp16032
tp16033
sS'DAQmxSetDigLvlPauseTrigDigSyncEnable'
p16034
((lp16035
S'int32'
p16036
ag34
a((S'taskHandle'
p16037
(lp16038
S'TaskHandle'
p16039
aNtp16040
(S'data'
p16041
(lp16042
S'bool32'
p16043
aNtp16044
tp16045
tp16046
sS'DAQmxSetWatchdogExpirTrigType'
p16047
((lp16048
S'int32'
p16049
ag34
a((S'taskHandle'
p16050
(lp16051
S'TaskHandle'
p16052
aNtp16053
(S'data'
p16054
(lp16055
S'int32'
p16056
aNtp16057
tp16058
tp16059
sS'DAQmxResetCIEncoderZInputDigFltrTimebaseSrc'
p16060
((lp16061
S'int32'
p16062
ag34
a((S'taskHandle'
p16063
(lp16064
S'TaskHandle'
p16065
aNtp16066
(S'channel'
p16067
(lp16068
S'char'
p16069
a(lp16070
I-1
aaNtp16071
tp16072
tp16073
sS'DAQmxResetAODACRefVal'
p16074
((lp16075
S'int32'
p16076
ag34
a((S'taskHandle'
p16077
(lp16078
S'TaskHandle'
p16079
aNtp16080
(S'channel'
p16081
(lp16082
S'char'
p16083
a(lp16084
I-1
aaNtp16085
tp16086
tp16087
sS'DAQmxResetAIACExcitFreq'
p16088
((lp16089
S'int32'
p16090
ag34
a((S'taskHandle'
p16091
(lp16092
S'TaskHandle'
p16093
aNtp16094
(S'channel'
p16095
(lp16096
S'char'
p16097
a(lp16098
I-1
aaNtp16099
tp16100
tp16101
sS'DAQmxGetAIAccelSensitivity'
p16102
((lp16103
S'int32'
p16104
ag34
a((S'taskHandle'
p16105
(lp16106
S'TaskHandle'
p16107
aNtp16108
(S'channel'
p16109
(lp16110
S'char'
p16111
a(lp16112
I-1
aaNtp16113
(S'data'
p16114
(lp16115
S'float64'
p16116
ag42
aNtp16117
tp16118
tp16119
sS'DAQmxSetCIDupCountPrevent'
p16120
((lp16121
S'int32'
p16122
ag34
a((S'taskHandle'
p16123
(lp16124
S'TaskHandle'
p16125
aNtp16126
(S'channel'
p16127
(lp16128
S'char'
p16129
a(lp16130
I-1
aaNtp16131
(S'data'
p16132
(lp16133
S'bool32'
p16134
aNtp16135
tp16136
tp16137
sS'DAQmxResetAOMin'
p16138
((lp16139
S'int32'
p16140
ag34
a((S'taskHandle'
p16141
(lp16142
S'TaskHandle'
p16143
aNtp16144
(S'channel'
p16145
(lp16146
S'char'
p16147
a(lp16148
I-1
aaNtp16149
tp16150
tp16151
sS'DAQmxSwitchOpenRelays'
p16152
((lp16153
S'int32'
p16154
ag34
a((S'relayList'
p16155
(lp16156
S'char'
p16157
a(lp16158
I-1
aaNtp16159
(S'waitForSettling'
p16160
(lp16161
S'bool32'
p16162
aNtp16163
tp16164
tp16165
sS'DAQmxGetRefTrigPretrigSamples'
p16166
((lp16167
S'int32'
p16168
ag34
a((S'taskHandle'
p16169
(lp16170
S'TaskHandle'
p16171
aNtp16172
(S'data'
p16173
(lp16174
S'uInt32'
p16175
ag42
aNtp16176
tp16177
tp16178
sS'DAQmxWriteRaw'
p16179
((lp16180
S'int32'
p16181
ag34
a((S'taskHandle'
p16182
(lp16183
S'TaskHandle'
p16184
aNtp16185
(S'numSamps'
p16186
(lp16187
S'int32'
p16188
aNtp16189
(S'autoStart'
p16190
(lp16191
S'bool32'
p16192
aNtp16193
(S'timeout'
p16194
(lp16195
S'float64'
p16196
aNtp16197
(S'writeArray'
p16198
(lp16199
S'void'
p16200
ag42
aNtp16201
(S'sampsPerChanWritten'
p16202
(lp16203
S'int32'
p16204
ag42
aNtp16205
(S'reserved'
p16206
(lp16207
S'bool32'
p16208
ag42
aNtp16209
tp16210
tp16211
sS'DAQmxResetAIMax'
p16212
((lp16213
S'int32'
p16214
ag34
a((S'taskHandle'
p16215
(lp16216
S'TaskHandle'
p16217
aNtp16218
(S'channel'
p16219
(lp16220
S'char'
p16221
a(lp16222
I-1
aaNtp16223
tp16224
tp16225
sS'DAQmxResetAOOutputImpedance'
p16226
((lp16227
S'int32'
p16228
ag34
a((S'taskHandle'
p16229
(lp16230
S'TaskHandle'
p16231
aNtp16232
(S'channel'
p16233
(lp16234
S'char'
p16235
a(lp16236
I-1
aaNtp16237
tp16238
tp16239
sS'DAQmxSetExportedHshkEventDelay'
p16240
((lp16241
S'int32'
p16242
ag34
a((S'taskHandle'
p16243
(lp16244
S'TaskHandle'
p16245
aNtp16246
(S'data'
p16247
(lp16248
S'float64'
p16249
aNtp16250
tp16251
tp16252
sS'DAQmxGetMasterTimebaseSrc'
p16253
((lp16254
S'int32'
p16255
ag34
a((S'taskHandle'
p16256
(lp16257
S'TaskHandle'
p16258
aNtp16259
(S'data'
p16260
(lp16261
S'char'
p16262
ag42
aNtp16263
(S'bufferSize'
p16264
(lp16265
S'uInt32'
p16266
aNtp16267
tp16268
tp16269
sS'DAQmxGetCICtrTimebaseSrc'
p16270
((lp16271
S'int32'
p16272
ag34
a((S'taskHandle'
p16273
(lp16274
S'TaskHandle'
p16275
aNtp16276
(S'channel'
p16277
(lp16278
S'char'
p16279
a(lp16280
I-1
aaNtp16281
(S'data'
p16282
(lp16283
S'char'
p16284
ag42
aNtp16285
(S'bufferSize'
p16286
(lp16287
S'uInt32'
p16288
aNtp16289
tp16290
tp16291
sS'DAQmxResetAILossyLSBRemovalCompressedSampSize'
p16292
((lp16293
S'int32'
p16294
ag34
a((S'taskHandle'
p16295
(lp16296
S'TaskHandle'
p16297
aNtp16298
(S'channel'
p16299
(lp16300
S'char'
p16301
a(lp16302
I-1
aaNtp16303
tp16304
tp16305
sS'DAQmxResetMasterTimebaseRate'
p16306
((lp16307
S'int32'
p16308
ag34
a((S'taskHandle'
p16309
(lp16310
S'TaskHandle'
p16311
aNtp16312
tp16313
tp16314
sS'DAQmxGetCIFreqDigFltrTimebaseSrc'
p16315
((lp16316
S'int32'
p16317
ag34
a((S'taskHandle'
p16318
(lp16319
S'TaskHandle'
p16320
aNtp16321
(S'channel'
p16322
(lp16323
S'char'
p16324
a(lp16325
I-1
aaNtp16326
(S'data'
p16327
(lp16328
S'char'
p16329
ag42
aNtp16330
(S'bufferSize'
p16331
(lp16332
S'uInt32'
p16333
aNtp16334
tp16335
tp16336
sS'DAQmxResetWriteRegenMode'
p16337
((lp16338
S'int32'
p16339
ag34
a((S'taskHandle'
p16340
(lp16341
S'TaskHandle'
p16342
aNtp16343
tp16344
tp16345
sS'DAQmxGetExportedDividedSampClkTimebaseOutputTerm'
p16346
((lp16347
S'int32'
p16348
ag34
a((S'taskHandle'
p16349
(lp16350
S'TaskHandle'
p16351
aNtp16352
(S'data'
p16353
(lp16354
S'char'
p16355
ag42
aNtp16356
(S'bufferSize'
p16357
(lp16358
S'uInt32'
p16359
aNtp16360
tp16361
tp16362
sS'DAQmxGetAnlgLvlPauseTrigSrc'
p16363
((lp16364
S'int32'
p16365
ag34
a((S'taskHandle'
p16366
(lp16367
S'TaskHandle'
p16368
aNtp16369
(S'data'
p16370
(lp16371
S'char'
p16372
ag42
aNtp16373
(S'bufferSize'
p16374
(lp16375
S'uInt32'
p16376
aNtp16377
tp16378
tp16379
sS'DAQmxGetAIChanCalScaleType'
p16380
((lp16381
S'int32'
p16382
ag34
a((S'taskHandle'
p16383
(lp16384
S'TaskHandle'
p16385
aNtp16386
(S'channel'
p16387
(lp16388
S'char'
p16389
a(lp16390
I-1
aaNtp16391
(S'data'
p16392
(lp16393
S'int32'
p16394
ag42
aNtp16395
tp16396
tp16397
sS'DAQmxSetDOInvertLines'
p16398
((lp16399
S'int32'
p16400
ag34
a((S'taskHandle'
p16401
(lp16402
S'TaskHandle'
p16403
aNtp16404
(S'channel'
p16405
(lp16406
S'char'
p16407
a(lp16408
I-1
aaNtp16409
(S'data'
p16410
(lp16411
S'bool32'
p16412
aNtp16413
tp16414
tp16415
sS'DAQmxGetCOCtrTimebaseDigFltrMinPulseWidth'
p16416
((lp16417
S'int32'
p16418
ag34
a((S'taskHandle'
p16419
(lp16420
S'TaskHandle'
p16421
aNtp16422
(S'channel'
p16423
(lp16424
S'char'
p16425
a(lp16426
I-1
aaNtp16427
(S'data'
p16428
(lp16429
S'float64'
p16430
ag42
aNtp16431
tp16432
tp16433
sS'DAQmxSetExportedSyncPulseEventOutputTerm'
p16434
((lp16435
S'int32'
p16436
ag34
a((S'taskHandle'
p16437
(lp16438
S'TaskHandle'
p16439
aNtp16440
(S'data'
p16441
(lp16442
S'char'
p16443
ag42
aNtp16444
tp16445
tp16446
sS'DAQmxResetSyncPulseMinDelayToStart'
p16447
((lp16448
S'int32'
p16449
ag34
a((S'taskHandle'
p16450
(lp16451
S'TaskHandle'
p16452
aNtp16453
tp16454
tp16455
sS'DAQmxGetCIFreqDigFltrEnable'
p16456
((lp16457
S'int32'
p16458
ag34
a((S'taskHandle'
p16459
(lp16460
S'TaskHandle'
p16461
aNtp16462
(S'channel'
p16463
(lp16464
S'char'
p16465
a(lp16466
I-1
aaNtp16467
(S'data'
p16468
(lp16469
S'bool32'
p16470
ag42
aNtp16471
tp16472
tp16473
sS'DAQmxSetCIPulseWidthStartingEdge'
p16474
((lp16475
S'int32'
p16476
ag34
a((S'taskHandle'
p16477
(lp16478
S'TaskHandle'
p16479
aNtp16480
(S'channel'
p16481
(lp16482
S'char'
p16483
a(lp16484
I-1
aaNtp16485
(S'data'
p16486
(lp16487
S'int32'
p16488
aNtp16489
tp16490
tp16491
sS'DAQmxSetAIExcitUseForScaling'
p16492
((lp16493
S'int32'
p16494
ag34
a((S'taskHandle'
p16495
(lp16496
S'TaskHandle'
p16497
aNtp16498
(S'channel'
p16499
(lp16500
S'char'
p16501
a(lp16502
I-1
aaNtp16503
(S'data'
p16504
(lp16505
S'bool32'
p16506
aNtp16507
tp16508
tp16509
sS'DAQmxGetDOUseOnlyOnBrdMem'
p16510
((lp16511
S'int32'
p16512
ag34
a((S'taskHandle'
p16513
(lp16514
S'TaskHandle'
p16515
aNtp16516
(S'channel'
p16517
(lp16518
S'char'
p16519
a(lp16520
I-1
aaNtp16521
(S'data'
p16522
(lp16523
S'bool32'
p16524
ag42
aNtp16525
tp16526
tp16527
sS'DAQmxSetScaleDescr'
p16528
((lp16529
S'int32'
p16530
ag34
a((S'scaleName'
p16531
(lp16532
S'char'
p16533
a(lp16534
I-1
aaNtp16535
(S'data'
p16536
(lp16537
S'char'
p16538
ag42
aNtp16539
tp16540
tp16541
sS'DAQmxGetPhysicalChanTEDSTemplateIDs'
p16542
((lp16543
S'int32'
p16544
ag34
a((S'physicalChannel'
p16545
(lp16546
S'char'
p16547
a(lp16548
I-1
aaNtp16549
(S'data'
p16550
(lp16551
S'uInt32'
p16552
ag42
aNtp16553
(S'arraySizeInSamples'
p16554
(lp16555
S'uInt32'
p16556
aNtp16557
tp16558
tp16559
sS'DAQmxResetAIAccelSensitivityUnits'
p16560
((lp16561
S'int32'
p16562
ag34
a((S'taskHandle'
p16563
(lp16564
S'TaskHandle'
p16565
aNtp16566
(S'channel'
p16567
(lp16568
S'char'
p16569
a(lp16570
I-1
aaNtp16571
tp16572
tp16573
sS'DAQmxSaveTask'
p16574
((lp16575
S'int32'
p16576
ag34
a((S'taskHandle'
p16577
(lp16578
S'TaskHandle'
p16579
aNtp16580
(S'saveAs'
p16581
(lp16582
S'char'
p16583
a(lp16584
I-1
aaNtp16585
(S'author'
p16586
(lp16587
S'char'
p16588
a(lp16589
I-1
aaNtp16590
(S'options'
p16591
(lp16592
S'uInt32'
p16593
aNtp16594
tp16595
tp16596
sS'DAQmxGetScaleMapPreScaledMax'
p16597
((lp16598
S'int32'
p16599
ag34
a((S'scaleName'
p16600
(lp16601
S'char'
p16602
a(lp16603
I-1
aaNtp16604
(S'data'
p16605
(lp16606
S'float64'
p16607
ag42
aNtp16608
tp16609
tp16610
sS'DAQmxAdjust1125Cal'
p16611
((lp16612
S'int32'
p16613
ag34
a((S'calHandle'
p16614
(lp16615
S'uInt32'
p16616
aNtp16617
(S'refVoltage'
p16618
(lp16619
S'float64'
p16620
aNtp16621
(S'measOutput'
p16622
(lp16623
S'float64'
p16624
aNtp16625
tp16626
tp16627
sS'DAQmxSetCICtrTimebaseDigFltrEnable'
p16628
((lp16629
S'int32'
p16630
ag34
a((S'taskHandle'
p16631
(lp16632
S'TaskHandle'
p16633
aNtp16634
(S'channel'
p16635
(lp16636
S'char'
p16637
a(lp16638
I-1
aaNtp16639
(S'data'
p16640
(lp16641
S'bool32'
p16642
aNtp16643
tp16644
tp16645
sS'DAQmxGetPersistedTaskAllowInteractiveEditing'
p16646
((lp16647
S'int32'
p16648
ag34
a((S'taskName'
p16649
(lp16650
S'char'
p16651
a(lp16652
I-1
aaNtp16653
(S'data'
p16654
(lp16655
S'bool32'
p16656
ag42
aNtp16657
tp16658
tp16659
sS'DAQmxResetAOResolutionUnits'
p16660
((lp16661
S'int32'
p16662
ag34
a((S'taskHandle'
p16663
(lp16664
S'TaskHandle'
p16665
aNtp16666
(S'channel'
p16667
(lp16668
S'char'
p16669
a(lp16670
I-1
aaNtp16671
tp16672
tp16673
sS'DAQmxSetExportedAIConvClkOutputTerm'
p16674
((lp16675
S'int32'
p16676
ag34
a((S'taskHandle'
p16677
(lp16678
S'TaskHandle'
p16679
aNtp16680
(S'data'
p16681
(lp16682
S'char'
p16683
ag42
aNtp16684
tp16685
tp16686
sS'DAQmxSetAIChanCalApplyCalIfExp'
p16687
((lp16688
S'int32'
p16689
ag34
a((S'taskHandle'
p16690
(lp16691
S'TaskHandle'
p16692
aNtp16693
(S'channel'
p16694
(lp16695
S'char'
p16696
a(lp16697
I-1
aaNtp16698
(S'data'
p16699
(lp16700
S'bool32'
p16701
aNtp16702
tp16703
tp16704
sS'DAQmxSetCITwoEdgeSepFirstDigFltrEnable'
p16705
((lp16706
S'int32'
p16707
ag34
a((S'taskHandle'
p16708
(lp16709
S'TaskHandle'
p16710
aNtp16711
(S'channel'
p16712
(lp16713
S'char'
p16714
a(lp16715
I-1
aaNtp16716
(S'data'
p16717
(lp16718
S'bool32'
p16719
aNtp16720
tp16721
tp16722
sS'DAQmxGetCIPeriodDigSyncEnable'
p16723
((lp16724
S'int32'
p16725
ag34
a((S'taskHandle'
p16726
(lp16727
S'TaskHandle'
p16728
aNtp16729
(S'channel'
p16730
(lp16731
S'char'
p16732
a(lp16733
I-1
aaNtp16734
(S'data'
p16735
(lp16736
S'bool32'
p16737
ag42
aNtp16738
tp16739
tp16740
sS'DAQmxSetAOCustomScaleName'
p16741
((lp16742
S'int32'
p16743
ag34
a((S'taskHandle'
p16744
(lp16745
S'TaskHandle'
p16746
aNtp16747
(S'channel'
p16748
(lp16749
S'char'
p16750
a(lp16751
I-1
aaNtp16752
(S'data'
p16753
(lp16754
S'char'
p16755
ag42
aNtp16756
tp16757
tp16758
sS'DAQmxGetSampClkTimebaseDiv'
p16759
((lp16760
S'int32'
p16761
ag34
a((S'taskHandle'
p16762
(lp16763
S'TaskHandle'
p16764
aNtp16765
(S'data'
p16766
(lp16767
S'uInt32'
p16768
ag42
aNtp16769
tp16770
tp16771
sS'DAQmxSetAIBridgeShuntCalGainAdjust'
p16772
((lp16773
S'int32'
p16774
ag34
a((S'taskHandle'
p16775
(lp16776
S'TaskHandle'
p16777
aNtp16778
(S'channel'
p16779
(lp16780
S'char'
p16781
a(lp16782
I-1
aaNtp16783
(S'data'
p16784
(lp16785
S'float64'
p16786
aNtp16787
tp16788
tp16789
sS'DAQmxGetAILowpassSwitchCapOutClkDiv'
p16790
((lp16791
S'int32'
p16792
ag34
a((S'taskHandle'
p16793
(lp16794
S'TaskHandle'
p16795
aNtp16796
(S'channel'
p16797
(lp16798
S'char'
p16799
a(lp16800
I-1
aaNtp16801
(S'data'
p16802
(lp16803
S'uInt32'
p16804
ag42
aNtp16805
tp16806
tp16807
sS'DAQmxGetAIResistanceCfg'
p16808
((lp16809
S'int32'
p16810
ag34
a((S'taskHandle'
p16811
(lp16812
S'TaskHandle'
p16813
aNtp16814
(S'channel'
p16815
(lp16816
S'char'
p16817
a(lp16818
I-1
aaNtp16819
(S'data'
p16820
(lp16821
S'int32'
p16822
ag42
aNtp16823
tp16824
tp16825
sS'DAQmxGetAnlgWinRefTrigSrc'
p16826
((lp16827
S'int32'
p16828
ag34
a((S'taskHandle'
p16829
(lp16830
S'TaskHandle'
p16831
aNtp16832
(S'data'
p16833
(lp16834
S'char'
p16835
ag42
aNtp16836
(S'bufferSize'
p16837
(lp16838
S'uInt32'
p16839
aNtp16840
tp16841
tp16842
sS'DAQmxGetSampClkDigFltrTimebaseRate'
p16843
((lp16844
S'int32'
p16845
ag34
a((S'taskHandle'
p16846
(lp16847
S'TaskHandle'
p16848
aNtp16849
(S'data'
p16850
(lp16851
S'float64'
p16852
ag42
aNtp16853
tp16854
tp16855
sS'DAQmxResetCITwoEdgeSepFirstEdge'
p16856
((lp16857
S'int32'
p16858
ag34
a((S'taskHandle'
p16859
(lp16860
S'TaskHandle'
p16861
aNtp16862
(S'channel'
p16863
(lp16864
S'char'
p16865
a(lp16866
I-1
aaNtp16867
tp16868
tp16869
sS'DAQmxSetCITwoEdgeSepFirstEdge'
p16870
((lp16871
S'int32'
p16872
ag34
a((S'taskHandle'
p16873
(lp16874
S'TaskHandle'
p16875
aNtp16876
(S'channel'
p16877
(lp16878
S'char'
p16879
a(lp16880
I-1
aaNtp16881
(S'data'
p16882
(lp16883
S'int32'
p16884
aNtp16885
tp16886
tp16887
sS'DAQmxSetCIEncoderAInputDigFltrTimebaseRate'
p16888
((lp16889
S'int32'
p16890
ag34
a((S'taskHandle'
p16891
(lp16892
S'TaskHandle'
p16893
aNtp16894
(S'channel'
p16895
(lp16896
S'char'
p16897
a(lp16898
I-1
aaNtp16899
(S'data'
p16900
(lp16901
S'float64'
p16902
aNtp16903
tp16904
tp16905
sS'DAQmxGetDevSerialNum'
p16906
((lp16907
S'int32'
p16908
ag34
a((S'device'
p16909
(lp16910
S'char'
p16911
a(lp16912
I-1
aaNtp16913
(S'data'
p16914
(lp16915
S'uInt32'
p16916
ag42
aNtp16917
tp16918
tp16919
sS'DAQmxGetAODACRngHigh'
p16920
((lp16921
S'int32'
p16922
ag34
a((S'taskHandle'
p16923
(lp16924
S'TaskHandle'
p16925
aNtp16926
(S'channel'
p16927
(lp16928
S'char'
p16929
a(lp16930
I-1
aaNtp16931
(S'data'
p16932
(lp16933
S'float64'
p16934
ag42
aNtp16935
tp16936
tp16937
sS'DAQmxGetCIPulseWidthStartingEdge'
p16938
((lp16939
S'int32'
p16940
ag34
a((S'taskHandle'
p16941
(lp16942
S'TaskHandle'
p16943
aNtp16944
(S'channel'
p16945
(lp16946
S'char'
p16947
a(lp16948
I-1
aaNtp16949
(S'data'
p16950
(lp16951
S'int32'
p16952
ag42
aNtp16953
tp16954
tp16955
sS'DAQmxGetReadRelativeTo'
p16956
((lp16957
S'int32'
p16958
ag34
a((S'taskHandle'
p16959
(lp16960
S'TaskHandle'
p16961
aNtp16962
(S'data'
p16963
(lp16964
S'int32'
p16965
ag42
aNtp16966
tp16967
tp16968
sS'DAQmxCreateTEDSAIAccelChan'
p16969
((lp16970
S'int32'
p16971
ag34
a((S'taskHandle'
p16972
(lp16973
S'TaskHandle'
p16974
aNtp16975
(S'physicalChannel'
p16976
(lp16977
S'char'
p16978
a(lp16979
I-1
aaNtp16980
(S'nameToAssignToChannel'
p16981
(lp16982
S'char'
p16983
a(lp16984
I-1
aaNtp16985
(S'terminalConfig'
p16986
(lp16987
S'int32'
p16988
aNtp16989
(S'minVal'
p16990
(lp16991
S'float64'
p16992
aNtp16993
(S'maxVal'
p16994
(lp16995
S'float64'
p16996
aNtp16997
(S'units'
p16998
(lp16999
S'int32'
p17000
aNtp17001
(S'currentExcitSource'
p17002
(lp17003
S'int32'
p17004
aNtp17005
(S'currentExcitVal'
p17006
(lp17007
S'float64'
p17008
aNtp17009
(S'customScaleName'
p17010
(lp17011
S'char'
p17012
a(lp17013
I-1
aaNtp17014
tp17015
tp17016
sS'DAQmxGetCIEncoderBInputDigFltrTimebaseSrc'
p17017
((lp17018
S'int32'
p17019
ag34
a((S'taskHandle'
p17020
(lp17021
S'TaskHandle'
p17022
aNtp17023
(S'channel'
p17024
(lp17025
S'char'
p17026
a(lp17027
I-1
aaNtp17028
(S'data'
p17029
(lp17030
S'char'
p17031
ag42
aNtp17032
(S'bufferSize'
p17033
(lp17034
S'uInt32'
p17035
aNtp17036
tp17037
tp17038
sS'DAQmxResetAIThrmcplType'
p17039
((lp17040
S'int32'
p17041
ag34
a((S'taskHandle'
p17042
(lp17043
S'TaskHandle'
p17044
aNtp17045
(S'channel'
p17046
(lp17047
S'char'
p17048
a(lp17049
I-1
aaNtp17050
tp17051
tp17052
sS'DAQmxGetWatchdogDOExpirState'
p17053
((lp17054
S'int32'
p17055
ag34
a((S'taskHandle'
p17056
(lp17057
S'TaskHandle'
p17058
aNtp17059
(S'channel'
p17060
(lp17061
S'char'
p17062
a(lp17063
I-1
aaNtp17064
(S'data'
p17065
(lp17066
S'int32'
p17067
ag42
aNtp17068
tp17069
tp17070
sS'DAQmxGetDigLvlPauseTrigWhen'
p17071
((lp17072
S'int32'
p17073
ag34
a((S'taskHandle'
p17074
(lp17075
S'TaskHandle'
p17076
aNtp17077
(S'data'
p17078
(lp17079
S'int32'
p17080
ag42
aNtp17081
tp17082
tp17083
sS'DAQmxSetExportedAdvTrigPulseWidth'
p17084
((lp17085
S'int32'
p17086
ag34
a((S'taskHandle'
p17087
(lp17088
S'TaskHandle'
p17089
aNtp17090
(S'data'
p17091
(lp17092
S'float64'
p17093
aNtp17094
tp17095
tp17096
sS'DAQmxGetDelayFromSampClkDelayUnits'
p17097
((lp17098
S'int32'
p17099
ag34
a((S'taskHandle'
p17100
(lp17101
S'TaskHandle'
p17102
aNtp17103
(S'data'
p17104
(lp17105
S'int32'
p17106
ag42
aNtp17107
tp17108
tp17109
sS'DAQmxSetCIFreqUnits'
p17110
((lp17111
S'int32'
p17112
ag34
a((S'taskHandle'
p17113
(lp17114
S'TaskHandle'
p17115
aNtp17116
(S'channel'
p17117
(lp17118
S'char'
p17119
a(lp17120
I-1
aaNtp17121
(S'data'
p17122
(lp17123
S'int32'
p17124
aNtp17125
tp17126
tp17127
sS'DAQmxResetExportedAdvTrigOutputTerm'
p17128
((lp17129
S'int32'
p17130
ag34
a((S'taskHandle'
p17131
(lp17132
S'TaskHandle'
p17133
aNtp17134
tp17135
tp17136
sS'DAQmxSetSampClkDigFltrMinPulseWidth'
p17137
((lp17138
S'int32'
p17139
ag34
a((S'taskHandle'
p17140
(lp17141
S'TaskHandle'
p17142
aNtp17143
(S'data'
p17144
(lp17145
S'float64'
p17146
aNtp17147
tp17148
tp17149
sS'DAQmxGetAdvTrigType'
p17150
((lp17151
S'int32'
p17152
ag34
a((S'taskHandle'
p17153
(lp17154
S'TaskHandle'
p17155
aNtp17156
(S'data'
p17157
(lp17158
S'int32'
p17159
ag42
aNtp17160
tp17161
tp17162
sS'DAQmxGetAnlgWinStartTrigSrc'
p17163
((lp17164
S'int32'
p17165
ag34
a((S'taskHandle'
p17166
(lp17167
S'TaskHandle'
p17168
aNtp17169
(S'data'
p17170
(lp17171
S'char'
p17172
ag42
aNtp17173
(S'bufferSize'
p17174
(lp17175
S'uInt32'
p17176
aNtp17177
tp17178
tp17179
sS'DAQmxGetDOTristate'
p17180
((lp17181
S'int32'
p17182
ag34
a((S'taskHandle'
p17183
(lp17184
S'TaskHandle'
p17185
aNtp17186
(S'channel'
p17187
(lp17188
S'char'
p17189
a(lp17190
I-1
aaNtp17191
(S'data'
p17192
(lp17193
S'bool32'
p17194
ag42
aNtp17195
tp17196
tp17197
sS'DAQmxGetAILVDTSensitivityUnits'
p17198
((lp17199
S'int32'
p17200
ag34
a((S'taskHandle'
p17201
(lp17202
S'TaskHandle'
p17203
aNtp17204
(S'channel'
p17205
(lp17206
S'char'
p17207
a(lp17208
I-1
aaNtp17209
(S'data'
p17210
(lp17211
S'int32'
p17212
ag42
aNtp17213
tp17214
tp17215
sS'DAQmxSetAIThrmstrR1'
p17216
((lp17217
S'int32'
p17218
ag34
a((S'taskHandle'
p17219
(lp17220
S'TaskHandle'
p17221
aNtp17222
(S'channel'
p17223
(lp17224
S'char'
p17225
a(lp17226
I-1
aaNtp17227
(S'data'
p17228
(lp17229
S'float64'
p17230
aNtp17231
tp17232
tp17233
sS'DAQmxSetCOPulseHighTime'
p17234
((lp17235
S'int32'
p17236
ag34
a((S'taskHandle'
p17237
(lp17238
S'TaskHandle'
p17239
aNtp17240
(S'channel'
p17241
(lp17242
S'char'
p17243
a(lp17244
I-1
aaNtp17245
(S'data'
p17246
(lp17247
S'float64'
p17248
aNtp17249
tp17250
tp17251
sS'DAQmxSetChangeDetectDIFallingEdgePhysicalChans'
p17252
((lp17253
S'int32'
p17254
ag34
a((S'taskHandle'
p17255
(lp17256
S'TaskHandle'
p17257
aNtp17258
(S'data'
p17259
(lp17260
S'char'
p17261
ag42
aNtp17262
tp17263
tp17264
sS'DAQmxGetCOCtrTimebaseDigFltrEnable'
p17265
((lp17266
S'int32'
p17267
ag34
a((S'taskHandle'
p17268
(lp17269
S'TaskHandle'
p17270
aNtp17271
(S'channel'
p17272
(lp17273
S'char'
p17274
a(lp17275
I-1
aaNtp17276
(S'data'
p17277
(lp17278
S'bool32'
p17279
ag42
aNtp17280
tp17281
tp17282
sS'DAQmxSetAIStrainUnits'
p17283
((lp17284
S'int32'
p17285
ag34
a((S'taskHandle'
p17286
(lp17287
S'TaskHandle'
p17288
aNtp17289
(S'channel'
p17290
(lp17291
S'char'
p17292
a(lp17293
I-1
aaNtp17294
(S'data'
p17295
(lp17296
S'int32'
p17297
aNtp17298
tp17299
tp17300
sS'DAQmxResetHshkSampleInputDataWhen'
p17301
((lp17302
S'int32'
p17303
ag34
a((S'taskHandle'
p17304
(lp17305
S'TaskHandle'
p17306
aNtp17307
tp17308
tp17309
sS'DAQmxSetScaleScaledUnits'
p17310
((lp17311
S'int32'
p17312
ag34
a((S'scaleName'
p17313
(lp17314
S'char'
p17315
a(lp17316
I-1
aaNtp17317
(S'data'
p17318
(lp17319
S'char'
p17320
ag42
aNtp17321
tp17322
tp17323
sS'DAQmxGetSwitchChanUsage'
p17324
((lp17325
S'int32'
p17326
ag34
a((S'switchChannelName'
p17327
(lp17328
S'char'
p17329
a(lp17330
I-1
aaNtp17331
(S'data'
p17332
(lp17333
S'int32'
p17334
ag42
aNtp17335
tp17336
tp17337
sS'DAQmxResetExportedAIHoldCmpltEventPulsePolarity'
p17338
((lp17339
S'int32'
p17340
ag34
a((S'taskHandle'
p17341
(lp17342
S'TaskHandle'
p17343
aNtp17344
tp17345
tp17346
sS'DAQmxSetCIEncoderZIndexPhase'
p17347
((lp17348
S'int32'
p17349
ag34
a((S'taskHandle'
p17350
(lp17351
S'TaskHandle'
p17352
aNtp17353
(S'channel'
p17354
(lp17355
S'char'
p17356
a(lp17357
I-1
aaNtp17358
(S'data'
p17359
(lp17360
S'int32'
p17361
aNtp17362
tp17363
tp17364
sS'DAQmxGetExportedCtrOutEventToggleIdleState'
p17365
((lp17366
S'int32'
p17367
ag34
a((S'taskHandle'
p17368
(lp17369
S'TaskHandle'
p17370
aNtp17371
(S'data'
p17372
(lp17373
S'int32'
p17374
ag42
aNtp17375
tp17376
tp17377
sS'DAQmxGetAILowpassSwitchCapExtClkDiv'
p17378
((lp17379
S'int32'
p17380
ag34
a((S'taskHandle'
p17381
(lp17382
S'TaskHandle'
p17383
aNtp17384
(S'channel'
p17385
(lp17386
S'char'
p17387
a(lp17388
I-1
aaNtp17389
(S'data'
p17390
(lp17391
S'uInt32'
p17392
ag42
aNtp17393
tp17394
tp17395
sS'DAQmxResetCIMax'
p17396
((lp17397
S'int32'
p17398
ag34
a((S'taskHandle'
p17399
(lp17400
S'TaskHandle'
p17401
aNtp17402
(S'channel'
p17403
(lp17404
S'char'
p17405
a(lp17406
I-1
aaNtp17407
tp17408
tp17409
sS'DAQmxSetExported10MHzRefClkOutputTerm'
p17410
((lp17411
S'int32'
p17412
ag34
a((S'taskHandle'
p17413
(lp17414
S'TaskHandle'
p17415
aNtp17416
(S'data'
p17417
(lp17418
S'char'
p17419
ag42
aNtp17420
tp17421
tp17422
sS'DAQmxSetCIFreqDigFltrEnable'
p17423
((lp17424
S'int32'
p17425
ag34
a((S'taskHandle'
p17426
(lp17427
S'TaskHandle'
p17428
aNtp17429
(S'channel'
p17430
(lp17431
S'char'
p17432
a(lp17433
I-1
aaNtp17434
(S'data'
p17435
(lp17436
S'bool32'
p17437
aNtp17438
tp17439
tp17440
sS'DAQmxGetCIPulseWidthDigFltrTimebaseRate'
p17441
((lp17442
S'int32'
p17443
ag34
a((S'taskHandle'
p17444
(lp17445
S'TaskHandle'
p17446
aNtp17447
(S'channel'
p17448
(lp17449
S'char'
p17450
a(lp17451
I-1
aaNtp17452
(S'data'
p17453
(lp17454
S'float64'
p17455
ag42
aNtp17456
tp17457
tp17458
sS'DAQmxResetAIThrmstrA'
p17459
((lp17460
S'int32'
p17461
ag34
a((S'taskHandle'
p17462
(lp17463
S'TaskHandle'
p17464
aNtp17465
(S'channel'
p17466
(lp17467
S'char'
p17468
a(lp17469
I-1
aaNtp17470
tp17471
tp17472
sS'DAQmxResetAIThrmstrB'
p17473
((lp17474
S'int32'
p17475
ag34
a((S'taskHandle'
p17476
(lp17477
S'TaskHandle'
p17478
aNtp17479
(S'channel'
p17480
(lp17481
S'char'
p17482
a(lp17483
I-1
aaNtp17484
tp17485
tp17486
sS'DAQmxResetAIThrmstrC'
p17487
((lp17488
S'int32'
p17489
ag34
a((S'taskHandle'
p17490
(lp17491
S'TaskHandle'
p17492
aNtp17493
(S'channel'
p17494
(lp17495
S'char'
p17496
a(lp17497
I-1
aaNtp17498
tp17499
tp17500
sS'DAQmxGetCIEncoderZIndexPhase'
p17501
((lp17502
S'int32'
p17503
ag34
a((S'taskHandle'
p17504
(lp17505
S'TaskHandle'
p17506
aNtp17507
(S'channel'
p17508
(lp17509
S'char'
p17510
a(lp17511
I-1
aaNtp17512
(S'data'
p17513
(lp17514
S'int32'
p17515
ag42
aNtp17516
tp17517
tp17518
sS'DAQmxSetAIACExcitFreq'
p17519
((lp17520
S'int32'
p17521
ag34
a((S'taskHandle'
p17522
(lp17523
S'TaskHandle'
p17524
aNtp17525
(S'channel'
p17526
(lp17527
S'char'
p17528
a(lp17529
I-1
aaNtp17530
(S'data'
p17531
(lp17532
S'float64'
p17533
aNtp17534
tp17535
tp17536
sS'DAQmxGetDIDigFltrEnable'
p17537
((lp17538
S'int32'
p17539
ag34
a((S'taskHandle'
p17540
(lp17541
S'TaskHandle'
p17542
aNtp17543
(S'channel'
p17544
(lp17545
S'char'
p17546
a(lp17547
I-1
aaNtp17548
(S'data'
p17549
(lp17550
S'bool32'
p17551
ag42
aNtp17552
tp17553
tp17554
sS'DAQmxSetAIChanCalExpDate'
p17555
((lp17556
S'int32'
p17557
ag34
a((S'taskHandle'
p17558
(lp17559
S'TaskHandle'
p17560
aNtp17561
(S'channelName'
p17562
(lp17563
S'char'
p17564
a(lp17565
I-1
aaNtp17566
(S'year'
p17567
(lp17568
S'uInt32'
p17569
aNtp17570
(S'month'
p17571
(lp17572
S'uInt32'
p17573
aNtp17574
(S'day'
p17575
(lp17576
S'uInt32'
p17577
aNtp17578
(S'hour'
p17579
(lp17580
S'uInt32'
p17581
aNtp17582
(S'minute'
p17583
(lp17584
S'uInt32'
p17585
aNtp17586
tp17587
tp17588
sS'DAQmxGetPersistedChanAuthor'
p17589
((lp17590
S'int32'
p17591
ag34
a((S'channel'
p17592
(lp17593
S'char'
p17594
a(lp17595
I-1
aaNtp17596
(S'data'
p17597
(lp17598
S'char'
p17599
ag42
aNtp17600
(S'bufferSize'
p17601
(lp17602
S'uInt32'
p17603
aNtp17604
tp17605
tp17606
sS'DAQmxSwitchGetSingleRelayPos'
p17607
((lp17608
S'int32'
p17609
ag34
a((S'relayName'
p17610
(lp17611
S'char'
p17612
a(lp17613
I-1
aaNtp17614
(S'relayPos'
p17615
(lp17616
S'uInt32'
p17617
ag42
aNtp17618
tp17619
tp17620
sS'DAQmxResetDigPatternStartTrigSrc'
p17621
((lp17622
S'int32'
p17623
ag34
a((S'taskHandle'
p17624
(lp17625
S'TaskHandle'
p17626
aNtp17627
tp17628
tp17629
sS'DAQmxSetCIPeriodDiv'
p17630
((lp17631
S'int32'
p17632
ag34
a((S'taskHandle'
p17633
(lp17634
S'TaskHandle'
p17635
aNtp17636
(S'channel'
p17637
(lp17638
S'char'
p17639
a(lp17640
I-1
aaNtp17641
(S'data'
p17642
(lp17643
S'uInt32'
p17644
aNtp17645
tp17646
tp17647
sS'DAQmxWriteDigitalU32'
p17648
((lp17649
S'int32'
p17650
ag34
a((S'taskHandle'
p17651
(lp17652
S'TaskHandle'
p17653
aNtp17654
(S'numSampsPerChan'
p17655
(lp17656
S'int32'
p17657
aNtp17658
(S'autoStart'
p17659
(lp17660
S'bool32'
p17661
aNtp17662
(S'timeout'
p17663
(lp17664
S'float64'
p17665
aNtp17666
(S'dataLayout'
p17667
(lp17668
S'bool32'
p17669
aNtp17670
(S'writeArray'
p17671
(lp17672
S'uInt32'
p17673
a(lp17674
I-1
aaNtp17675
(S'sampsPerChanWritten'
p17676
(lp17677
S'int32'
p17678
ag42
aNtp17679
(S'reserved'
p17680
(lp17681
S'bool32'
p17682
ag42
aNtp17683
tp17684
tp17685
sS'DAQmxGetSwitchScanRepeatMode'
p17686
((lp17687
S'int32'
p17688
ag34
a((S'taskHandle'
p17689
(lp17690
S'TaskHandle'
p17691
aNtp17692
(S'data'
p17693
(lp17694
S'int32'
p17695
ag42
aNtp17696
tp17697
tp17698
sS'DAQmxResetCILinEncoderUnits'
p17699
((lp17700
S'int32'
p17701
ag34
a((S'taskHandle'
p17702
(lp17703
S'TaskHandle'
p17704
aNtp17705
(S'channel'
p17706
(lp17707
S'char'
p17708
a(lp17709
I-1
aaNtp17710
tp17711
tp17712
sS'DAQmxSetCIPulseWidthDigFltrTimebaseRate'
p17713
((lp17714
S'int32'
p17715
ag34
a((S'taskHandle'
p17716
(lp17717
S'TaskHandle'
p17718
aNtp17719
(S'channel'
p17720
(lp17721
S'char'
p17722
a(lp17723
I-1
aaNtp17724
(S'data'
p17725
(lp17726
S'float64'
p17727
aNtp17728
tp17729
tp17730
sS'DAQmxSetChanDescr'
p17731
((lp17732
S'int32'
p17733
ag34
a((S'taskHandle'
p17734
(lp17735
S'TaskHandle'
p17736
aNtp17737
(S'channel'
p17738
(lp17739
S'char'
p17740
a(lp17741
I-1
aaNtp17742
(S'data'
p17743
(lp17744
S'char'
p17745
ag42
aNtp17746
tp17747
tp17748
sS'DAQmxGetRefClkSrc'
p17749
((lp17750
S'int32'
p17751
ag34
a((S'taskHandle'
p17752
(lp17753
S'TaskHandle'
p17754
aNtp17755
(S'data'
p17756
(lp17757
S'char'
p17758
ag42
aNtp17759
(S'bufferSize'
p17760
(lp17761
S'uInt32'
p17762
aNtp17763
tp17764
tp17765
sS'DAQmxResetDigEdgeAdvTrigEdge'
p17766
((lp17767
S'int32'
p17768
ag34
a((S'taskHandle'
p17769
(lp17770
S'TaskHandle'
p17771
aNtp17772
tp17773
tp17774
sS'DAQmxResetAIExcitVoltageOrCurrent'
p17775
((lp17776
S'int32'
p17777
ag34
a((S'taskHandle'
p17778
(lp17779
S'TaskHandle'
p17780
aNtp17781
(S'channel'
p17782
(lp17783
S'char'
p17784
a(lp17785
I-1
aaNtp17786
tp17787
tp17788
sS'DAQmxSetDigPatternRefTrigWhen'
p17789
((lp17790
S'int32'
p17791
ag34
a((S'taskHandle'
p17792
(lp17793
S'TaskHandle'
p17794
aNtp17795
(S'data'
p17796
(lp17797
S'int32'
p17798
aNtp17799
tp17800
tp17801
sS'DAQmxGetAnlgWinRefTrigCoupling'
p17802
((lp17803
S'int32'
p17804
ag34
a((S'taskHandle'
p17805
(lp17806
S'TaskHandle'
p17807
aNtp17808
(S'data'
p17809
(lp17810
S'int32'
p17811
ag42
aNtp17812
tp17813
tp17814
sS'DAQmxGetBufOutputBufSize'
p17815
((lp17816
S'int32'
p17817
ag34
a((S'taskHandle'
p17818
(lp17819
S'TaskHandle'
p17820
aNtp17821
(S'data'
p17822
(lp17823
S'uInt32'
p17824
ag42
aNtp17825
tp17826
tp17827
sS'DAQmxSetCIEncoderZIndexVal'
p17828
((lp17829
S'int32'
p17830
ag34
a((S'taskHandle'
p17831
(lp17832
S'TaskHandle'
p17833
aNtp17834
(S'channel'
p17835
(lp17836
S'char'
p17837
a(lp17838
I-1
aaNtp17839
(S'data'
p17840
(lp17841
S'float64'
p17842
aNtp17843
tp17844
tp17845
sS'DAQmxResetAIAccelUnits'
p17846
((lp17847
S'int32'
p17848
ag34
a((S'taskHandle'
p17849
(lp17850
S'TaskHandle'
p17851
aNtp17852
(S'channel'
p17853
(lp17854
S'char'
p17855
a(lp17856
I-1
aaNtp17857
tp17858
tp17859
sS'DAQmxGetExportedAIHoldCmpltEventOutputTerm'
p17860
((lp17861
S'int32'
p17862
ag34
a((S'taskHandle'
p17863
(lp17864
S'TaskHandle'
p17865
aNtp17866
(S'data'
p17867
(lp17868
S'char'
p17869
ag42
aNtp17870
(S'bufferSize'
p17871
(lp17872
S'uInt32'
p17873
aNtp17874
tp17875
tp17876
sS'DAQmxResetInterlockedHshkTrigSrc'
p17877
((lp17878
S'int32'
p17879
ag34
a((S'taskHandle'
p17880
(lp17881
S'TaskHandle'
p17882
aNtp17883
tp17884
tp17885
sS'DAQmxCreateAIPosRVDTChan'
p17886
((lp17887
S'int32'
p17888
ag34
a((S'taskHandle'
p17889
(lp17890
S'TaskHandle'
p17891
aNtp17892
(S'physicalChannel'
p17893
(lp17894
S'char'
p17895
a(lp17896
I-1
aaNtp17897
(S'nameToAssignToChannel'
p17898
(lp17899
S'char'
p17900
a(lp17901
I-1
aaNtp17902
(S'minVal'
p17903
(lp17904
S'float64'
p17905
aNtp17906
(S'maxVal'
p17907
(lp17908
S'float64'
p17909
aNtp17910
(S'units'
p17911
(lp17912
S'int32'
p17913
aNtp17914
(S'sensitivity'
p17915
(lp17916
S'float64'
p17917
aNtp17918
(S'sensitivityUnits'
p17919
(lp17920
S'int32'
p17921
aNtp17922
(S'voltageExcitSource'
p17923
(lp17924
S'int32'
p17925
aNtp17926
(S'voltageExcitVal'
p17927
(lp17928
S'float64'
p17929
aNtp17930
(S'voltageExcitFreq'
p17931
(lp17932
S'float64'
p17933
aNtp17934
(S'ACExcitWireMode'
p17935
(lp17936
S'int32'
p17937
aNtp17938
(S'customScaleName'
p17939
(lp17940
S'char'
p17941
a(lp17942
I-1
aaNtp17943
tp17944
tp17945
sS'DAQmxResetCICtrTimebaseDigFltrTimebaseSrc'
p17946
((lp17947
S'int32'
p17948
ag34
a((S'taskHandle'
p17949
(lp17950
S'TaskHandle'
p17951
aNtp17952
(S'channel'
p17953
(lp17954
S'char'
p17955
a(lp17956
I-1
aaNtp17957
tp17958
tp17959
sS'DAQmxResetCIFreqDigFltrMinPulseWidth'
p17960
((lp17961
S'int32'
p17962
ag34
a((S'taskHandle'
p17963
(lp17964
S'TaskHandle'
p17965
aNtp17966
(S'channel'
p17967
(lp17968
S'char'
p17969
a(lp17970
I-1
aaNtp17971
tp17972
tp17973
sS'DAQmxGetAIChanCalPolyForwardCoeff'
p17974
((lp17975
S'int32'
p17976
ag34
a((S'taskHandle'
p17977
(lp17978
S'TaskHandle'
p17979
aNtp17980
(S'channel'
p17981
(lp17982
S'char'
p17983
a(lp17984
I-1
aaNtp17985
(S'data'
p17986
(lp17987
S'float64'
p17988
ag42
aNtp17989
(S'arraySizeInSamples'
p17990
(lp17991
S'uInt32'
p17992
aNtp17993
tp17994
tp17995
sS'DAQmxCreateCOPulseChanTime'
p17996
((lp17997
S'int32'
p17998
ag34
a((S'taskHandle'
p17999
(lp18000
S'TaskHandle'
p18001
aNtp18002
(S'counter'
p18003
(lp18004
S'char'
p18005
a(lp18006
I-1
aaNtp18007
(S'nameToAssignToChannel'
p18008
(lp18009
S'char'
p18010
a(lp18011
I-1
aaNtp18012
(S'units'
p18013
(lp18014
S'int32'
p18015
aNtp18016
(S'idleState'
p18017
(lp18018
S'int32'
p18019
aNtp18020
(S'initialDelay'
p18021
(lp18022
S'float64'
p18023
aNtp18024
(S'lowTime'
p18025
(lp18026
S'float64'
p18027
aNtp18028
(S'highTime'
p18029
(lp18030
S'float64'
p18031
aNtp18032
tp18033
tp18034
sS'DAQmxSetExported20MHzTimebaseOutputTerm'
p18035
((lp18036
S'int32'
p18037
ag34
a((S'taskHandle'
p18038
(lp18039
S'TaskHandle'
p18040
aNtp18041
(S'data'
p18042
(lp18043
S'char'
p18044
ag42
aNtp18045
tp18046
tp18047
sS'DAQmxSetCITwoEdgeSepSecondEdge'
p18048
((lp18049
S'int32'
p18050
ag34
a((S'taskHandle'
p18051
(lp18052
S'TaskHandle'
p18053
aNtp18054
(S'channel'
p18055
(lp18056
S'char'
p18057
a(lp18058
I-1
aaNtp18059
(S'data'
p18060
(lp18061
S'int32'
p18062
aNtp18063
tp18064
tp18065
sS'DAQmxResetAIRTDR0'
p18066
((lp18067
S'int32'
p18068
ag34
a((S'taskHandle'
p18069
(lp18070
S'TaskHandle'
p18071
aNtp18072
(S'channel'
p18073
(lp18074
S'char'
p18075
a(lp18076
I-1
aaNtp18077
tp18078
tp18079
sS'DAQmxResetCIPulseWidthUnits'
p18080
((lp18081
S'int32'
p18082
ag34
a((S'taskHandle'
p18083
(lp18084
S'TaskHandle'
p18085
aNtp18086
(S'channel'
p18087
(lp18088
S'char'
p18089
a(lp18090
I-1
aaNtp18091
tp18092
tp18093
sS'DAQmxSetAIBridgeShuntCalSelect'
p18094
((lp18095
S'int32'
p18096
ag34
a((S'taskHandle'
p18097
(lp18098
S'TaskHandle'
p18099
aNtp18100
(S'channel'
p18101
(lp18102
S'char'
p18103
a(lp18104
I-1
aaNtp18105
(S'data'
p18106
(lp18107
S'int32'
p18108
aNtp18109
tp18110
tp18111
sS'DAQmxGetHshkTrigType'
p18112
((lp18113
S'int32'
p18114
ag34
a((S'taskHandle'
p18115
(lp18116
S'TaskHandle'
p18117
aNtp18118
(S'data'
p18119
(lp18120
S'int32'
p18121
ag42
aNtp18122
tp18123
tp18124
sS'DAQmxGetAIGain'
p18125
((lp18126
S'int32'
p18127
ag34
a((S'taskHandle'
p18128
(lp18129
S'TaskHandle'
p18130
aNtp18131
(S'channel'
p18132
(lp18133
S'char'
p18134
a(lp18135
I-1
aaNtp18136
(S'data'
p18137
(lp18138
S'float64'
p18139
ag42
aNtp18140
tp18141
tp18142
sS'DAQmxSetAnlgWinPauseTrigSrc'
p18143
((lp18144
S'int32'
p18145
ag34
a((S'taskHandle'
p18146
(lp18147
S'TaskHandle'
p18148
aNtp18149
(S'data'
p18150
(lp18151
S'char'
p18152
ag42
aNtp18153
tp18154
tp18155
sS'DAQmxGetCICountEdgesCountDirDigFltrEnable'
p18156
((lp18157
S'int32'
p18158
ag34
a((S'taskHandle'
p18159
(lp18160
S'TaskHandle'
p18161
aNtp18162
(S'channel'
p18163
(lp18164
S'char'
p18165
a(lp18166
I-1
aaNtp18167
(S'data'
p18168
(lp18169
S'bool32'
p18170
ag42
aNtp18171
tp18172
tp18173
sS'DAQmxResetAIStrainGagePoissonRatio'
p18174
((lp18175
S'int32'
p18176
ag34
a((S'taskHandle'
p18177
(lp18178
S'TaskHandle'
p18179
aNtp18180
(S'channel'
p18181
(lp18182
S'char'
p18183
a(lp18184
I-1
aaNtp18185
tp18186
tp18187
sS'DAQmxGetAOTermCfg'
p18188
((lp18189
S'int32'
p18190
ag34
a((S'taskHandle'
p18191
(lp18192
S'TaskHandle'
p18193
aNtp18194
(S'channel'
p18195
(lp18196
S'char'
p18197
a(lp18198
I-1
aaNtp18199
(S'data'
p18200
(lp18201
S'int32'
p18202
ag42
aNtp18203
tp18204
tp18205
sS'DAQmxGetAODACRefVal'
p18206
((lp18207
S'int32'
p18208
ag34
a((S'taskHandle'
p18209
(lp18210
S'TaskHandle'
p18211
aNtp18212
(S'channel'
p18213
(lp18214
S'char'
p18215
a(lp18216
I-1
aaNtp18217
(S'data'
p18218
(lp18219
S'float64'
p18220
ag42
aNtp18221
tp18222
tp18223
sS'DAQmxSetExportedHshkEventPulseWidth'
p18224
((lp18225
S'int32'
p18226
ag34
a((S'taskHandle'
p18227
(lp18228
S'TaskHandle'
p18229
aNtp18230
(S'data'
p18231
(lp18232
S'float64'
p18233
aNtp18234
tp18235
tp18236
sS'DAQmxGetCISemiPeriodDigFltrTimebaseSrc'
p18237
((lp18238
S'int32'
p18239
ag34
a((S'taskHandle'
p18240
(lp18241
S'TaskHandle'
p18242
aNtp18243
(S'channel'
p18244
(lp18245
S'char'
p18246
a(lp18247
I-1
aaNtp18248
(S'data'
p18249
(lp18250
S'char'
p18251
ag42
aNtp18252
(S'bufferSize'
p18253
(lp18254
S'uInt32'
p18255
aNtp18256
tp18257
tp18258
sS'DAQmxWriteDigitalU8'
p18259
((lp18260
S'int32'
p18261
ag34
a((S'taskHandle'
p18262
(lp18263
S'TaskHandle'
p18264
aNtp18265
(S'numSampsPerChan'
p18266
(lp18267
S'int32'
p18268
aNtp18269
(S'autoStart'
p18270
(lp18271
S'bool32'
p18272
aNtp18273
(S'timeout'
p18274
(lp18275
S'float64'
p18276
aNtp18277
(S'dataLayout'
p18278
(lp18279
S'bool32'
p18280
aNtp18281
(S'writeArray'
p18282
(lp18283
S'uInt8'
p18284
a(lp18285
I-1
aaNtp18286
(S'sampsPerChanWritten'
p18287
(lp18288
S'int32'
p18289
ag42
aNtp18290
(S'reserved'
p18291
(lp18292
S'bool32'
p18293
ag42
aNtp18294
tp18295
tp18296
sS'DAQmxSetDigPatternRefTrigSrc'
p18297
((lp18298
S'int32'
p18299
ag34
a((S'taskHandle'
p18300
(lp18301
S'TaskHandle'
p18302
aNtp18303
(S'data'
p18304
(lp18305
S'char'
p18306
ag42
aNtp18307
tp18308
tp18309
sS'DAQmxWriteDigitalScalarU32'
p18310
((lp18311
S'int32'
p18312
ag34
a((S'taskHandle'
p18313
(lp18314
S'TaskHandle'
p18315
aNtp18316
(S'autoStart'
p18317
(lp18318
S'bool32'
p18319
aNtp18320
(S'timeout'
p18321
(lp18322
S'float64'
p18323
aNtp18324
(S'value'
p18325
(lp18326
S'uInt32'
p18327
aNtp18328
(S'reserved'
p18329
(lp18330
S'bool32'
p18331
ag42
aNtp18332
tp18333
tp18334
sS'DAQmxGetExportedAdvCmpltEventDelay'
p18335
((lp18336
S'int32'
p18337
ag34
a((S'taskHandle'
p18338
(lp18339
S'TaskHandle'
p18340
aNtp18341
(S'data'
p18342
(lp18343
S'float64'
p18344
ag42
aNtp18345
tp18346
tp18347
sS'DAQmxGetAIAutoZeroMode'
p18348
((lp18349
S'int32'
p18350
ag34
a((S'taskHandle'
p18351
(lp18352
S'TaskHandle'
p18353
aNtp18354
(S'channel'
p18355
(lp18356
S'char'
p18357
a(lp18358
I-1
aaNtp18359
(S'data'
p18360
(lp18361
S'int32'
p18362
ag42
aNtp18363
tp18364
tp18365
sS'DAQmxCreateAIThrmstrChanVex'
p18366
((lp18367
S'int32'
p18368
ag34
a((S'taskHandle'
p18369
(lp18370
S'TaskHandle'
p18371
aNtp18372
(S'physicalChannel'
p18373
(lp18374
S'char'
p18375
a(lp18376
I-1
aaNtp18377
(S'nameToAssignToChannel'
p18378
(lp18379
S'char'
p18380
a(lp18381
I-1
aaNtp18382
(S'minVal'
p18383
(lp18384
S'float64'
p18385
aNtp18386
(S'maxVal'
p18387
(lp18388
S'float64'
p18389
aNtp18390
(S'units'
p18391
(lp18392
S'int32'
p18393
aNtp18394
(S'resistanceConfig'
p18395
(lp18396
S'int32'
p18397
aNtp18398
(S'voltageExcitSource'
p18399
(lp18400
S'int32'
p18401
aNtp18402
(S'voltageExcitVal'
p18403
(lp18404
S'float64'
p18405
aNtp18406
(S'a'
p18407
(lp18408
S'float64'
p18409
aNtp18410
(S'b'
p18411
(lp18412
S'float64'
p18413
aNtp18414
(S'c'
p18415
(lp18416
S'float64'
p18417
aNtp18418
(S'r1'
p18419
(lp18420
S'float64'
p18421
aNtp18422
tp18423
tp18424
sS'DAQmxResetSampTimingType'
p18425
((lp18426
S'int32'
p18427
ag34
a((S'taskHandle'
p18428
(lp18429
S'TaskHandle'
p18430
aNtp18431
tp18432
tp18433
sS'DAQmxSetCILinEncoderDistPerPulse'
p18434
((lp18435
S'int32'
p18436
ag34
a((S'taskHandle'
p18437
(lp18438
S'TaskHandle'
p18439
aNtp18440
(S'channel'
p18441
(lp18442
S'char'
p18443
a(lp18444
I-1
aaNtp18445
(S'data'
p18446
(lp18447
S'float64'
p18448
aNtp18449
tp18450
tp18451
sS'DAQmxGetCIMin'
p18452
((lp18453
S'int32'
p18454
ag34
a((S'taskHandle'
p18455
(lp18456
S'TaskHandle'
p18457
aNtp18458
(S'channel'
p18459
(lp18460
S'char'
p18461
a(lp18462
I-1
aaNtp18463
(S'data'
p18464
(lp18465
S'float64'
p18466
ag42
aNtp18467
tp18468
tp18469
sS'DAQmxSetCIPeriodDigFltrMinPulseWidth'
p18470
((lp18471
S'int32'
p18472
ag34
a((S'taskHandle'
p18473
(lp18474
S'TaskHandle'
p18475
aNtp18476
(S'channel'
p18477
(lp18478
S'char'
p18479
a(lp18480
I-1
aaNtp18481
(S'data'
p18482
(lp18483
S'float64'
p18484
aNtp18485
tp18486
tp18487
sS'DAQmxGetAIVoltageUnits'
p18488
((lp18489
S'int32'
p18490
ag34
a((S'taskHandle'
p18491
(lp18492
S'TaskHandle'
p18493
aNtp18494
(S'channel'
p18495
(lp18496
S'char'
p18497
a(lp18498
I-1
aaNtp18499
(S'data'
p18500
(lp18501
S'int32'
p18502
ag42
aNtp18503
tp18504
tp18505
sS'DAQmxReadAnalogF64'
p18506
((lp18507
S'int32'
p18508
ag34
a((S'taskHandle'
p18509
(lp18510
S'TaskHandle'
p18511
aNtp18512
(S'numSampsPerChan'
p18513
(lp18514
S'int32'
p18515
aNtp18516
(S'timeout'
p18517
(lp18518
S'float64'
p18519
aNtp18520
(S'fillMode'
p18521
(lp18522
S'bool32'
p18523
aNtp18524
(S'readArray'
p18525
(lp18526
S'float64'
p18527
a(lp18528
I-1
aaNtp18529
(S'arraySizeInSamps'
p18530
(lp18531
S'uInt32'
p18532
aNtp18533
(S'sampsPerChanRead'
p18534
(lp18535
S'int32'
p18536
ag42
aNtp18537
(S'reserved'
p18538
(lp18539
S'bool32'
p18540
ag42
aNtp18541
tp18542
tp18543
sS'DAQmxGetCIEncoderZInputDigFltrMinPulseWidth'
p18544
((lp18545
S'int32'
p18546
ag34
a((S'taskHandle'
p18547
(lp18548
S'TaskHandle'
p18549
aNtp18550
(S'channel'
p18551
(lp18552
S'char'
p18553
a(lp18554
I-1
aaNtp18555
(S'data'
p18556
(lp18557
S'float64'
p18558
ag42
aNtp18559
tp18560
tp18561
sS'DAQmxSetCICountEdgesDigFltrTimebaseRate'
p18562
((lp18563
S'int32'
p18564
ag34
a((S'taskHandle'
p18565
(lp18566
S'TaskHandle'
p18567
aNtp18568
(S'channel'
p18569
(lp18570
S'char'
p18571
a(lp18572
I-1
aaNtp18573
(S'data'
p18574
(lp18575
S'float64'
p18576
aNtp18577
tp18578
tp18579
sS'DAQmxSetCICtrTimebaseDigFltrMinPulseWidth'
p18580
((lp18581
S'int32'
p18582
ag34
a((S'taskHandle'
p18583
(lp18584
S'TaskHandle'
p18585
aNtp18586
(S'channel'
p18587
(lp18588
S'char'
p18589
a(lp18590
I-1
aaNtp18591
(S'data'
p18592
(lp18593
S'float64'
p18594
aNtp18595
tp18596
tp18597
sS'DAQmxGetDigLvlPauseTrigDigSyncEnable'
p18598
((lp18599
S'int32'
p18600
ag34
a((S'taskHandle'
p18601
(lp18602
S'TaskHandle'
p18603
aNtp18604
(S'data'
p18605
(lp18606
S'bool32'
p18607
ag42
aNtp18608
tp18609
tp18610
sS'DAQmxGetAnlgWinStartTrigBtm'
p18611
((lp18612
S'int32'
p18613
ag34
a((S'taskHandle'
p18614
(lp18615
S'TaskHandle'
p18616
aNtp18617
(S'data'
p18618
(lp18619
S'float64'
p18620
ag42
aNtp18621
tp18622
tp18623
sS'DAQmxSetCILinEncoderUnits'
p18624
((lp18625
S'int32'
p18626
ag34
a((S'taskHandle'
p18627
(lp18628
S'TaskHandle'
p18629
aNtp18630
(S'channel'
p18631
(lp18632
S'char'
p18633
a(lp18634
I-1
aaNtp18635
(S'data'
p18636
(lp18637
S'int32'
p18638
aNtp18639
tp18640
tp18641
sS'DAQmxGetCIPeriodStartingEdge'
p18642
((lp18643
S'int32'
p18644
ag34
a((S'taskHandle'
p18645
(lp18646
S'TaskHandle'
p18647
aNtp18648
(S'channel'
p18649
(lp18650
S'char'
p18651
a(lp18652
I-1
aaNtp18653
(S'data'
p18654
(lp18655
S'int32'
p18656
ag42
aNtp18657
tp18658
tp18659
sS'DAQmxGetCICtrTimebaseDigFltrEnable'
p18660
((lp18661
S'int32'
p18662
ag34
a((S'taskHandle'
p18663
(lp18664
S'TaskHandle'
p18665
aNtp18666
(S'channel'
p18667
(lp18668
S'char'
p18669
a(lp18670
I-1
aaNtp18671
(S'data'
p18672
(lp18673
S'bool32'
p18674
ag42
aNtp18675
tp18676
tp18677
sS'DAQmxSetCOPulseTerm'
p18678
((lp18679
S'int32'
p18680
ag34
a((S'taskHandle'
p18681
(lp18682
S'TaskHandle'
p18683
aNtp18684
(S'channel'
p18685
(lp18686
S'char'
p18687
a(lp18688
I-1
aaNtp18689
(S'data'
p18690
(lp18691
S'char'
p18692
ag42
aNtp18693
tp18694
tp18695
sS'DAQmxGetAIThrmcplType'
p18696
((lp18697
S'int32'
p18698
ag34
a((S'taskHandle'
p18699
(lp18700
S'TaskHandle'
p18701
aNtp18702
(S'channel'
p18703
(lp18704
S'char'
p18705
a(lp18706
I-1
aaNtp18707
(S'data'
p18708
(lp18709
S'int32'
p18710
ag42
aNtp18711
tp18712
tp18713
sS'DAQmxGetSwitchDevAutoConnAnlgBus'
p18714
((lp18715
S'int32'
p18716
ag34
a((S'deviceName'
p18717
(lp18718
S'char'
p18719
a(lp18720
I-1
aaNtp18721
(S'data'
p18722
(lp18723
S'bool32'
p18724
ag42
aNtp18725
tp18726
tp18727
sS'DAQmxGetAISoundPressureUnits'
p18728
((lp18729
S'int32'
p18730
ag34
a((S'taskHandle'
p18731
(lp18732
S'TaskHandle'
p18733
aNtp18734
(S'channel'
p18735
(lp18736
S'char'
p18737
a(lp18738
I-1
aaNtp18739
(S'data'
p18740
(lp18741
S'int32'
p18742
ag42
aNtp18743
tp18744
tp18745
sS'DAQmxGetAIExcitUseForScaling'
p18746
((lp18747
S'int32'
p18748
ag34
a((S'taskHandle'
p18749
(lp18750
S'TaskHandle'
p18751
aNtp18752
(S'channel'
p18753
(lp18754
S'char'
p18755
a(lp18756
I-1
aaNtp18757
(S'data'
p18758
(lp18759
S'bool32'
p18760
ag42
aNtp18761
tp18762
tp18763
sS'DAQmxReadCounterU32'
p18764
((lp18765
S'int32'
p18766
ag34
a((S'taskHandle'
p18767
(lp18768
S'TaskHandle'
p18769
aNtp18770
(S'numSampsPerChan'
p18771
(lp18772
S'int32'
p18773
aNtp18774
(S'timeout'
p18775
(lp18776
S'float64'
p18777
aNtp18778
(S'readArray'
p18779
(lp18780
S'uInt32'
p18781
a(lp18782
I-1
aaNtp18783
(S'arraySizeInSamps'
p18784
(lp18785
S'uInt32'
p18786
aNtp18787
(S'sampsPerChanRead'
p18788
(lp18789
S'int32'
p18790
ag42
aNtp18791
(S'reserved'
p18792
(lp18793
S'bool32'
p18794
ag42
aNtp18795
tp18796
tp18797
sS'DAQmxSetHshkDelayAfterXfer'
p18798
((lp18799
S'int32'
p18800
ag34
a((S'taskHandle'
p18801
(lp18802
S'TaskHandle'
p18803
aNtp18804
(S'data'
p18805
(lp18806
S'float64'
p18807
aNtp18808
tp18809
tp18810
sS'DAQmxGetDigPatternRefTrigSrc'
p18811
((lp18812
S'int32'
p18813
ag34
a((S'taskHandle'
p18814
(lp18815
S'TaskHandle'
p18816
aNtp18817
(S'data'
p18818
(lp18819
S'char'
p18820
ag42
aNtp18821
(S'bufferSize'
p18822
(lp18823
S'uInt32'
p18824
aNtp18825
tp18826
tp18827
sS'DAQmxResetExportedHshkEventOutputTerm'
p18828
((lp18829
S'int32'
p18830
ag34
a((S'taskHandle'
p18831
(lp18832
S'TaskHandle'
p18833
aNtp18834
tp18835
tp18836
sS'DAQmxGetCISemiPeriodDigFltrTimebaseRate'
p18837
((lp18838
S'int32'
p18839
ag34
a((S'taskHandle'
p18840
(lp18841
S'TaskHandle'
p18842
aNtp18843
(S'channel'
p18844
(lp18845
S'char'
p18846
a(lp18847
I-1
aaNtp18848
(S'data'
p18849
(lp18850
S'float64'
p18851
ag42
aNtp18852
tp18853
tp18854
sS'DAQmxCfgSampClkTiming'
p18855
((lp18856
S'int32'
p18857
ag34
a((S'taskHandle'
p18858
(lp18859
S'TaskHandle'
p18860
aNtp18861
(S'source'
p18862
(lp18863
S'char'
p18864
a(lp18865
I-1
aaNtp18866
(S'rate'
p18867
(lp18868
S'float64'
p18869
aNtp18870
(S'activeEdge'
p18871
(lp18872
S'int32'
p18873
aNtp18874
(S'sampleMode'
p18875
(lp18876
S'int32'
p18877
aNtp18878
(S'sampsPerChan'
p18879
(lp18880
S'uInt64'
p18881
aNtp18882
tp18883
tp18884
sS'DAQmxReadDigitalU8'
p18885
((lp18886
S'int32'
p18887
ag34
a((S'taskHandle'
p18888
(lp18889
S'TaskHandle'
p18890
aNtp18891
(S'numSampsPerChan'
p18892
(lp18893
S'int32'
p18894
aNtp18895
(S'timeout'
p18896
(lp18897
S'float64'
p18898
aNtp18899
(S'fillMode'
p18900
(lp18901
S'bool32'
p18902
aNtp18903
(S'readArray'
p18904
(lp18905
S'uInt8'
p18906
a(lp18907
I-1
aaNtp18908
(S'arraySizeInSamps'
p18909
(lp18910
S'uInt32'
p18911
aNtp18912
(S'sampsPerChanRead'
p18913
(lp18914
S'int32'
p18915
ag42
aNtp18916
(S'reserved'
p18917
(lp18918
S'bool32'
p18919
ag42
aNtp18920
tp18921
tp18922
sS'DAQmxGetAIConvRate'
p18923
((lp18924
S'int32'
p18925
ag34
a((S'taskHandle'
p18926
(lp18927
S'TaskHandle'
p18928
aNtp18929
(S'data'
p18930
(lp18931
S'float64'
p18932
ag42
aNtp18933
tp18934
tp18935
sS'DAQmxSetDIDataXferMech'
p18936
((lp18937
S'int32'
p18938
ag34
a((S'taskHandle'
p18939
(lp18940
S'TaskHandle'
p18941
aNtp18942
(S'channel'
p18943
(lp18944
S'char'
p18945
a(lp18946
I-1
aaNtp18947
(S'data'
p18948
(lp18949
S'int32'
p18950
aNtp18951
tp18952
tp18953
sS'DAQmxGetSampClkTimebaseRate'
p18954
((lp18955
S'int32'
p18956
ag34
a((S'taskHandle'
p18957
(lp18958
S'TaskHandle'
p18959
aNtp18960
(S'data'
p18961
(lp18962
S'float64'
p18963
ag42
aNtp18964
tp18965
tp18966
sS'DAQmxResetCIFreqMeasMeth'
p18967
((lp18968
S'int32'
p18969
ag34
a((S'taskHandle'
p18970
(lp18971
S'TaskHandle'
p18972
aNtp18973
(S'channel'
p18974
(lp18975
S'char'
p18976
a(lp18977
I-1
aaNtp18978
tp18979
tp18980
sS'DAQmxDisableStartTrig'
p18981
((lp18982
S'int32'
p18983
ag34
a((S'taskHandle'
p18984
(lp18985
S'TaskHandle'
p18986
aNtp18987
tp18988
tp18989
sS'DAQmxSetExportedSampClkOutputBehavior'
p18990
((lp18991
S'int32'
p18992
ag34
a((S'taskHandle'
p18993
(lp18994
S'TaskHandle'
p18995
aNtp18996
(S'data'
p18997
(lp18998
S'int32'
p18999
aNtp19000
tp19001
tp19002
sS'DAQmxGetReadOverWrite'
p19003
((lp19004
S'int32'
p19005
ag34
a((S'taskHandle'
p19006
(lp19007
S'TaskHandle'
p19008
aNtp19009
(S'data'
p19010
(lp19011
S'int32'
p19012
ag42
aNtp19013
tp19014
tp19015
sS'DAQmxCreateTEDSAIPosLVDTChan'
p19016
((lp19017
S'int32'
p19018
ag34
a((S'taskHandle'
p19019
(lp19020
S'TaskHandle'
p19021
aNtp19022
(S'physicalChannel'
p19023
(lp19024
S'char'
p19025
a(lp19026
I-1
aaNtp19027
(S'nameToAssignToChannel'
p19028
(lp19029
S'char'
p19030
a(lp19031
I-1
aaNtp19032
(S'minVal'
p19033
(lp19034
S'float64'
p19035
aNtp19036
(S'maxVal'
p19037
(lp19038
S'float64'
p19039
aNtp19040
(S'units'
p19041
(lp19042
S'int32'
p19043
aNtp19044
(S'voltageExcitSource'
p19045
(lp19046
S'int32'
p19047
aNtp19048
(S'voltageExcitVal'
p19049
(lp19050
S'float64'
p19051
aNtp19052
(S'voltageExcitFreq'
p19053
(lp19054
S'float64'
p19055
aNtp19056
(S'ACExcitWireMode'
p19057
(lp19058
S'int32'
p19059
aNtp19060
(S'customScaleName'
p19061
(lp19062
S'char'
p19063
a(lp19064
I-1
aaNtp19065
tp19066
tp19067
sS'DAQmxGetCILinEncoderInitialPos'
p19068
((lp19069
S'int32'
p19070
ag34
a((S'taskHandle'
p19071
(lp19072
S'TaskHandle'
p19073
aNtp19074
(S'channel'
p19075
(lp19076
S'char'
p19077
a(lp19078
I-1
aaNtp19079
(S'data'
p19080
(lp19081
S'float64'
p19082
ag42
aNtp19083
tp19084
tp19085
sS'DAQmxGetAIRngHigh'
p19086
((lp19087
S'int32'
p19088
ag34
a((S'taskHandle'
p19089
(lp19090
S'TaskHandle'
p19091
aNtp19092
(S'channel'
p19093
(lp19094
S'char'
p19095
a(lp19096
I-1
aaNtp19097
(S'data'
p19098
(lp19099
S'float64'
p19100
ag42
aNtp19101
tp19102
tp19103
sS'DAQmxResetCICtrTimebaseDigFltrTimebaseRate'
p19104
((lp19105
S'int32'
p19106
ag34
a((S'taskHandle'
p19107
(lp19108
S'TaskHandle'
p19109
aNtp19110
(S'channel'
p19111
(lp19112
S'char'
p19113
a(lp19114
I-1
aaNtp19115
tp19116
tp19117
sS'DAQmxGetCOPulseTerm'
p19118
((lp19119
S'int32'
p19120
ag34
a((S'taskHandle'
p19121
(lp19122
S'TaskHandle'
p19123
aNtp19124
(S'channel'
p19125
(lp19126
S'char'
p19127
a(lp19128
I-1
aaNtp19129
(S'data'
p19130
(lp19131
S'char'
p19132
ag42
aNtp19133
(S'bufferSize'
p19134
(lp19135
S'uInt32'
p19136
aNtp19137
tp19138
tp19139
sS'DAQmxGetDevPXISlotNum'
p19140
((lp19141
S'int32'
p19142
ag34
a((S'device'
p19143
(lp19144
S'char'
p19145
a(lp19146
I-1
aaNtp19147
(S'data'
p19148
(lp19149
S'uInt32'
p19150
ag42
aNtp19151
tp19152
tp19153
sS'DAQmxGetAIFreqHyst'
p19154
((lp19155
S'int32'
p19156
ag34
a((S'taskHandle'
p19157
(lp19158
S'TaskHandle'
p19159
aNtp19160
(S'channel'
p19161
(lp19162
S'char'
p19163
a(lp19164
I-1
aaNtp19165
(S'data'
p19166
(lp19167
S'float64'
p19168
ag42
aNtp19169
tp19170
tp19171
sS'DAQmxResetCIEncoderZInputDigFltrTimebaseRate'
p19172
((lp19173
S'int32'
p19174
ag34
a((S'taskHandle'
p19175
(lp19176
S'TaskHandle'
p19177
aNtp19178
(S'channel'
p19179
(lp19180
S'char'
p19181
a(lp19182
I-1
aaNtp19183
tp19184
tp19185
sS'DAQmxGetAnlgWinPauseTrigSrc'
p19186
((lp19187
S'int32'
p19188
ag34
a((S'taskHandle'
p19189
(lp19190
S'TaskHandle'
p19191
aNtp19192
(S'data'
p19193
(lp19194
S'char'
p19195
ag42
aNtp19196
(S'bufferSize'
p19197
(lp19198
S'uInt32'
p19199
aNtp19200
tp19201
tp19202
sS'DAQmxGetWriteRegenMode'
p19203
((lp19204
S'int32'
p19205
ag34
a((S'taskHandle'
p19206
(lp19207
S'TaskHandle'
p19208
aNtp19209
(S'data'
p19210
(lp19211
S'int32'
p19212
ag42
aNtp19213
tp19214
tp19215
sS'DAQmxResetDOTristate'
p19216
((lp19217
S'int32'
p19218
ag34
a((S'taskHandle'
p19219
(lp19220
S'TaskHandle'
p19221
aNtp19222
(S'channel'
p19223
(lp19224
S'char'
p19225
a(lp19226
I-1
aaNtp19227
tp19228
tp19229
sS'DAQmxResetCIPulseWidthStartingEdge'
p19230
((lp19231
S'int32'
p19232
ag34
a((S'taskHandle'
p19233
(lp19234
S'TaskHandle'
p19235
aNtp19236
(S'channel'
p19237
(lp19238
S'char'
p19239
a(lp19240
I-1
aaNtp19241
tp19242
tp19243
sS'DAQmxSetAIACExcitWireMode'
p19244
((lp19245
S'int32'
p19246
ag34
a((S'taskHandle'
p19247
(lp19248
S'TaskHandle'
p19249
aNtp19250
(S'channel'
p19251
(lp19252
S'char'
p19253
a(lp19254
I-1
aaNtp19255
(S'data'
p19256
(lp19257
S'int32'
p19258
aNtp19259
tp19260
tp19261
sS'DAQmxSetSwitchDevSettlingTime'
p19262
((lp19263
S'int32'
p19264
ag34
a((S'deviceName'
p19265
(lp19266
S'char'
p19267
a(lp19268
I-1
aaNtp19269
(S'data'
p19270
(lp19271
S'float64'
p19272
aNtp19273
tp19274
tp19275
sS'DAQmxResetAnlgEdgeRefTrigCoupling'
p19276
((lp19277
S'int32'
p19278
ag34
a((S'taskHandle'
p19279
(lp19280
S'TaskHandle'
p19281
aNtp19282
tp19283
tp19284
sS'DAQmxGetTaskName'
p19285
((lp19286
S'int32'
p19287
ag34
a((S'taskHandle'
p19288
(lp19289
S'TaskHandle'
p19290
aNtp19291
(S'data'
p19292
(lp19293
S'char'
p19294
ag42
aNtp19295
(S'bufferSize'
p19296
(lp19297
S'uInt32'
p19298
aNtp19299
tp19300
tp19301
sS'DAQmxSetCISemiPeriodDigSyncEnable'
p19302
((lp19303
S'int32'
p19304
ag34
a((S'taskHandle'
p19305
(lp19306
S'TaskHandle'
p19307
aNtp19308
(S'channel'
p19309
(lp19310
S'char'
p19311
a(lp19312
I-1
aaNtp19313
(S'data'
p19314
(lp19315
S'bool32'
p19316
aNtp19317
tp19318
tp19319
sS'DAQmxGetCIEncoderAInputDigFltrTimebaseRate'
p19320
((lp19321
S'int32'
p19322
ag34
a((S'taskHandle'
p19323
(lp19324
S'TaskHandle'
p19325
aNtp19326
(S'channel'
p19327
(lp19328
S'char'
p19329
a(lp19330
I-1
aaNtp19331
(S'data'
p19332
(lp19333
S'float64'
p19334
ag42
aNtp19335
tp19336
tp19337
sS'DAQmxReadCounterF64'
p19338
((lp19339
S'int32'
p19340
ag34
a((S'taskHandle'
p19341
(lp19342
S'TaskHandle'
p19343
aNtp19344
(S'numSampsPerChan'
p19345
(lp19346
S'int32'
p19347
aNtp19348
(S'timeout'
p19349
(lp19350
S'float64'
p19351
aNtp19352
(S'readArray'
p19353
(lp19354
S'float64'
p19355
a(lp19356
I-1
aaNtp19357
(S'arraySizeInSamps'
p19358
(lp19359
S'uInt32'
p19360
aNtp19361
(S'sampsPerChanRead'
p19362
(lp19363
S'int32'
p19364
ag42
aNtp19365
(S'reserved'
p19366
(lp19367
S'bool32'
p19368
ag42
aNtp19369
tp19370
tp19371
sS'DAQmxSetCICtrTimebaseActiveEdge'
p19372
((lp19373
S'int32'
p19374
ag34
a((S'taskHandle'
p19375
(lp19376
S'TaskHandle'
p19377
aNtp19378
(S'channel'
p19379
(lp19380
S'char'
p19381
a(lp19382
I-1
aaNtp19383
(S'data'
p19384
(lp19385
S'int32'
p19386
aNtp19387
tp19388
tp19389
sS'DAQmxSetDigEdgeArmStartTrigDigFltrEnable'
p19390
((lp19391
S'int32'
p19392
ag34
a((S'taskHandle'
p19393
(lp19394
S'TaskHandle'
p19395
aNtp19396
(S'data'
p19397
(lp19398
S'bool32'
p19399
aNtp19400
tp19401
tp19402
sS'DAQmxSetSampClkDigFltrTimebaseRate'
p19403
((lp19404
S'int32'
p19405
ag34
a((S'taskHandle'
p19406
(lp19407
S'TaskHandle'
p19408
aNtp19409
(S'data'
p19410
(lp19411
S'float64'
p19412
aNtp19413
tp19414
tp19415
sS'DAQmxResetCICountEdgesActiveEdge'
p19416
((lp19417
S'int32'
p19418
ag34
a((S'taskHandle'
p19419
(lp19420
S'TaskHandle'
p19421
aNtp19422
(S'channel'
p19423
(lp19424
S'char'
p19425
a(lp19426
I-1
aaNtp19427
tp19428
tp19429
sS'DAQmxGetHshkDelayAfterXfer'
p19430
((lp19431
S'int32'
p19432
ag34
a((S'taskHandle'
p19433
(lp19434
S'TaskHandle'
p19435
aNtp19436
(S'data'
p19437
(lp19438
S'float64'
p19439
ag42
aNtp19440
tp19441
tp19442
sS'DAQmxSetAODACOffsetExtSrc'
p19443
((lp19444
S'int32'
p19445
ag34
a((S'taskHandle'
p19446
(lp19447
S'TaskHandle'
p19448
aNtp19449
(S'channel'
p19450
(lp19451
S'char'
p19452
a(lp19453
I-1
aaNtp19454
(S'data'
p19455
(lp19456
S'char'
p19457
ag42
aNtp19458
tp19459
tp19460
sS'DAQmxGetReadCurrReadPos'
p19461
((lp19462
S'int32'
p19463
ag34
a((S'taskHandle'
p19464
(lp19465
S'TaskHandle'
p19466
aNtp19467
(S'data'
p19468
(lp19469
S'uInt64'
p19470
ag42
aNtp19471
tp19472
tp19473
sS'DAQmxGetAIThrmcplCJCSrc'
p19474
((lp19475
S'int32'
p19476
ag34
a((S'taskHandle'
p19477
(lp19478
S'TaskHandle'
p19479
aNtp19480
(S'channel'
p19481
(lp19482
S'char'
p19483
a(lp19484
I-1
aaNtp19485
(S'data'
p19486
(lp19487
S'int32'
p19488
ag42
aNtp19489
tp19490
tp19491
sS'DAQmxGetCIGPSSyncMethod'
p19492
((lp19493
S'int32'
p19494
ag34
a((S'taskHandle'
p19495
(lp19496
S'TaskHandle'
p19497
aNtp19498
(S'channel'
p19499
(lp19500
S'char'
p19501
a(lp19502
I-1
aaNtp19503
(S'data'
p19504
(lp19505
S'int32'
p19506
ag42
aNtp19507
tp19508
tp19509
sS'DAQmxGetStartTrigDelayUnits'
p19510
((lp19511
S'int32'
p19512
ag34
a((S'taskHandle'
p19513
(lp19514
S'TaskHandle'
p19515
aNtp19516
(S'data'
p19517
(lp19518
S'int32'
p19519
ag42
aNtp19520
tp19521
tp19522
sS'DAQmxResetAnlgWinStartTrigCoupling'
p19523
((lp19524
S'int32'
p19525
ag34
a((S'taskHandle'
p19526
(lp19527
S'TaskHandle'
p19528
aNtp19529
tp19530
tp19531
sS'DAQmxGetDigLvlPauseTrigDigFltrEnable'
p19532
((lp19533
S'int32'
p19534
ag34
a((S'taskHandle'
p19535
(lp19536
S'TaskHandle'
p19537
aNtp19538
(S'data'
p19539
(lp19540
S'bool32'
p19541
ag42
aNtp19542
tp19543
tp19544
sS'DAQmxWriteCtrTime'
p19545
((lp19546
S'int32'
p19547
ag34
a((S'taskHandle'
p19548
(lp19549
S'TaskHandle'
p19550
aNtp19551
(S'numSampsPerChan'
p19552
(lp19553
S'int32'
p19554
aNtp19555
(S'autoStart'
p19556
(lp19557
S'bool32'
p19558
aNtp19559
(S'timeout'
p19560
(lp19561
S'float64'
p19562
aNtp19563
(S'dataLayout'
p19564
(lp19565
S'bool32'
p19566
aNtp19567
(S'highTime'
p19568
(lp19569
S'float64'
p19570
a(lp19571
I-1
aaNtp19572
(S'lowTime'
p19573
(lp19574
S'float64'
p19575
a(lp19576
I-1
aaNtp19577
(S'numSampsPerChanWritten'
p19578
(lp19579
S'int32'
p19580
ag42
aNtp19581
(S'reserved'
p19582
(lp19583
S'bool32'
p19584
ag42
aNtp19585
tp19586
tp19587
sS'DAQmxResetCOPulseLowTicks'
p19588
((lp19589
S'int32'
p19590
ag34
a((S'taskHandle'
p19591
(lp19592
S'TaskHandle'
p19593
aNtp19594
(S'channel'
p19595
(lp19596
S'char'
p19597
a(lp19598
I-1
aaNtp19599
tp19600
tp19601
sS'DAQmxResetCITwoEdgeSepFirstDigSyncEnable'
p19602
((lp19603
S'int32'
p19604
ag34
a((S'taskHandle'
p19605
(lp19606
S'TaskHandle'
p19607
aNtp19608
(S'channel'
p19609
(lp19610
S'char'
p19611
a(lp19612
I-1
aaNtp19613
tp19614
tp19615
sS'DAQmxSetCOPulseLowTicks'
p19616
((lp19617
S'int32'
p19618
ag34
a((S'taskHandle'
p19619
(lp19620
S'TaskHandle'
p19621
aNtp19622
(S'channel'
p19623
(lp19624
S'char'
p19625
a(lp19626
I-1
aaNtp19627
(S'data'
p19628
(lp19629
S'uInt32'
p19630
aNtp19631
tp19632
tp19633
sS'DAQmxGetReadAvailSampPerChan'
p19634
((lp19635
S'int32'
p19636
ag34
a((S'taskHandle'
p19637
(lp19638
S'TaskHandle'
p19639
aNtp19640
(S'data'
p19641
(lp19642
S'uInt32'
p19643
ag42
aNtp19644
tp19645
tp19646
sS'DAQmxSetExportedStartTrigOutputTerm'
p19647
((lp19648
S'int32'
p19649
ag34
a((S'taskHandle'
p19650
(lp19651
S'TaskHandle'
p19652
aNtp19653
(S'data'
p19654
(lp19655
S'char'
p19656
ag42
aNtp19657
tp19658
tp19659
sS'DAQmxSetSampClkTimebaseMasterTimebaseDiv'
p19660
((lp19661
S'int32'
p19662
ag34
a((S'taskHandle'
p19663
(lp19664
S'TaskHandle'
p19665
aNtp19666
(S'data'
p19667
(lp19668
S'uInt32'
p19669
aNtp19670
tp19671
tp19672
sS'DAQmxGetWriteWaitMode'
p19673
((lp19674
S'int32'
p19675
ag34
a((S'taskHandle'
p19676
(lp19677
S'TaskHandle'
p19678
aNtp19679
(S'data'
p19680
(lp19681
S'int32'
p19682
ag42
aNtp19683
tp19684
tp19685
sS'DAQmxResetCIFreqDigFltrEnable'
p19686
((lp19687
S'int32'
p19688
ag34
a((S'taskHandle'
p19689
(lp19690
S'TaskHandle'
p19691
aNtp19692
(S'channel'
p19693
(lp19694
S'char'
p19695
a(lp19696
I-1
aaNtp19697
tp19698
tp19699
sS'DAQmxGetExportedRdyForXferEventOutputTerm'
p19700
((lp19701
S'int32'
p19702
ag34
a((S'taskHandle'
p19703
(lp19704
S'TaskHandle'
p19705
aNtp19706
(S'data'
p19707
(lp19708
S'char'
p19709
ag42
aNtp19710
(S'bufferSize'
p19711
(lp19712
S'uInt32'
p19713
aNtp19714
tp19715
tp19716
sS'DAQmxGetCITwoEdgeSepSecondTerm'
p19717
((lp19718
S'int32'
p19719
ag34
a((S'taskHandle'
p19720
(lp19721
S'TaskHandle'
p19722
aNtp19723
(S'channel'
p19724
(lp19725
S'char'
p19726
a(lp19727
I-1
aaNtp19728
(S'data'
p19729
(lp19730
S'char'
p19731
ag42
aNtp19732
(S'bufferSize'
p19733
(lp19734
S'uInt32'
p19735
aNtp19736
tp19737
tp19738
sS'DAQmxGetSwitchDevTopology'
p19739
((lp19740
S'int32'
p19741
ag34
a((S'deviceName'
p19742
(lp19743
S'char'
p19744
a(lp19745
I-1
aaNtp19746
(S'data'
p19747
(lp19748
S'char'
p19749
ag42
aNtp19750
(S'bufferSize'
p19751
(lp19752
S'uInt32'
p19753
aNtp19754
tp19755
tp19756
sS'DAQmxGetAOMemMapEnable'
p19757
((lp19758
S'int32'
p19759
ag34
a((S'taskHandle'
p19760
(lp19761
S'TaskHandle'
p19762
aNtp19763
(S'channel'
p19764
(lp19765
S'char'
p19766
a(lp19767
I-1
aaNtp19768
(S'data'
p19769
(lp19770
S'bool32'
p19771
ag42
aNtp19772
tp19773
tp19774
sS'DAQmxSetMasterTimebaseRate'
p19775
((lp19776
S'int32'
p19777
ag34
a((S'taskHandle'
p19778
(lp19779
S'TaskHandle'
p19780
aNtp19781
(S'data'
p19782
(lp19783
S'float64'
p19784
aNtp19785
tp19786
tp19787
sS'DAQmxResetExportedHshkEventDelay'
p19788
((lp19789
S'int32'
p19790
ag34
a((S'taskHandle'
p19791
(lp19792
S'TaskHandle'
p19793
aNtp19794
tp19795
tp19796
sS'DAQmxGetCIFreqDigFltrTimebaseRate'
p19797
((lp19798
S'int32'
p19799
ag34
a((S'taskHandle'
p19800
(lp19801
S'TaskHandle'
p19802
aNtp19803
(S'channel'
p19804
(lp19805
S'char'
p19806
a(lp19807
I-1
aaNtp19808
(S'data'
p19809
(lp19810
S'float64'
p19811
ag42
aNtp19812
tp19813
tp19814
sS'DAQmxGetWriteOffset'
p19815
((lp19816
S'int32'
p19817
ag34
a((S'taskHandle'
p19818
(lp19819
S'TaskHandle'
p19820
aNtp19821
(S'data'
p19822
(lp19823
S'int32'
p19824
ag42
aNtp19825
tp19826
tp19827
sS'DAQmxResetWatchdogExpirTrigType'
p19828
((lp19829
S'int32'
p19830
ag34
a((S'taskHandle'
p19831
(lp19832
S'TaskHandle'
p19833
aNtp19834
tp19835
tp19836
sS'DAQmxGetCIPeriodUnits'
p19837
((lp19838
S'int32'
p19839
ag34
a((S'taskHandle'
p19840
(lp19841
S'TaskHandle'
p19842
aNtp19843
(S'channel'
p19844
(lp19845
S'char'
p19846
a(lp19847
I-1
aaNtp19848
(S'data'
p19849
(lp19850
S'int32'
p19851
ag42
aNtp19852
tp19853
tp19854
sS'DAQmxResetExportedAdvTrigPulseWidth'
p19855
((lp19856
S'int32'
p19857
ag34
a((S'taskHandle'
p19858
(lp19859
S'TaskHandle'
p19860
aNtp19861
tp19862
tp19863
sS'DAQmxSetRealTimeReportMissedSamp'
p19864
((lp19865
S'int32'
p19866
ag34
a((S'taskHandle'
p19867
(lp19868
S'TaskHandle'
p19869
aNtp19870
(S'data'
p19871
(lp19872
S'bool32'
p19873
aNtp19874
tp19875
tp19876
sS'DAQmxSetDigEdgeStartTrigDigFltrMinPulseWidth'
p19877
((lp19878
S'int32'
p19879
ag34
a((S'taskHandle'
p19880
(lp19881
S'TaskHandle'
p19882
aNtp19883
(S'data'
p19884
(lp19885
S'float64'
p19886
aNtp19887
tp19888
tp19889
sS'DAQmxCreateTEDSAIThrmstrChanVex'
p19890
((lp19891
S'int32'
p19892
ag34
a((S'taskHandle'
p19893
(lp19894
S'TaskHandle'
p19895
aNtp19896
(S'physicalChannel'
p19897
(lp19898
S'char'
p19899
a(lp19900
I-1
aaNtp19901
(S'nameToAssignToChannel'
p19902
(lp19903
S'char'
p19904
a(lp19905
I-1
aaNtp19906
(S'minVal'
p19907
(lp19908
S'float64'
p19909
aNtp19910
(S'maxVal'
p19911
(lp19912
S'float64'
p19913
aNtp19914
(S'units'
p19915
(lp19916
S'int32'
p19917
aNtp19918
(S'resistanceConfig'
p19919
(lp19920
S'int32'
p19921
aNtp19922
(S'voltageExcitSource'
p19923
(lp19924
S'int32'
p19925
aNtp19926
(S'voltageExcitVal'
p19927
(lp19928
S'float64'
p19929
aNtp19930
(S'r1'
p19931
(lp19932
S'float64'
p19933
aNtp19934
tp19935
tp19936
sS'DAQmxSetAIConvTimebaseDiv'
p19937
((lp19938
S'int32'
p19939
ag34
a((S'taskHandle'
p19940
(lp19941
S'TaskHandle'
p19942
aNtp19943
(S'data'
p19944
(lp19945
S'uInt32'
p19946
aNtp19947
tp19948
tp19949
sS'DAQmxSetAIRngHigh'
p19950
((lp19951
S'int32'
p19952
ag34
a((S'taskHandle'
p19953
(lp19954
S'TaskHandle'
p19955
aNtp19956
(S'channel'
p19957
(lp19958
S'char'
p19959
a(lp19960
I-1
aaNtp19961
(S'data'
p19962
(lp19963
S'float64'
p19964
aNtp19965
tp19966
tp19967
sS'DAQmxSetDigEdgeAdvTrigSrc'
p19968
((lp19969
S'int32'
p19970
ag34
a((S'taskHandle'
p19971
(lp19972
S'TaskHandle'
p19973
aNtp19974
(S'data'
p19975
(lp19976
S'char'
p19977
ag42
aNtp19978
tp19979
tp19980
sS'DAQmxGetCICtrTimebaseDigSyncEnable'
p19981
((lp19982
S'int32'
p19983
ag34
a((S'taskHandle'
p19984
(lp19985
S'TaskHandle'
p19986
aNtp19987
(S'channel'
p19988
(lp19989
S'char'
p19990
a(lp19991
I-1
aaNtp19992
(S'data'
p19993
(lp19994
S'bool32'
p19995
ag42
aNtp19996
tp19997
tp19998
sS'DAQmxResetExportedHshkEventOutputBehavior'
p19999
((lp20000
S'int32'
p20001
ag34
a((S'taskHandle'
p20002
(lp20003
S'TaskHandle'
p20004
aNtp20005
tp20006
tp20007
sS'DAQmxResetAIFreqUnits'
p20008
((lp20009
S'int32'
p20010
ag34
a((S'taskHandle'
p20011
(lp20012
S'TaskHandle'
p20013
aNtp20014
(S'channel'
p20015
(lp20016
S'char'
p20017
a(lp20018
I-1
aaNtp20019
tp20020
tp20021
sS'DAQmxCfgDigEdgeStartTrig'
p20022
((lp20023
S'int32'
p20024
ag34
a((S'taskHandle'
p20025
(lp20026
S'TaskHandle'
p20027
aNtp20028
(S'triggerSource'
p20029
(lp20030
S'char'
p20031
a(lp20032
I-1
aaNtp20033
(S'triggerEdge'
p20034
(lp20035
S'int32'
p20036
aNtp20037
tp20038
tp20039
sS'DAQmxSetAISoundPressureUnits'
p20040
((lp20041
S'int32'
p20042
ag34
a((S'taskHandle'
p20043
(lp20044
S'TaskHandle'
p20045
aNtp20046
(S'channel'
p20047
(lp20048
S'char'
p20049
a(lp20050
I-1
aaNtp20051
(S'data'
p20052
(lp20053
S'int32'
p20054
aNtp20055
tp20056
tp20057
sS'DAQmxControlWatchdogTask'
p20058
((lp20059
S'int32'
p20060
ag34
a((S'taskHandle'
p20061
(lp20062
S'TaskHandle'
p20063
aNtp20064
(S'action'
p20065
(lp20066
S'int32'
p20067
aNtp20068
tp20069
tp20070
sS'DAQmxGetCICount'
p20071
((lp20072
S'int32'
p20073
ag34
a((S'taskHandle'
p20074
(lp20075
S'TaskHandle'
p20076
aNtp20077
(S'channel'
p20078
(lp20079
S'char'
p20080
a(lp20081
I-1
aaNtp20082
(S'data'
p20083
(lp20084
S'uInt32'
p20085
ag42
aNtp20086
tp20087
tp20088
sS'DAQmxResetCICountEdgesDigFltrMinPulseWidth'
p20089
((lp20090
S'int32'
p20091
ag34
a((S'taskHandle'
p20092
(lp20093
S'TaskHandle'
p20094
aNtp20095
(S'channel'
p20096
(lp20097
S'char'
p20098
a(lp20099
I-1
aaNtp20100
tp20101
tp20102
sS'DAQmxResetExportedHshkEventPulseWidth'
p20103
((lp20104
S'int32'
p20105
ag34
a((S'taskHandle'
p20106
(lp20107
S'TaskHandle'
p20108
aNtp20109
tp20110
tp20111
sS'DAQmxRegisterSignalEvent'
p20112
((lp20113
S'int32'
p20114
ag34
a((S'task'
p20115
(lp20116
S'TaskHandle'
p20117
aNtp20118
(S'signalID'
p20119
(lp20120
S'int32'
p20121
aNtp20122
(S'options'
p20123
(lp20124
S'uInt32'
p20125
aNtp20126
(S'callbackFunction'
p20127
(lp20128
S'DAQmxSignalEventCallbackPtr'
p20129
aNtp20130
(S'callbackData'
p20131
(lp20132
S'void'
p20133
ag42
aNtp20134
tp20135
tp20136
sS'DAQmxSetRealTimeWaitForNextSampClkWaitMode'
p20137
((lp20138
S'int32'
p20139
ag34
a((S'taskHandle'
p20140
(lp20141
S'TaskHandle'
p20142
aNtp20143
(S'data'
p20144
(lp20145
S'int32'
p20146
aNtp20147
tp20148
tp20149
sS'DAQmxCreateCICountEdgesChan'
p20150
((lp20151
S'int32'
p20152
ag34
a((S'taskHandle'
p20153
(lp20154
S'TaskHandle'
p20155
aNtp20156
(S'counter'
p20157
(lp20158
S'char'
p20159
a(lp20160
I-1
aaNtp20161
(S'nameToAssignToChannel'
p20162
(lp20163
S'char'
p20164
a(lp20165
I-1
aaNtp20166
(S'edge'
p20167
(lp20168
S'int32'
p20169
aNtp20170
(S'initialCount'
p20171
(lp20172
S'uInt32'
p20173
aNtp20174
(S'countDirection'
p20175
(lp20176
S'int32'
p20177
aNtp20178
tp20179
tp20180
sS'DAQmxGetSwitchDevPwrDownLatchRelaysAfterSettling'
p20181
((lp20182
S'int32'
p20183
ag34
a((S'deviceName'
p20184
(lp20185
S'char'
p20186
a(lp20187
I-1
aaNtp20188
(S'data'
p20189
(lp20190
S'bool32'
p20191
ag42
aNtp20192
tp20193
tp20194
sS'DAQmxGetSampClkDigFltrTimebaseSrc'
p20195
((lp20196
S'int32'
p20197
ag34
a((S'taskHandle'
p20198
(lp20199
S'TaskHandle'
p20200
aNtp20201
(S'data'
p20202
(lp20203
S'char'
p20204
ag42
aNtp20205
(S'bufferSize'
p20206
(lp20207
S'uInt32'
p20208
aNtp20209
tp20210
tp20211
sS'DAQmxGetReadOverloadedChans'
p20212
((lp20213
S'int32'
p20214
ag34
a((S'taskHandle'
p20215
(lp20216
S'TaskHandle'
p20217
aNtp20218
(S'data'
p20219
(lp20220
S'char'
p20221
ag42
aNtp20222
(S'bufferSize'
p20223
(lp20224
S'uInt32'
p20225
aNtp20226
tp20227
tp20228
sS'DAQmxResetAnlgLvlPauseTrigHyst'
p20229
((lp20230
S'int32'
p20231
ag34
a((S'taskHandle'
p20232
(lp20233
S'TaskHandle'
p20234
aNtp20235
tp20236
tp20237
sS'DAQmxSetAODACRefVal'
p20238
((lp20239
S'int32'
p20240
ag34
a((S'taskHandle'
p20241
(lp20242
S'TaskHandle'
p20243
aNtp20244
(S'channel'
p20245
(lp20246
S'char'
p20247
a(lp20248
I-1
aaNtp20249
(S'data'
p20250
(lp20251
S'float64'
p20252
aNtp20253
tp20254
tp20255
sS'DAQmxCreatePolynomialScale'
p20256
((lp20257
S'int32'
p20258
ag34
a((S'name'
p20259
(lp20260
S'char'
p20261
a(lp20262
I-1
aaNtp20263
(S'forwardCoeffs'
p20264
(lp20265
S'float64'
p20266
a(lp20267
I-1
aaNtp20268
(S'numForwardCoeffsIn'
p20269
(lp20270
S'uInt32'
p20271
aNtp20272
(S'reverseCoeffs'
p20273
(lp20274
S'float64'
p20275
a(lp20276
I-1
aaNtp20277
(S'numReverseCoeffsIn'
p20278
(lp20279
S'uInt32'
p20280
aNtp20281
(S'preScaledUnits'
p20282
(lp20283
S'int32'
p20284
aNtp20285
(S'scaledUnits'
p20286
(lp20287
S'char'
p20288
a(lp20289
I-1
aaNtp20290
tp20291
tp20292
sS'DAQmxReadDigitalLines'
p20293
((lp20294
S'int32'
p20295
ag34
a((S'taskHandle'
p20296
(lp20297
S'TaskHandle'
p20298
aNtp20299
(S'numSampsPerChan'
p20300
(lp20301
S'int32'
p20302
aNtp20303
(S'timeout'
p20304
(lp20305
S'float64'
p20306
aNtp20307
(S'fillMode'
p20308
(lp20309
S'bool32'
p20310
aNtp20311
(S'readArray'
p20312
(lp20313
S'uInt8'
p20314
a(lp20315
I-1
aaNtp20316
(S'arraySizeInBytes'
p20317
(lp20318
S'uInt32'
p20319
aNtp20320
(S'sampsPerChanRead'
p20321
(lp20322
S'int32'
p20323
ag42
aNtp20324
(S'numBytesPerSamp'
p20325
(lp20326
S'int32'
p20327
ag42
aNtp20328
(S'reserved'
p20329
(lp20330
S'bool32'
p20331
ag42
aNtp20332
tp20333
tp20334
sS'DAQmxResetAIImpedance'
p20335
((lp20336
S'int32'
p20337
ag34
a((S'taskHandle'
p20338
(lp20339
S'TaskHandle'
p20340
aNtp20341
(S'channel'
p20342
(lp20343
S'char'
p20344
a(lp20345
I-1
aaNtp20346
tp20347
tp20348
sS'DAQmxResetCITwoEdgeSepFirstTerm'
p20349
((lp20350
S'int32'
p20351
ag34
a((S'taskHandle'
p20352
(lp20353
S'TaskHandle'
p20354
aNtp20355
(S'channel'
p20356
(lp20357
S'char'
p20358
a(lp20359
I-1
aaNtp20360
tp20361
tp20362
sS'DAQmxCreateTEDSAICurrentChan'
p20363
((lp20364
S'int32'
p20365
ag34
a((S'taskHandle'
p20366
(lp20367
S'TaskHandle'
p20368
aNtp20369
(S'physicalChannel'
p20370
(lp20371
S'char'
p20372
a(lp20373
I-1
aaNtp20374
(S'nameToAssignToChannel'
p20375
(lp20376
S'char'
p20377
a(lp20378
I-1
aaNtp20379
(S'terminalConfig'
p20380
(lp20381
S'int32'
p20382
aNtp20383
(S'minVal'
p20384
(lp20385
S'float64'
p20386
aNtp20387
(S'maxVal'
p20388
(lp20389
S'float64'
p20390
aNtp20391
(S'units'
p20392
(lp20393
S'int32'
p20394
aNtp20395
(S'shuntResistorLoc'
p20396
(lp20397
S'int32'
p20398
aNtp20399
(S'extShuntResistorVal'
p20400
(lp20401
S'float64'
p20402
aNtp20403
(S'customScaleName'
p20404
(lp20405
S'char'
p20406
a(lp20407
I-1
aaNtp20408
tp20409
tp20410
sS'DAQmxGetExported10MHzRefClkOutputTerm'
p20411
((lp20412
S'int32'
p20413
ag34
a((S'taskHandle'
p20414
(lp20415
S'TaskHandle'
p20416
aNtp20417
(S'data'
p20418
(lp20419
S'char'
p20420
ag42
aNtp20421
(S'bufferSize'
p20422
(lp20423
S'uInt32'
p20424
aNtp20425
tp20426
tp20427
sS'DAQmxSetAODACOffsetVal'
p20428
((lp20429
S'int32'
p20430
ag34
a((S'taskHandle'
p20431
(lp20432
S'TaskHandle'
p20433
aNtp20434
(S'channel'
p20435
(lp20436
S'char'
p20437
a(lp20438
I-1
aaNtp20439
(S'data'
p20440
(lp20441
S'float64'
p20442
aNtp20443
tp20444
tp20445
sS'DAQmxGetSwitchDevNumRelays'
p20446
((lp20447
S'int32'
p20448
ag34
a((S'deviceName'
p20449
(lp20450
S'char'
p20451
a(lp20452
I-1
aaNtp20453
(S'data'
p20454
(lp20455
S'uInt32'
p20456
ag42
aNtp20457
tp20458
tp20459
sS'DAQmxSetCIEncoderBInputDigFltrTimebaseSrc'
p20460
((lp20461
S'int32'
p20462
ag34
a((S'taskHandle'
p20463
(lp20464
S'TaskHandle'
p20465
aNtp20466
(S'channel'
p20467
(lp20468
S'char'
p20469
a(lp20470
I-1
aaNtp20471
(S'data'
p20472
(lp20473
S'char'
p20474
ag42
aNtp20475
tp20476
tp20477
sS'DAQmxGetReadChangeDetectHasOverflowed'
p20478
((lp20479
S'int32'
p20480
ag34
a((S'taskHandle'
p20481
(lp20482
S'TaskHandle'
p20483
aNtp20484
(S'data'
p20485
(lp20486
S'bool32'
p20487
ag42
aNtp20488
tp20489
tp20490
sS'DAQmxSetScaleMapScaledMax'
p20491
((lp20492
S'int32'
p20493
ag34
a((S'scaleName'
p20494
(lp20495
S'char'
p20496
a(lp20497
I-1
aaNtp20498
(S'data'
p20499
(lp20500
S'float64'
p20501
aNtp20502
tp20503
tp20504
sS'DAQmxResetCILinEncoderDistPerPulse'
p20505
((lp20506
S'int32'
p20507
ag34
a((S'taskHandle'
p20508
(lp20509
S'TaskHandle'
p20510
aNtp20511
(S'channel'
p20512
(lp20513
S'char'
p20514
a(lp20515
I-1
aaNtp20516
tp20517
tp20518
sS'DAQmxResetAnlgEdgeRefTrigLvl'
p20519
((lp20520
S'int32'
p20521
ag34
a((S'taskHandle'
p20522
(lp20523
S'TaskHandle'
p20524
aNtp20525
tp20526
tp20527
sS'DAQmxSetAIChanCalPolyReverseCoeff'
p20528
((lp20529
S'int32'
p20530
ag34
a((S'taskHandle'
p20531
(lp20532
S'TaskHandle'
p20533
aNtp20534
(S'channel'
p20535
(lp20536
S'char'
p20537
a(lp20538
I-1
aaNtp20539
(S'data'
p20540
(lp20541
S'float64'
p20542
ag42
aNtp20543
(S'arraySizeInSamples'
p20544
(lp20545
S'uInt32'
p20546
aNtp20547
tp20548
tp20549
sS'DAQmxGetCITwoEdgeSepFirstDigFltrTimebaseRate'
p20550
((lp20551
S'int32'
p20552
ag34
a((S'taskHandle'
p20553
(lp20554
S'TaskHandle'
p20555
aNtp20556
(S'channel'
p20557
(lp20558
S'char'
p20559
a(lp20560
I-1
aaNtp20561
(S'data'
p20562
(lp20563
S'float64'
p20564
ag42
aNtp20565
tp20566
tp20567
sS'DAQmxResetCIEncoderZInputTerm'
p20568
((lp20569
S'int32'
p20570
ag34
a((S'taskHandle'
p20571
(lp20572
S'TaskHandle'
p20573
aNtp20574
(S'channel'
p20575
(lp20576
S'char'
p20577
a(lp20578
I-1
aaNtp20579
tp20580
tp20581
sS'DAQmxGetCICtrTimebaseMasterTimebaseDiv'
p20582
((lp20583
S'int32'
p20584
ag34
a((S'taskHandle'
p20585
(lp20586
S'TaskHandle'
p20587
aNtp20588
(S'channel'
p20589
(lp20590
S'char'
p20591
a(lp20592
I-1
aaNtp20593
(S'data'
p20594
(lp20595
S'uInt32'
p20596
ag42
aNtp20597
tp20598
tp20599
sS'DAQmxResetCIPrescaler'
p20600
((lp20601
S'int32'
p20602
ag34
a((S'taskHandle'
p20603
(lp20604
S'TaskHandle'
p20605
aNtp20606
(S'channel'
p20607
(lp20608
S'char'
p20609
a(lp20610
I-1
aaNtp20611
tp20612
tp20613
sS'DAQmxDeleteSavedTask'
p20614
((lp20615
S'int32'
p20616
ag34
a((S'taskName'
p20617
(lp20618
S'char'
p20619
a(lp20620
I-1
aaNtp20621
tp20622
tp20623
sS'DAQmxGetAnlgLvlPauseTrigHyst'
p20624
((lp20625
S'int32'
p20626
ag34
a((S'taskHandle'
p20627
(lp20628
S'TaskHandle'
p20629
aNtp20630
(S'data'
p20631
(lp20632
S'float64'
p20633
ag42
aNtp20634
tp20635
tp20636
sS'DAQmxResetExportedSignalAttribute'
p20637
((lp20638
S'int32'
p20639
ag34
a((S'taskHandle'
p20640
(lp20641
S'TaskHandle'
p20642
aNtp20643
(S'attribute'
p20644
(lp20645
S'int32'
p20646
aNtp20647
tp20648
tp20649
sS'DAQmxGetRealTimeWriteRecoveryMode'
p20650
((lp20651
S'int32'
p20652
ag34
a((S'taskHandle'
p20653
(lp20654
S'TaskHandle'
p20655
aNtp20656
(S'data'
p20657
(lp20658
S'int32'
p20659
ag42
aNtp20660
tp20661
tp20662
sS'DAQmxCreateTableScale'
p20663
((lp20664
S'int32'
p20665
ag34
a((S'name'
p20666
(lp20667
S'char'
p20668
a(lp20669
I-1
aaNtp20670
(S'prescaledVals'
p20671
(lp20672
S'float64'
p20673
a(lp20674
I-1
aaNtp20675
(S'numPrescaledValsIn'
p20676
(lp20677
S'uInt32'
p20678
aNtp20679
(S'scaledVals'
p20680
(lp20681
S'float64'
p20682
a(lp20683
I-1
aaNtp20684
(S'numScaledValsIn'
p20685
(lp20686
S'uInt32'
p20687
aNtp20688
(S'preScaledUnits'
p20689
(lp20690
S'int32'
p20691
aNtp20692
(S'scaledUnits'
p20693
(lp20694
S'char'
p20695
a(lp20696
I-1
aaNtp20697
tp20698
tp20699
sS'DAQmxGetCICountEdgesCountDirDigSyncEnable'
p20700
((lp20701
S'int32'
p20702
ag34
a((S'taskHandle'
p20703
(lp20704
S'TaskHandle'
p20705
aNtp20706
(S'channel'
p20707
(lp20708
S'char'
p20709
a(lp20710
I-1
aaNtp20711
(S'data'
p20712
(lp20713
S'bool32'
p20714
ag42
aNtp20715
tp20716
tp20717
sS'DAQmxResetAIGain'
p20718
((lp20719
S'int32'
p20720
ag34
a((S'taskHandle'
p20721
(lp20722
S'TaskHandle'
p20723
aNtp20724
(S'channel'
p20725
(lp20726
S'char'
p20727
a(lp20728
I-1
aaNtp20729
tp20730
tp20731
sS'DAQmxSetAnlgLvlPauseTrigSrc'
p20732
((lp20733
S'int32'
p20734
ag34
a((S'taskHandle'
p20735
(lp20736
S'TaskHandle'
p20737
aNtp20738
(S'data'
p20739
(lp20740
S'char'
p20741
ag42
aNtp20742
tp20743
tp20744
sS'DAQmxAdjust4204Cal'
p20745
((lp20746
S'int32'
p20747
ag34
a((S'calHandle'
p20748
(lp20749
S'uInt32'
p20750
aNtp20751
(S'channelNames'
p20752
(lp20753
S'char'
p20754
a(lp20755
I-1
aaNtp20756
(S'lowPassFreq'
p20757
(lp20758
S'float64'
p20759
aNtp20760
(S'trackHoldEnabled'
p20761
(lp20762
S'bool32'
p20763
aNtp20764
(S'inputVal'
p20765
(lp20766
S'float64'
p20767
aNtp20768
tp20769
tp20770
sS'DAQmxSetRefClkSrc'
p20771
((lp20772
S'int32'
p20773
ag34
a((S'taskHandle'
p20774
(lp20775
S'TaskHandle'
p20776
aNtp20777
(S'data'
p20778
(lp20779
S'char'
p20780
ag42
aNtp20781
tp20782
tp20783
sS'DAQmxSetCOPulseFreqUnits'
p20784
((lp20785
S'int32'
p20786
ag34
a((S'taskHandle'
p20787
(lp20788
S'TaskHandle'
p20789
aNtp20790
(S'channel'
p20791
(lp20792
S'char'
p20793
a(lp20794
I-1
aaNtp20795
(S'data'
p20796
(lp20797
S'int32'
p20798
aNtp20799
tp20800
tp20801
sS'DAQmxResetDigEdgeStartTrigDigFltrTimebaseRate'
p20802
((lp20803
S'int32'
p20804
ag34
a((S'taskHandle'
p20805
(lp20806
S'TaskHandle'
p20807
aNtp20808
tp20809
tp20810
sS'DAQmxGetCICtrTimebaseDigFltrTimebaseSrc'
p20811
((lp20812
S'int32'
p20813
ag34
a((S'taskHandle'
p20814
(lp20815
S'TaskHandle'
p20816
aNtp20817
(S'channel'
p20818
(lp20819
S'char'
p20820
a(lp20821
I-1
aaNtp20822
(S'data'
p20823
(lp20824
S'char'
p20825
ag42
aNtp20826
(S'bufferSize'
p20827
(lp20828
S'uInt32'
p20829
aNtp20830
tp20831
tp20832
sS'DAQmxGetRealTimeNumOfWarmupIters'
p20833
((lp20834
S'int32'
p20835
ag34
a((S'taskHandle'
p20836
(lp20837
S'TaskHandle'
p20838
aNtp20839
(S'data'
p20840
(lp20841
S'uInt32'
p20842
ag42
aNtp20843
tp20844
tp20845
sS'DAQmxGetDIInvertLines'
p20846
((lp20847
S'int32'
p20848
ag34
a((S'taskHandle'
p20849
(lp20850
S'TaskHandle'
p20851
aNtp20852
(S'channel'
p20853
(lp20854
S'char'
p20855
a(lp20856
I-1
aaNtp20857
(S'data'
p20858
(lp20859
S'bool32'
p20860
ag42
aNtp20861
tp20862
tp20863
sS'DAQmxResetAnlgEdgeStartTrigCoupling'
p20864
((lp20865
S'int32'
p20866
ag34
a((S'taskHandle'
p20867
(lp20868
S'TaskHandle'
p20869
aNtp20870
tp20871
tp20872
sS'DAQmxGetWriteSleepTime'
p20873
((lp20874
S'int32'
p20875
ag34
a((S'taskHandle'
p20876
(lp20877
S'TaskHandle'
p20878
aNtp20879
(S'data'
p20880
(lp20881
S'float64'
p20882
ag42
aNtp20883
tp20884
tp20885
sS'DAQmxGetCOPulseHighTime'
p20886
((lp20887
S'int32'
p20888
ag34
a((S'taskHandle'
p20889
(lp20890
S'TaskHandle'
p20891
aNtp20892
(S'channel'
p20893
(lp20894
S'char'
p20895
a(lp20896
I-1
aaNtp20897
(S'data'
p20898
(lp20899
S'float64'
p20900
ag42
aNtp20901
tp20902
tp20903
sS'DAQmxSetSwitchDevPwrDownLatchRelaysAfterSettling'
p20904
((lp20905
S'int32'
p20906
ag34
a((S'deviceName'
p20907
(lp20908
S'char'
p20909
a(lp20910
I-1
aaNtp20911
(S'data'
p20912
(lp20913
S'bool32'
p20914
aNtp20915
tp20916
tp20917
sS'DAQmxSetAIBridgeCfg'
p20918
((lp20919
S'int32'
p20920
ag34
a((S'taskHandle'
p20921
(lp20922
S'TaskHandle'
p20923
aNtp20924
(S'channel'
p20925
(lp20926
S'char'
p20927
a(lp20928
I-1
aaNtp20929
(S'data'
p20930
(lp20931
S'int32'
p20932
aNtp20933
tp20934
tp20935
sS'DAQmxSetExportedAdvCmpltEventPulseWidth'
p20936
((lp20937
S'int32'
p20938
ag34
a((S'taskHandle'
p20939
(lp20940
S'TaskHandle'
p20941
aNtp20942
(S'data'
p20943
(lp20944
S'float64'
p20945
aNtp20946
tp20947
tp20948
sS'DAQmxSetChangeDetectDIRisingEdgePhysicalChans'
p20949
((lp20950
S'int32'
p20951
ag34
a((S'taskHandle'
p20952
(lp20953
S'TaskHandle'
p20954
aNtp20955
(S'data'
p20956
(lp20957
S'char'
p20958
ag42
aNtp20959
tp20960
tp20961
sS'DAQmxSetDigLvlPauseTrigWhen'
p20962
((lp20963
S'int32'
p20964
ag34
a((S'taskHandle'
p20965
(lp20966
S'TaskHandle'
p20967
aNtp20968
(S'data'
p20969
(lp20970
S'int32'
p20971
aNtp20972
tp20973
tp20974
sS'DAQmxResetCIEncoderZIndexVal'
p20975
((lp20976
S'int32'
p20977
ag34
a((S'taskHandle'
p20978
(lp20979
S'TaskHandle'
p20980
aNtp20981
(S'channel'
p20982
(lp20983
S'char'
p20984
a(lp20985
I-1
aaNtp20986
tp20987
tp20988
sS'DAQmxGetAODACOffsetVal'
p20989
((lp20990
S'int32'
p20991
ag34
a((S'taskHandle'
p20992
(lp20993
S'TaskHandle'
p20994
aNtp20995
(S'channel'
p20996
(lp20997
S'char'
p20998
a(lp20999
I-1
aaNtp21000
(S'data'
p21001
(lp21002
S'float64'
p21003
ag42
aNtp21004
tp21005
tp21006
sS'DAQmxSetAnlgLvlPauseTrigLvl'
p21007
((lp21008
S'int32'
p21009
ag34
a((S'taskHandle'
p21010
(lp21011
S'TaskHandle'
p21012
aNtp21013
(S'data'
p21014
(lp21015
S'float64'
p21016
aNtp21017
tp21018
tp21019
sS'DAQmxGetReadRawDataWidth'
p21020
((lp21021
S'int32'
p21022
ag34
a((S'taskHandle'
p21023
(lp21024
S'TaskHandle'
p21025
aNtp21026
(S'data'
p21027
(lp21028
S'uInt32'
p21029
ag42
aNtp21030
tp21031
tp21032
sS'DAQmxGetDigEdgeAdvTrigDigFltrEnable'
p21033
((lp21034
S'int32'
p21035
ag34
a((S'taskHandle'
p21036
(lp21037
S'TaskHandle'
p21038
aNtp21039
(S'data'
p21040
(lp21041
S'bool32'
p21042
ag42
aNtp21043
tp21044
tp21045
sS'DAQmxSetAnlgWinStartTrigTop'
p21046
((lp21047
S'int32'
p21048
ag34
a((S'taskHandle'
p21049
(lp21050
S'TaskHandle'
p21051
aNtp21052
(S'data'
p21053
(lp21054
S'float64'
p21055
aNtp21056
tp21057
tp21058
sS'DAQmxSetSampClkDigSyncEnable'
p21059
((lp21060
S'int32'
p21061
ag34
a((S'taskHandle'
p21062
(lp21063
S'TaskHandle'
p21064
aNtp21065
(S'data'
p21066
(lp21067
S'bool32'
p21068
aNtp21069
tp21070
tp21071
sS'DAQmxResetDigEdgeStartTrigEdge'
p21072
((lp21073
S'int32'
p21074
ag34
a((S'taskHandle'
p21075
(lp21076
S'TaskHandle'
p21077
aNtp21078
tp21079
tp21080
sS'DAQmxResetCITwoEdgeSepFirstDigFltrEnable'
p21081
((lp21082
S'int32'
p21083
ag34
a((S'taskHandle'
p21084
(lp21085
S'TaskHandle'
p21086
aNtp21087
(S'channel'
p21088
(lp21089
S'char'
p21090
a(lp21091
I-1
aaNtp21092
tp21093
tp21094
sS'DAQmxSetScaleMapPreScaledMin'
p21095
((lp21096
S'int32'
p21097
ag34
a((S'scaleName'
p21098
(lp21099
S'char'
p21100
a(lp21101
I-1
aaNtp21102
(S'data'
p21103
(lp21104
S'float64'
p21105
aNtp21106
tp21107
tp21108
sS'DAQmxSetDIDigFltrMinPulseWidth'
p21109
((lp21110
S'int32'
p21111
ag34
a((S'taskHandle'
p21112
(lp21113
S'TaskHandle'
p21114
aNtp21115
(S'channel'
p21116
(lp21117
S'char'
p21118
a(lp21119
I-1
aaNtp21120
(S'data'
p21121
(lp21122
S'float64'
p21123
aNtp21124
tp21125
tp21126
sS'DAQmxSetCIEncoderBInputDigFltrTimebaseRate'
p21127
((lp21128
S'int32'
p21129
ag34
a((S'taskHandle'
p21130
(lp21131
S'TaskHandle'
p21132
aNtp21133
(S'channel'
p21134
(lp21135
S'char'
p21136
a(lp21137
I-1
aaNtp21138
(S'data'
p21139
(lp21140
S'float64'
p21141
aNtp21142
tp21143
tp21144
sS'DAQmxResetAIExcitUseMultiplexed'
p21145
((lp21146
S'int32'
p21147
ag34
a((S'taskHandle'
p21148
(lp21149
S'TaskHandle'
p21150
aNtp21151
(S'channel'
p21152
(lp21153
S'char'
p21154
a(lp21155
I-1
aaNtp21156
tp21157
tp21158
sS'DAQmxSetAOCurrentUnits'
p21159
((lp21160
S'int32'
p21161
ag34
a((S'taskHandle'
p21162
(lp21163
S'TaskHandle'
p21164
aNtp21165
(S'channel'
p21166
(lp21167
S'char'
p21168
a(lp21169
I-1
aaNtp21170
(S'data'
p21171
(lp21172
S'int32'
p21173
aNtp21174
tp21175
tp21176
sS'DAQmxSetCITimestampUnits'
p21177
((lp21178
S'int32'
p21179
ag34
a((S'taskHandle'
p21180
(lp21181
S'TaskHandle'
p21182
aNtp21183
(S'channel'
p21184
(lp21185
S'char'
p21186
a(lp21187
I-1
aaNtp21188
(S'data'
p21189
(lp21190
S'int32'
p21191
aNtp21192
tp21193
tp21194
sS'DAQmxSetSampClkTimebaseDiv'
p21195
((lp21196
S'int32'
p21197
ag34
a((S'taskHandle'
p21198
(lp21199
S'TaskHandle'
p21200
aNtp21201
(S'data'
p21202
(lp21203
S'uInt32'
p21204
aNtp21205
tp21206
tp21207
sS'DAQmxClearTask'
p21208
((lp21209
S'int32'
p21210
ag34
a((S'taskHandle'
p21211
(lp21212
S'TaskHandle'
p21213
aNtp21214
tp21215
tp21216
sS'DAQmxResetExportedCtrOutEventPulsePolarity'
p21217
((lp21218
S'int32'
p21219
ag34
a((S'taskHandle'
p21220
(lp21221
S'TaskHandle'
p21222
aNtp21223
tp21224
tp21225
sS'DAQmxGetPhysicalChanName'
p21226
((lp21227
S'int32'
p21228
ag34
a((S'taskHandle'
p21229
(lp21230
S'TaskHandle'
p21231
aNtp21232
(S'channel'
p21233
(lp21234
S'char'
p21235
a(lp21236
I-1
aaNtp21237
(S'data'
p21238
(lp21239
S'char'
p21240
ag42
aNtp21241
(S'bufferSize'
p21242
(lp21243
S'uInt32'
p21244
aNtp21245
tp21246
tp21247
sS'DAQmxResetAIThrmcplCJCVal'
p21248
((lp21249
S'int32'
p21250
ag34
a((S'taskHandle'
p21251
(lp21252
S'TaskHandle'
p21253
aNtp21254
(S'channel'
p21255
(lp21256
S'char'
p21257
a(lp21258
I-1
aaNtp21259
tp21260
tp21261
sS'DAQmxWriteCtrTimeScalar'
p21262
((lp21263
S'int32'
p21264
ag34
a((S'taskHandle'
p21265
(lp21266
S'TaskHandle'
p21267
aNtp21268
(S'autoStart'
p21269
(lp21270
S'bool32'
p21271
aNtp21272
(S'timeout'
p21273
(lp21274
S'float64'
p21275
aNtp21276
(S'highTime'
p21277
(lp21278
S'float64'
p21279
aNtp21280
(S'lowTime'
p21281
(lp21282
S'float64'
p21283
aNtp21284
(S'reserved'
p21285
(lp21286
S'bool32'
p21287
ag42
aNtp21288
tp21289
tp21290
sS'DAQmxResetCIEncoderAInputDigFltrMinPulseWidth'
p21291
((lp21292
S'int32'
p21293
ag34
a((S'taskHandle'
p21294
(lp21295
S'TaskHandle'
p21296
aNtp21297
(S'channel'
p21298
(lp21299
S'char'
p21300
a(lp21301
I-1
aaNtp21302
tp21303
tp21304
sS'DAQmxGetDigLvlPauseTrigDigFltrMinPulseWidth'
p21305
((lp21306
S'int32'
p21307
ag34
a((S'taskHandle'
p21308
(lp21309
S'TaskHandle'
p21310
aNtp21311
(S'data'
p21312
(lp21313
S'float64'
p21314
ag42
aNtp21315
tp21316
tp21317
sS'DAQmxSetDOTristate'
p21318
((lp21319
S'int32'
p21320
ag34
a((S'taskHandle'
p21321
(lp21322
S'TaskHandle'
p21323
aNtp21324
(S'channel'
p21325
(lp21326
S'char'
p21327
a(lp21328
I-1
aaNtp21329
(S'data'
p21330
(lp21331
S'bool32'
p21332
aNtp21333
tp21334
tp21335
sS'DAQmxSetSampQuantSampPerChan'
p21336
((lp21337
S'int32'
p21338
ag34
a((S'taskHandle'
p21339
(lp21340
S'TaskHandle'
p21341
aNtp21342
(S'data'
p21343
(lp21344
S'uInt64'
p21345
aNtp21346
tp21347
tp21348
sS'DAQmxGetCITwoEdgeSepFirstDigFltrMinPulseWidth'
p21349
((lp21350
S'int32'
p21351
ag34
a((S'taskHandle'
p21352
(lp21353
S'TaskHandle'
p21354
aNtp21355
(S'channel'
p21356
(lp21357
S'char'
p21358
a(lp21359
I-1
aaNtp21360
(S'data'
p21361
(lp21362
S'float64'
p21363
ag42
aNtp21364
tp21365
tp21366
sS'DAQmxResetAITermCfg'
p21367
((lp21368
S'int32'
p21369
ag34
a((S'taskHandle'
p21370
(lp21371
S'TaskHandle'
p21372
aNtp21373
(S'channel'
p21374
(lp21375
S'char'
p21376
a(lp21377
I-1
aaNtp21378
tp21379
tp21380
sS'DAQmxSetAODataXferReqCond'
p21381
((lp21382
S'int32'
p21383
ag34
a((S'taskHandle'
p21384
(lp21385
S'TaskHandle'
p21386
aNtp21387
(S'channel'
p21388
(lp21389
S'char'
p21390
a(lp21391
I-1
aaNtp21392
(S'data'
p21393
(lp21394
S'int32'
p21395
aNtp21396
tp21397
tp21398
sS'DAQmxCreateAOCurrentChan'
p21399
((lp21400
S'int32'
p21401
ag34
a((S'taskHandle'
p21402
(lp21403
S'TaskHandle'
p21404
aNtp21405
(S'physicalChannel'
p21406
(lp21407
S'char'
p21408
a(lp21409
I-1
aaNtp21410
(S'nameToAssignToChannel'
p21411
(lp21412
S'char'
p21413
a(lp21414
I-1
aaNtp21415
(S'minVal'
p21416
(lp21417
S'float64'
p21418
aNtp21419
(S'maxVal'
p21420
(lp21421
S'float64'
p21422
aNtp21423
(S'units'
p21424
(lp21425
S'int32'
p21426
aNtp21427
(S'customScaleName'
p21428
(lp21429
S'char'
p21430
a(lp21431
I-1
aaNtp21432
tp21433
tp21434
sS'DAQmxResetExportedSampClkOutputTerm'
p21435
((lp21436
S'int32'
p21437
ag34
a((S'taskHandle'
p21438
(lp21439
S'TaskHandle'
p21440
aNtp21441
tp21442
tp21443
sS'DAQmxWriteCtrFreq'
p21444
((lp21445
S'int32'
p21446
ag34
a((S'taskHandle'
p21447
(lp21448
S'TaskHandle'
p21449
aNtp21450
(S'numSampsPerChan'
p21451
(lp21452
S'int32'
p21453
aNtp21454
(S'autoStart'
p21455
(lp21456
S'bool32'
p21457
aNtp21458
(S'timeout'
p21459
(lp21460
S'float64'
p21461
aNtp21462
(S'dataLayout'
p21463
(lp21464
S'bool32'
p21465
aNtp21466
(S'frequency'
p21467
(lp21468
S'float64'
p21469
a(lp21470
I-1
aaNtp21471
(S'dutyCycle'
p21472
(lp21473
S'float64'
p21474
a(lp21475
I-1
aaNtp21476
(S'numSampsPerChanWritten'
p21477
(lp21478
S'int32'
p21479
ag42
aNtp21480
(S'reserved'
p21481
(lp21482
S'bool32'
p21483
ag42
aNtp21484
tp21485
tp21486
sS'DAQmxGetAILossyLSBRemovalCompressedSampSize'
p21487
((lp21488
S'int32'
p21489
ag34
a((S'taskHandle'
p21490
(lp21491
S'TaskHandle'
p21492
aNtp21493
(S'channel'
p21494
(lp21495
S'char'
p21496
a(lp21497
I-1
aaNtp21498
(S'data'
p21499
(lp21500
S'uInt32'
p21501
ag42
aNtp21502
tp21503
tp21504
sS'DAQmxCreateCISemiPeriodChan'
p21505
((lp21506
S'int32'
p21507
ag34
a((S'taskHandle'
p21508
(lp21509
S'TaskHandle'
p21510
aNtp21511
(S'counter'
p21512
(lp21513
S'char'
p21514
a(lp21515
I-1
aaNtp21516
(S'nameToAssignToChannel'
p21517
(lp21518
S'char'
p21519
a(lp21520
I-1
aaNtp21521
(S'minVal'
p21522
(lp21523
S'float64'
p21524
aNtp21525
(S'maxVal'
p21526
(lp21527
S'float64'
p21528
aNtp21529
(S'units'
p21530
(lp21531
S'int32'
p21532
aNtp21533
(S'customScaleName'
p21534
(lp21535
S'char'
p21536
a(lp21537
I-1
aaNtp21538
tp21539
tp21540
sS'DAQmxGetAIFreqThreshVoltage'
p21541
((lp21542
S'int32'
p21543
ag34
a((S'taskHandle'
p21544
(lp21545
S'TaskHandle'
p21546
aNtp21547
(S'channel'
p21548
(lp21549
S'char'
p21550
a(lp21551
I-1
aaNtp21552
(S'data'
p21553
(lp21554
S'float64'
p21555
ag42
aNtp21556
tp21557
tp21558
sS'DAQmxSetAnlgEdgeRefTrigSlope'
p21559
((lp21560
S'int32'
p21561
ag34
a((S'taskHandle'
p21562
(lp21563
S'TaskHandle'
p21564
aNtp21565
(S'data'
p21566
(lp21567
S'int32'
p21568
aNtp21569
tp21570
tp21571
sS'DAQmxSetCIEncoderDecodingType'
p21572
((lp21573
S'int32'
p21574
ag34
a((S'taskHandle'
p21575
(lp21576
S'TaskHandle'
p21577
aNtp21578
(S'channel'
p21579
(lp21580
S'char'
p21581
a(lp21582
I-1
aaNtp21583
(S'data'
p21584
(lp21585
S'int32'
p21586
aNtp21587
tp21588
tp21589
sS'DAQmxResetWriteOffset'
p21590
((lp21591
S'int32'
p21592
ag34
a((S'taskHandle'
p21593
(lp21594
S'TaskHandle'
p21595
aNtp21596
tp21597
tp21598
sS'DAQmxResetSyncPulseSrc'
p21599
((lp21600
S'int32'
p21601
ag34
a((S'taskHandle'
p21602
(lp21603
S'TaskHandle'
p21604
aNtp21605
tp21606
tp21607
sS'DAQmxGetSysScales'
p21608
((lp21609
S'int32'
p21610
ag34
a((S'data'
p21611
(lp21612
S'char'
p21613
ag42
aNtp21614
(S'bufferSize'
p21615
(lp21616
S'uInt32'
p21617
aNtp21618
tp21619
tp21620
sS'DAQmxReadAnalogScalarF64'
p21621
((lp21622
S'int32'
p21623
ag34
a((S'taskHandle'
p21624
(lp21625
S'TaskHandle'
p21626
aNtp21627
(S'timeout'
p21628
(lp21629
S'float64'
p21630
aNtp21631
(S'value'
p21632
(lp21633
S'float64'
p21634
ag42
aNtp21635
(S'reserved'
p21636
(lp21637
S'bool32'
p21638
ag42
aNtp21639
tp21640
tp21641
sS'DAQmxGetCIEncoderZInputDigFltrEnable'
p21642
((lp21643
S'int32'
p21644
ag34
a((S'taskHandle'
p21645
(lp21646
S'TaskHandle'
p21647
aNtp21648
(S'channel'
p21649
(lp21650
S'char'
p21651
a(lp21652
I-1
aaNtp21653
(S'data'
p21654
(lp21655
S'bool32'
p21656
ag42
aNtp21657
tp21658
tp21659
sS'DAQmxResetAICoupling'
p21660
((lp21661
S'int32'
p21662
ag34
a((S'taskHandle'
p21663
(lp21664
S'TaskHandle'
p21665
aNtp21666
(S'channel'
p21667
(lp21668
S'char'
p21669
a(lp21670
I-1
aaNtp21671
tp21672
tp21673
sS'DAQmxResetCIEncoderBInputDigFltrMinPulseWidth'
p21674
((lp21675
S'int32'
p21676
ag34
a((S'taskHandle'
p21677
(lp21678
S'TaskHandle'
p21679
aNtp21680
(S'channel'
p21681
(lp21682
S'char'
p21683
a(lp21684
I-1
aaNtp21685
tp21686
tp21687
sS'DAQmxSetAODataXferMech'
p21688
((lp21689
S'int32'
p21690
ag34
a((S'taskHandle'
p21691
(lp21692
S'TaskHandle'
p21693
aNtp21694
(S'channel'
p21695
(lp21696
S'char'
p21697
a(lp21698
I-1
aaNtp21699
(S'data'
p21700
(lp21701
S'int32'
p21702
aNtp21703
tp21704
tp21705
sS'DAQmxGetScalePolyForwardCoeff'
p21706
((lp21707
S'int32'
p21708
ag34
a((S'scaleName'
p21709
(lp21710
S'char'
p21711
a(lp21712
I-1
aaNtp21713
(S'data'
p21714
(lp21715
S'float64'
p21716
ag42
aNtp21717
(S'arraySizeInSamples'
p21718
(lp21719
S'uInt32'
p21720
aNtp21721
tp21722
tp21723
sS'DAQmxResetAIChanCalTableScaledVals'
p21724
((lp21725
S'int32'
p21726
ag34
a((S'taskHandle'
p21727
(lp21728
S'TaskHandle'
p21729
aNtp21730
(S'channel'
p21731
(lp21732
S'char'
p21733
a(lp21734
I-1
aaNtp21735
tp21736
tp21737
sS'DAQmxSetBufInputBufSize'
p21738
((lp21739
S'int32'
p21740
ag34
a((S'taskHandle'
p21741
(lp21742
S'TaskHandle'
p21743
aNtp21744
(S'data'
p21745
(lp21746
S'uInt32'
p21747
aNtp21748
tp21749
tp21750
sS'DAQmxGetReadChannelsToRead'
p21751
((lp21752
S'int32'
p21753
ag34
a((S'taskHandle'
p21754
(lp21755
S'TaskHandle'
p21756
aNtp21757
(S'data'
p21758
(lp21759
S'char'
p21760
ag42
aNtp21761
(S'bufferSize'
p21762
(lp21763
S'uInt32'
p21764
aNtp21765
tp21766
tp21767
sS'DAQmxResetCOCtrTimebaseRate'
p21768
((lp21769
S'int32'
p21770
ag34
a((S'taskHandle'
p21771
(lp21772
S'TaskHandle'
p21773
aNtp21774
(S'channel'
p21775
(lp21776
S'char'
p21777
a(lp21778
I-1
aaNtp21779
tp21780
tp21781
sS'DAQmxGetErrorString'
p21782
((lp21783
S'int32'
p21784
ag34
a((S'errorCode'
p21785
(lp21786
S'int32'
p21787
aNtp21788
(S'errorString'
p21789
(lp21790
S'char'
p21791
a(lp21792
I-1
aaNtp21793
(S'bufferSize'
p21794
(lp21795
S'uInt32'
p21796
aNtp21797
tp21798
tp21799
sS'DAQmxResetAnlgWinPauseTrigSrc'
p21800
((lp21801
S'int32'
p21802
ag34
a((S'taskHandle'
p21803
(lp21804
S'TaskHandle'
p21805
aNtp21806
tp21807
tp21808
sS'DAQmxResetAIRTDType'
p21809
((lp21810
S'int32'
p21811
ag34
a((S'taskHandle'
p21812
(lp21813
S'TaskHandle'
p21814
aNtp21815
(S'channel'
p21816
(lp21817
S'char'
p21818
a(lp21819
I-1
aaNtp21820
tp21821
tp21822
sS'DAQmxResetCICtrTimebaseDigSyncEnable'
p21823
((lp21824
S'int32'
p21825
ag34
a((S'taskHandle'
p21826
(lp21827
S'TaskHandle'
p21828
aNtp21829
(S'channel'
p21830
(lp21831
S'char'
p21832
a(lp21833
I-1
aaNtp21834
tp21835
tp21836
sS'DAQmxResetDelayFromSampClkDelay'
p21837
((lp21838
S'int32'
p21839
ag34
a((S'taskHandle'
p21840
(lp21841
S'TaskHandle'
p21842
aNtp21843
tp21844
tp21845
sS'DAQmxResetAIChanCalPolyForwardCoeff'
p21846
((lp21847
S'int32'
p21848
ag34
a((S'taskHandle'
p21849
(lp21850
S'TaskHandle'
p21851
aNtp21852
(S'channel'
p21853
(lp21854
S'char'
p21855
a(lp21856
I-1
aaNtp21857
tp21858
tp21859
sS'DAQmxResetSampClkDigFltrEnable'
p21860
((lp21861
S'int32'
p21862
ag34
a((S'taskHandle'
p21863
(lp21864
S'TaskHandle'
p21865
aNtp21866
tp21867
tp21868
sS'DAQmxResetAIBridgeShuntCalSelect'
p21869
((lp21870
S'int32'
p21871
ag34
a((S'taskHandle'
p21872
(lp21873
S'TaskHandle'
p21874
aNtp21875
(S'channel'
p21876
(lp21877
S'char'
p21878
a(lp21879
I-1
aaNtp21880
tp21881
tp21882
sS'DAQmxGetSwitchDevNumSwitchChans'
p21883
((lp21884
S'int32'
p21885
ag34
a((S'deviceName'
p21886
(lp21887
S'char'
p21888
a(lp21889
I-1
aaNtp21890
(S'data'
p21891
(lp21892
S'uInt32'
p21893
ag42
aNtp21894
tp21895
tp21896
sS'DAQmxSetAIBridgeShuntCalEnable'
p21897
((lp21898
S'int32'
p21899
ag34
a((S'taskHandle'
p21900
(lp21901
S'TaskHandle'
p21902
aNtp21903
(S'channel'
p21904
(lp21905
S'char'
p21906
a(lp21907
I-1
aaNtp21908
(S'data'
p21909
(lp21910
S'bool32'
p21911
aNtp21912
tp21913
tp21914
sS'DAQmxGetAnlgEdgeRefTrigSrc'
p21915
((lp21916
S'int32'
p21917
ag34
a((S'taskHandle'
p21918
(lp21919
S'TaskHandle'
p21920
aNtp21921
(S'data'
p21922
(lp21923
S'char'
p21924
ag42
aNtp21925
(S'bufferSize'
p21926
(lp21927
S'uInt32'
p21928
aNtp21929
tp21930
tp21931
sS'DAQmxResetDigEdgeArmStartTrigDigFltrTimebaseRate'
p21932
((lp21933
S'int32'
p21934
ag34
a((S'taskHandle'
p21935
(lp21936
S'TaskHandle'
p21937
aNtp21938
tp21939
tp21940
sS'DAQmxSetAnlgLvlPauseTrigWhen'
p21941
((lp21942
S'int32'
p21943
ag34
a((S'taskHandle'
p21944
(lp21945
S'TaskHandle'
p21946
aNtp21947
(S'data'
p21948
(lp21949
S'int32'
p21950
aNtp21951
tp21952
tp21953
sS'DAQmxGetWriteRawDataWidth'
p21954
((lp21955
S'int32'
p21956
ag34
a((S'taskHandle'
p21957
(lp21958
S'TaskHandle'
p21959
aNtp21960
(S'data'
p21961
(lp21962
S'uInt32'
p21963
ag42
aNtp21964
tp21965
tp21966
sS'DAQmxResetAdvTrigType'
p21967
((lp21968
S'int32'
p21969
ag34
a((S'taskHandle'
p21970
(lp21971
S'TaskHandle'
p21972
aNtp21973
tp21974
tp21975
sS'DAQmxReadBinaryU16'
p21976
((lp21977
S'int32'
p21978
ag34
a((S'taskHandle'
p21979
(lp21980
S'TaskHandle'
p21981
aNtp21982
(S'numSampsPerChan'
p21983
(lp21984
S'int32'
p21985
aNtp21986
(S'timeout'
p21987
(lp21988
S'float64'
p21989
aNtp21990
(S'fillMode'
p21991
(lp21992
S'bool32'
p21993
aNtp21994
(S'readArray'
p21995
(lp21996
S'uInt16'
p21997
a(lp21998
I-1
aaNtp21999
(S'arraySizeInSamps'
p22000
(lp22001
S'uInt32'
p22002
aNtp22003
(S'sampsPerChanRead'
p22004
(lp22005
S'int32'
p22006
ag42
aNtp22007
(S'reserved'
p22008
(lp22009
S'bool32'
p22010
ag42
aNtp22011
tp22012
tp22013
sS'DAQmxResetExportedCtrOutEventOutputTerm'
p22014
((lp22015
S'int32'
p22016
ag34
a((S'taskHandle'
p22017
(lp22018
S'TaskHandle'
p22019
aNtp22020
tp22021
tp22022
sS'DAQmxGetCOPulseFreq'
p22023
((lp22024
S'int32'
p22025
ag34
a((S'taskHandle'
p22026
(lp22027
S'TaskHandle'
p22028
aNtp22029
(S'channel'
p22030
(lp22031
S'char'
p22032
a(lp22033
I-1
aaNtp22034
(S'data'
p22035
(lp22036
S'float64'
p22037
ag42
aNtp22038
tp22039
tp22040
sS'DAQmxSetCICountEdgesInitialCnt'
p22041
((lp22042
S'int32'
p22043
ag34
a((S'taskHandle'
p22044
(lp22045
S'TaskHandle'
p22046
aNtp22047
(S'channel'
p22048
(lp22049
S'char'
p22050
a(lp22051
I-1
aaNtp22052
(S'data'
p22053
(lp22054
S'uInt32'
p22055
aNtp22056
tp22057
tp22058
sS'DAQmxInitExtCal'
p22059
((lp22060
S'int32'
p22061
ag34
a((S'deviceName'
p22062
(lp22063
S'char'
p22064
a(lp22065
I-1
aaNtp22066
(S'password'
p22067
(lp22068
S'char'
p22069
a(lp22070
I-1
aaNtp22071
(S'calHandle'
p22072
(lp22073
S'uInt32'
p22074
ag42
aNtp22075
tp22076
tp22077
sS'DAQmxGetSyncPulseMinDelayToStart'
p22078
((lp22079
S'int32'
p22080
ag34
a((S'taskHandle'
p22081
(lp22082
S'TaskHandle'
p22083
aNtp22084
(S'data'
p22085
(lp22086
S'float64'
p22087
ag42
aNtp22088
tp22089
tp22090
sS'DAQmxSetExportedAdvCmpltEventDelay'
p22091
((lp22092
S'int32'
p22093
ag34
a((S'taskHandle'
p22094
(lp22095
S'TaskHandle'
p22096
aNtp22097
(S'data'
p22098
(lp22099
S'float64'
p22100
aNtp22101
tp22102
tp22103
sS'DAQmxGetCITwoEdgeSepSecondDigFltrTimebaseRate'
p22104
((lp22105
S'int32'
p22106
ag34
a((S'taskHandle'
p22107
(lp22108
S'TaskHandle'
p22109
aNtp22110
(S'channel'
p22111
(lp22112
S'char'
p22113
a(lp22114
I-1
aaNtp22115
(S'data'
p22116
(lp22117
S'float64'
p22118
ag42
aNtp22119
tp22120
tp22121
sS'DAQmxConfigureTEDS'
p22122
((lp22123
S'int32'
p22124
ag34
a((S'physicalChannel'
p22125
(lp22126
S'char'
p22127
a(lp22128
I-1
aaNtp22129
(S'filePath'
p22130
(lp22131
S'char'
p22132
a(lp22133
I-1
aaNtp22134
tp22135
tp22136
sS'DAQmxResetDigEdgeRefTrigEdge'
p22137
((lp22138
S'int32'
p22139
ag34
a((S'taskHandle'
p22140
(lp22141
S'TaskHandle'
p22142
aNtp22143
tp22144
tp22145
sS'DAQmxResetAnlgWinRefTrigCoupling'
p22146
((lp22147
S'int32'
p22148
ag34
a((S'taskHandle'
p22149
(lp22150
S'TaskHandle'
p22151
aNtp22152
tp22153
tp22154
sS'DAQmxRegisterDoneEvent'
p22155
((lp22156
S'int32'
p22157
ag34
a((S'task'
p22158
(lp22159
S'TaskHandle'
p22160
aNtp22161
(S'options'
p22162
(lp22163
S'uInt32'
p22164
aNtp22165
(S'callbackFunction'
p22166
(lp22167
S'DAQmxDoneEventCallbackPtr'
p22168
aNtp22169
(S'callbackData'
p22170
(lp22171
S'void'
p22172
ag42
aNtp22173
tp22174
tp22175
sS'DAQmxGetExportedHshkEventPulsePolarity'
p22176
((lp22177
S'int32'
p22178
ag34
a((S'taskHandle'
p22179
(lp22180
S'TaskHandle'
p22181
aNtp22182
(S'data'
p22183
(lp22184
S'int32'
p22185
ag42
aNtp22186
tp22187
tp22188
sS'DAQmxGetSwitchScanWaitingForAdv'
p22189
((lp22190
S'int32'
p22191
ag34
a((S'taskHandle'
p22192
(lp22193
S'TaskHandle'
p22194
aNtp22195
(S'data'
p22196
(lp22197
S'bool32'
p22198
ag42
aNtp22199
tp22200
tp22201
sS'DAQmxSaveScale'
p22202
((lp22203
S'int32'
p22204
ag34
a((S'scaleName'
p22205
(lp22206
S'char'
p22207
a(lp22208
I-1
aaNtp22209
(S'saveAs'
p22210
(lp22211
S'char'
p22212
a(lp22213
I-1
aaNtp22214
(S'author'
p22215
(lp22216
S'char'
p22217
a(lp22218
I-1
aaNtp22219
(S'options'
p22220
(lp22221
S'uInt32'
p22222
aNtp22223
tp22224
tp22225
sS'DAQmxSetExportedRefTrigOutputTerm'
p22226
((lp22227
S'int32'
p22228
ag34
a((S'taskHandle'
p22229
(lp22230
S'TaskHandle'
p22231
aNtp22232
(S'data'
p22233
(lp22234
S'char'
p22235
ag42
aNtp22236
tp22237
tp22238
sS'DAQmxGetCOPulseTimeUnits'
p22239
((lp22240
S'int32'
p22241
ag34
a((S'taskHandle'
p22242
(lp22243
S'TaskHandle'
p22244
aNtp22245
(S'channel'
p22246
(lp22247
S'char'
p22248
a(lp22249
I-1
aaNtp22250
(S'data'
p22251
(lp22252
S'int32'
p22253
ag42
aNtp22254
tp22255
tp22256
sS'DAQmxResetAOVoltageUnits'
p22257
((lp22258
S'int32'
p22259
ag34
a((S'taskHandle'
p22260
(lp22261
S'TaskHandle'
p22262
aNtp22263
(S'channel'
p22264
(lp22265
S'char'
p22266
a(lp22267
I-1
aaNtp22268
tp22269
tp22270
sS'DAQmxSetRefTrigType'
p22271
((lp22272
S'int32'
p22273
ag34
a((S'taskHandle'
p22274
(lp22275
S'TaskHandle'
p22276
aNtp22277
(S'data'
p22278
(lp22279
S'int32'
p22280
aNtp22281
tp22282
tp22283
sS'DAQmxResetAODACOffsetVal'
p22284
((lp22285
S'int32'
p22286
ag34
a((S'taskHandle'
p22287
(lp22288
S'TaskHandle'
p22289
aNtp22290
(S'channel'
p22291
(lp22292
S'char'
p22293
a(lp22294
I-1
aaNtp22295
tp22296
tp22297
sS'DAQmxGetSwitchChanMaxACSwitchCurrent'
p22298
((lp22299
S'int32'
p22300
ag34
a((S'switchChannelName'
p22301
(lp22302
S'char'
p22303
a(lp22304
I-1
aaNtp22305
(S'data'
p22306
(lp22307
S'float64'
p22308
ag42
aNtp22309
tp22310
tp22311
sS'DAQmxResetDigLvlPauseTrigWhen'
p22312
((lp22313
S'int32'
p22314
ag34
a((S'taskHandle'
p22315
(lp22316
S'TaskHandle'
p22317
aNtp22318
tp22319
tp22320
sS'DAQmxCreateTEDSAIThrmstrChanIex'
p22321
((lp22322
S'int32'
p22323
ag34
a((S'taskHandle'
p22324
(lp22325
S'TaskHandle'
p22326
aNtp22327
(S'physicalChannel'
p22328
(lp22329
S'char'
p22330
a(lp22331
I-1
aaNtp22332
(S'nameToAssignToChannel'
p22333
(lp22334
S'char'
p22335
a(lp22336
I-1
aaNtp22337
(S'minVal'
p22338
(lp22339
S'float64'
p22340
aNtp22341
(S'maxVal'
p22342
(lp22343
S'float64'
p22344
aNtp22345
(S'units'
p22346
(lp22347
S'int32'
p22348
aNtp22349
(S'resistanceConfig'
p22350
(lp22351
S'int32'
p22352
aNtp22353
(S'currentExcitSource'
p22354
(lp22355
S'int32'
p22356
aNtp22357
(S'currentExcitVal'
p22358
(lp22359
S'float64'
p22360
aNtp22361
tp22362
tp22363
sS'DAQmxGetAIChanCalEnableCal'
p22364
((lp22365
S'int32'
p22366
ag34
a((S'taskHandle'
p22367
(lp22368
S'TaskHandle'
p22369
aNtp22370
(S'channel'
p22371
(lp22372
S'char'
p22373
a(lp22374
I-1
aaNtp22375
(S'data'
p22376
(lp22377
S'bool32'
p22378
ag42
aNtp22379
tp22380
tp22381
sS'DAQmxGetAOEnhancedImageRejectionEnable'
p22382
((lp22383
S'int32'
p22384
ag34
a((S'taskHandle'
p22385
(lp22386
S'TaskHandle'
p22387
aNtp22388
(S'channel'
p22389
(lp22390
S'char'
p22391
a(lp22392
I-1
aaNtp22393
(S'data'
p22394
(lp22395
S'bool32'
p22396
ag42
aNtp22397
tp22398
tp22399
sS'DAQmxResetCIFreqStartingEdge'
p22400
((lp22401
S'int32'
p22402
ag34
a((S'taskHandle'
p22403
(lp22404
S'TaskHandle'
p22405
aNtp22406
(S'channel'
p22407
(lp22408
S'char'
p22409
a(lp22410
I-1
aaNtp22411
tp22412
tp22413
sS'DAQmxSetDigPatternStartTrigPattern'
p22414
((lp22415
S'int32'
p22416
ag34
a((S'taskHandle'
p22417
(lp22418
S'TaskHandle'
p22419
aNtp22420
(S'data'
p22421
(lp22422
S'char'
p22423
ag42
aNtp22424
tp22425
tp22426
sS'DAQmxSetExportedHshkEventInterlockedAssertedLvl'
p22427
((lp22428
S'int32'
p22429
ag34
a((S'taskHandle'
p22430
(lp22431
S'TaskHandle'
p22432
aNtp22433
(S'data'
p22434
(lp22435
S'int32'
p22436
aNtp22437
tp22438
tp22439
sS'DAQmxResetAIChanCalApplyCalIfExp'
p22440
((lp22441
S'int32'
p22442
ag34
a((S'taskHandle'
p22443
(lp22444
S'TaskHandle'
p22445
aNtp22446
(S'channel'
p22447
(lp22448
S'char'
p22449
a(lp22450
I-1
aaNtp22451
tp22452
tp22453
sS'DAQmxSetAOUseOnlyOnBrdMem'
p22454
((lp22455
S'int32'
p22456
ag34
a((S'taskHandle'
p22457
(lp22458
S'TaskHandle'
p22459
aNtp22460
(S'channel'
p22461
(lp22462
S'char'
p22463
a(lp22464
I-1
aaNtp22465
(S'data'
p22466
(lp22467
S'bool32'
p22468
aNtp22469
tp22470
tp22471
sS'DAQmxGetCIFreqStartingEdge'
p22472
((lp22473
S'int32'
p22474
ag34
a((S'taskHandle'
p22475
(lp22476
S'TaskHandle'
p22477
aNtp22478
(S'channel'
p22479
(lp22480
S'char'
p22481
a(lp22482
I-1
aaNtp22483
(S'data'
p22484
(lp22485
S'int32'
p22486
ag42
aNtp22487
tp22488
tp22489
sS'DAQmxSetCICtrTimebaseDigSyncEnable'
p22490
((lp22491
S'int32'
p22492
ag34
a((S'taskHandle'
p22493
(lp22494
S'TaskHandle'
p22495
aNtp22496
(S'channel'
p22497
(lp22498
S'char'
p22499
a(lp22500
I-1
aaNtp22501
(S'data'
p22502
(lp22503
S'bool32'
p22504
aNtp22505
tp22506
tp22507
sS'DAQmxGetAnlgWinRefTrigWhen'
p22508
((lp22509
S'int32'
p22510
ag34
a((S'taskHandle'
p22511
(lp22512
S'TaskHandle'
p22513
aNtp22514
(S'data'
p22515
(lp22516
S'int32'
p22517
ag42
aNtp22518
tp22519
tp22520
sS'DAQmxResetAnlgWinPauseTrigTop'
p22521
((lp22522
S'int32'
p22523
ag34
a((S'taskHandle'
p22524
(lp22525
S'TaskHandle'
p22526
aNtp22527
tp22528
tp22529
sS'DAQmxGetExportedCtrOutEventOutputTerm'
p22530
((lp22531
S'int32'
p22532
ag34
a((S'taskHandle'
p22533
(lp22534
S'TaskHandle'
p22535
aNtp22536
(S'data'
p22537
(lp22538
S'char'
p22539
ag42
aNtp22540
(S'bufferSize'
p22541
(lp22542
S'uInt32'
p22543
aNtp22544
tp22545
tp22546
sS'DAQmxSetAnlgEdgeStartTrigLvl'
p22547
((lp22548
S'int32'
p22549
ag34
a((S'taskHandle'
p22550
(lp22551
S'TaskHandle'
p22552
aNtp22553
(S'data'
p22554
(lp22555
S'float64'
p22556
aNtp22557
tp22558
tp22559
sS'DAQmxSetAODACRngLow'
p22560
((lp22561
S'int32'
p22562
ag34
a((S'taskHandle'
p22563
(lp22564
S'TaskHandle'
p22565
aNtp22566
(S'channel'
p22567
(lp22568
S'char'
p22569
a(lp22570
I-1
aaNtp22571
(S'data'
p22572
(lp22573
S'float64'
p22574
aNtp22575
tp22576
tp22577
sS'DAQmxCloseExtCal'
p22578
((lp22579
S'int32'
p22580
ag34
a((S'calHandle'
p22581
(lp22582
S'uInt32'
p22583
aNtp22584
(S'action'
p22585
(lp22586
S'int32'
p22587
aNtp22588
tp22589
tp22590
sS'DAQmxResetPauseTrigType'
p22591
((lp22592
S'int32'
p22593
ag34
a((S'taskHandle'
p22594
(lp22595
S'TaskHandle'
p22596
aNtp22597
tp22598
tp22599
sS'DAQmxGetAnlgWinRefTrigTop'
p22600
((lp22601
S'int32'
p22602
ag34
a((S'taskHandle'
p22603
(lp22604
S'TaskHandle'
p22605
aNtp22606
(S'data'
p22607
(lp22608
S'float64'
p22609
ag42
aNtp22610
tp22611
tp22612
sS'DAQmxGetCICustomScaleName'
p22613
((lp22614
S'int32'
p22615
ag34
a((S'taskHandle'
p22616
(lp22617
S'TaskHandle'
p22618
aNtp22619
(S'channel'
p22620
(lp22621
S'char'
p22622
a(lp22623
I-1
aaNtp22624
(S'data'
p22625
(lp22626
S'char'
p22627
ag42
aNtp22628
(S'bufferSize'
p22629
(lp22630
S'uInt32'
p22631
aNtp22632
tp22633
tp22634
sS'DAQmxResetExportedChangeDetectEventOutputTerm'
p22635
((lp22636
S'int32'
p22637
ag34
a((S'taskHandle'
p22638
(lp22639
S'TaskHandle'
p22640
aNtp22641
tp22642
tp22643
sS'DAQmxGetAODACRefAllowConnToGnd'
p22644
((lp22645
S'int32'
p22646
ag34
a((S'taskHandle'
p22647
(lp22648
S'TaskHandle'
p22649
aNtp22650
(S'channel'
p22651
(lp22652
S'char'
p22653
a(lp22654
I-1
aaNtp22655
(S'data'
p22656
(lp22657
S'bool32'
p22658
ag42
aNtp22659
tp22660
tp22661
sS'DAQmxSetAIMax'
p22662
((lp22663
S'int32'
p22664
ag34
a((S'taskHandle'
p22665
(lp22666
S'TaskHandle'
p22667
aNtp22668
(S'channel'
p22669
(lp22670
S'char'
p22671
a(lp22672
I-1
aaNtp22673
(S'data'
p22674
(lp22675
S'float64'
p22676
aNtp22677
tp22678
tp22679
sS'DAQmxGetExportedAIHoldCmpltEventPulsePolarity'
p22680
((lp22681
S'int32'
p22682
ag34
a((S'taskHandle'
p22683
(lp22684
S'TaskHandle'
p22685
aNtp22686
(S'data'
p22687
(lp22688
S'int32'
p22689
ag42
aNtp22690
tp22691
tp22692
sS'DAQmxCreateAIMicrophoneChan'
p22693
((lp22694
S'int32'
p22695
ag34
a((S'taskHandle'
p22696
(lp22697
S'TaskHandle'
p22698
aNtp22699
(S'physicalChannel'
p22700
(lp22701
S'char'
p22702
a(lp22703
I-1
aaNtp22704
(S'nameToAssignToChannel'
p22705
(lp22706
S'char'
p22707
a(lp22708
I-1
aaNtp22709
(S'terminalConfig'
p22710
(lp22711
S'int32'
p22712
aNtp22713
(S'units'
p22714
(lp22715
S'int32'
p22716
aNtp22717
(S'micSensitivity'
p22718
(lp22719
S'float64'
p22720
aNtp22721
(S'maxSndPressLevel'
p22722
(lp22723
S'float64'
p22724
aNtp22725
(S'currentExcitSource'
p22726
(lp22727
S'int32'
p22728
aNtp22729
(S'currentExcitVal'
p22730
(lp22731
S'float64'
p22732
aNtp22733
(S'customScaleName'
p22734
(lp22735
S'char'
p22736
a(lp22737
I-1
aaNtp22738
tp22739
tp22740
sS'DAQmxChangeExtCalPassword'
p22741
((lp22742
S'int32'
p22743
ag34
a((S'deviceName'
p22744
(lp22745
S'char'
p22746
a(lp22747
I-1
aaNtp22748
(S'password'
p22749
(lp22750
S'char'
p22751
a(lp22752
I-1
aaNtp22753
(S'newPassword'
p22754
(lp22755
S'char'
p22756
a(lp22757
I-1
aaNtp22758
tp22759
tp22760
sS'DAQmxGetTaskDevices'
p22761
((lp22762
S'int32'
p22763
ag34
a((S'taskHandle'
p22764
(lp22765
S'TaskHandle'
p22766
aNtp22767
(S'data'
p22768
(lp22769
S'char'
p22770
ag42
aNtp22771
(S'bufferSize'
p22772
(lp22773
S'uInt32'
p22774
aNtp22775
tp22776
tp22777
sS'DAQmxWriteBinaryI32'
p22778
((lp22779
S'int32'
p22780
ag34
a((S'taskHandle'
p22781
(lp22782
S'TaskHandle'
p22783
aNtp22784
(S'numSampsPerChan'
p22785
(lp22786
S'int32'
p22787
aNtp22788
(S'autoStart'
p22789
(lp22790
S'bool32'
p22791
aNtp22792
(S'timeout'
p22793
(lp22794
S'float64'
p22795
aNtp22796
(S'dataLayout'
p22797
(lp22798
S'bool32'
p22799
aNtp22800
(S'writeArray'
p22801
(lp22802
S'int32'
p22803
a(lp22804
I-1
aaNtp22805
(S'sampsPerChanWritten'
p22806
(lp22807
S'int32'
p22808
ag42
aNtp22809
(S'reserved'
p22810
(lp22811
S'bool32'
p22812
ag42
aNtp22813
tp22814
tp22815
sS'DAQmxResetAnlgEdgeRefTrigSrc'
p22816
((lp22817
S'int32'
p22818
ag34
a((S'taskHandle'
p22819
(lp22820
S'TaskHandle'
p22821
aNtp22822
tp22823
tp22824
sS'DAQmxGetAIExcitUseMultiplexed'
p22825
((lp22826
S'int32'
p22827
ag34
a((S'taskHandle'
p22828
(lp22829
S'TaskHandle'
p22830
aNtp22831
(S'channel'
p22832
(lp22833
S'char'
p22834
a(lp22835
I-1
aaNtp22836
(S'data'
p22837
(lp22838
S'bool32'
p22839
ag42
aNtp22840
tp22841
tp22842
sS'DAQmxSetCIAngEncoderPulsesPerRev'
p22843
((lp22844
S'int32'
p22845
ag34
a((S'taskHandle'
p22846
(lp22847
S'TaskHandle'
p22848
aNtp22849
(S'channel'
p22850
(lp22851
S'char'
p22852
a(lp22853
I-1
aaNtp22854
(S'data'
p22855
(lp22856
S'uInt32'
p22857
aNtp22858
tp22859
tp22860
sS'DAQmxSetAIStrainGageGageFactor'
p22861
((lp22862
S'int32'
p22863
ag34
a((S'taskHandle'
p22864
(lp22865
S'TaskHandle'
p22866
aNtp22867
(S'channel'
p22868
(lp22869
S'char'
p22870
a(lp22871
I-1
aaNtp22872
(S'data'
p22873
(lp22874
S'float64'
p22875
aNtp22876
tp22877
tp22878
sS'DAQmxGetTaskChannels'
p22879
((lp22880
S'int32'
p22881
ag34
a((S'taskHandle'
p22882
(lp22883
S'TaskHandle'
p22884
aNtp22885
(S'data'
p22886
(lp22887
S'char'
p22888
ag42
aNtp22889
(S'bufferSize'
p22890
(lp22891
S'uInt32'
p22892
aNtp22893
tp22894
tp22895
sS'DAQmxCfgOutputBuffer'
p22896
((lp22897
S'int32'
p22898
ag34
a((S'taskHandle'
p22899
(lp22900
S'TaskHandle'
p22901
aNtp22902
(S'numSampsPerChan'
p22903
(lp22904
S'uInt32'
p22905
aNtp22906
tp22907
tp22908
sS'DAQmxResetCILinEncoderInitialPos'
p22909
((lp22910
S'int32'
p22911
ag34
a((S'taskHandle'
p22912
(lp22913
S'TaskHandle'
p22914
aNtp22915
(S'channel'
p22916
(lp22917
S'char'
p22918
a(lp22919
I-1
aaNtp22920
tp22921
tp22922
sS'DAQmxGetAIEnhancedAliasRejectionEnable'
p22923
((lp22924
S'int32'
p22925
ag34
a((S'taskHandle'
p22926
(lp22927
S'TaskHandle'
p22928
aNtp22929
(S'channel'
p22930
(lp22931
S'char'
p22932
a(lp22933
I-1
aaNtp22934
(S'data'
p22935
(lp22936
S'bool32'
p22937
ag42
aNtp22938
tp22939
tp22940
sS'DAQmxSetSampClkRate'
p22941
((lp22942
S'int32'
p22943
ag34
a((S'taskHandle'
p22944
(lp22945
S'TaskHandle'
p22946
aNtp22947
(S'data'
p22948
(lp22949
S'float64'
p22950
aNtp22951
tp22952
tp22953
sS'DAQmxAdjust4225Cal'
p22954
((lp22955
S'int32'
p22956
ag34
a((S'calHandle'
p22957
(lp22958
S'uInt32'
p22959
aNtp22960
(S'channelNames'
p22961
(lp22962
S'char'
p22963
a(lp22964
I-1
aaNtp22965
(S'gain'
p22966
(lp22967
S'float64'
p22968
aNtp22969
(S'inputVal'
p22970
(lp22971
S'float64'
p22972
aNtp22973
tp22974
tp22975
sS'DAQmxResetWriteWaitMode'
p22976
((lp22977
S'int32'
p22978
ag34
a((S'taskHandle'
p22979
(lp22980
S'TaskHandle'
p22981
aNtp22982
tp22983
tp22984
sS'DAQmxGetAIDevScalingCoeff'
p22985
((lp22986
S'int32'
p22987
ag34
a((S'taskHandle'
p22988
(lp22989
S'TaskHandle'
p22990
aNtp22991
(S'channel'
p22992
(lp22993
S'char'
p22994
a(lp22995
I-1
aaNtp22996
(S'data'
p22997
(lp22998
S'float64'
p22999
ag42
aNtp23000
(S'arraySizeInSamples'
p23001
(lp23002
S'uInt32'
p23003
aNtp23004
tp23005
tp23006
sS'DAQmxGetDIDataXferMech'
p23007
((lp23008
S'int32'
p23009
ag34
a((S'taskHandle'
p23010
(lp23011
S'TaskHandle'
p23012
aNtp23013
(S'channel'
p23014
(lp23015
S'char'
p23016
a(lp23017
I-1
aaNtp23018
(S'data'
p23019
(lp23020
S'int32'
p23021
ag42
aNtp23022
tp23023
tp23024
sS'DAQmxGetSwitchChanMaxACVoltage'
p23025
((lp23026
S'int32'
p23027
ag34
a((S'switchChannelName'
p23028
(lp23029
S'char'
p23030
a(lp23031
I-1
aaNtp23032
(S'data'
p23033
(lp23034
S'float64'
p23035
ag42
aNtp23036
tp23037
tp23038
sS'DAQmxGetCICountEdgesDigSyncEnable'
p23039
((lp23040
S'int32'
p23041
ag34
a((S'taskHandle'
p23042
(lp23043
S'TaskHandle'
p23044
aNtp23045
(S'channel'
p23046
(lp23047
S'char'
p23048
a(lp23049
I-1
aaNtp23050
(S'data'
p23051
(lp23052
S'bool32'
p23053
ag42
aNtp23054
tp23055
tp23056
sS'DAQmxSetAOMin'
p23057
((lp23058
S'int32'
p23059
ag34
a((S'taskHandle'
p23060
(lp23061
S'TaskHandle'
p23062
aNtp23063
(S'channel'
p23064
(lp23065
S'char'
p23066
a(lp23067
I-1
aaNtp23068
(S'data'
p23069
(lp23070
S'float64'
p23071
aNtp23072
tp23073
tp23074
sS'DAQmxResetCIPeriodMeasTime'
p23075
((lp23076
S'int32'
p23077
ag34
a((S'taskHandle'
p23078
(lp23079
S'TaskHandle'
p23080
aNtp23081
(S'channel'
p23082
(lp23083
S'char'
p23084
a(lp23085
I-1
aaNtp23086
tp23087
tp23088
sS'DAQmxGetDevAOPhysicalChans'
p23089
((lp23090
S'int32'
p23091
ag34
a((S'device'
p23092
(lp23093
S'char'
p23094
a(lp23095
I-1
aaNtp23096
(S'data'
p23097
(lp23098
S'char'
p23099
ag42
aNtp23100
(S'bufferSize'
p23101
(lp23102
S'uInt32'
p23103
aNtp23104
tp23105
tp23106
sS'DAQmxResetAICustomScaleName'
p23107
((lp23108
S'int32'
p23109
ag34
a((S'taskHandle'
p23110
(lp23111
S'TaskHandle'
p23112
aNtp23113
(S'channel'
p23114
(lp23115
S'char'
p23116
a(lp23117
I-1
aaNtp23118
tp23119
tp23120
sS'DAQmxGetCalDevTemp'
p23121
((lp23122
S'int32'
p23123
ag34
a((S'deviceName'
p23124
(lp23125
S'char'
p23126
a(lp23127
I-1
aaNtp23128
(S'data'
p23129
(lp23130
S'float64'
p23131
ag42
aNtp23132
tp23133
tp23134
sS'DAQmxAdjust4220Cal'
p23135
((lp23136
S'int32'
p23137
ag34
a((S'calHandle'
p23138
(lp23139
S'uInt32'
p23140
aNtp23141
(S'channelNames'
p23142
(lp23143
S'char'
p23144
a(lp23145
I-1
aaNtp23146
(S'gain'
p23147
(lp23148
S'float64'
p23149
aNtp23150
(S'inputVal'
p23151
(lp23152
S'float64'
p23153
aNtp23154
tp23155
tp23156
sS'DAQmxResetAIACExcitWireMode'
p23157
((lp23158
S'int32'
p23159
ag34
a((S'taskHandle'
p23160
(lp23161
S'TaskHandle'
p23162
aNtp23163
(S'channel'
p23164
(lp23165
S'char'
p23166
a(lp23167
I-1
aaNtp23168
tp23169
tp23170
sS'DAQmxGetCIPulseWidthDigFltrMinPulseWidth'
p23171
((lp23172
S'int32'
p23173
ag34
a((S'taskHandle'
p23174
(lp23175
S'TaskHandle'
p23176
aNtp23177
(S'channel'
p23178
(lp23179
S'char'
p23180
a(lp23181
I-1
aaNtp23182
(S'data'
p23183
(lp23184
S'float64'
p23185
ag42
aNtp23186
tp23187
tp23188
sS'DAQmxSetInterlockedHshkTrigAssertedLvl'
p23189
((lp23190
S'int32'
p23191
ag34
a((S'taskHandle'
p23192
(lp23193
S'TaskHandle'
p23194
aNtp23195
(S'data'
p23196
(lp23197
S'int32'
p23198
aNtp23199
tp23200
tp23201
sS'DAQmxSetSampTimingType'
p23202
((lp23203
S'int32'
p23204
ag34
a((S'taskHandle'
p23205
(lp23206
S'TaskHandle'
p23207
aNtp23208
(S'data'
p23209
(lp23210
S'int32'
p23211
aNtp23212
tp23213
tp23214
sS'DAQmxResetSampClkTimebaseMasterTimebaseDiv'
p23215
((lp23216
S'int32'
p23217
ag34
a((S'taskHandle'
p23218
(lp23219
S'TaskHandle'
p23220
aNtp23221
tp23222
tp23223
sS'DAQmxResetOnDemandSimultaneousAOEnable'
p23224
((lp23225
S'int32'
p23226
ag34
a((S'taskHandle'
p23227
(lp23228
S'TaskHandle'
p23229
aNtp23230
tp23231
tp23232
sS'DAQmxGetAnlgEdgeStartTrigHyst'
p23233
((lp23234
S'int32'
p23235
ag34
a((S'taskHandle'
p23236
(lp23237
S'TaskHandle'
p23238
aNtp23239
(S'data'
p23240
(lp23241
S'float64'
p23242
ag42
aNtp23243
tp23244
tp23245
sS'DAQmxReadDigitalU16'
p23246
((lp23247
S'int32'
p23248
ag34
a((S'taskHandle'
p23249
(lp23250
S'TaskHandle'
p23251
aNtp23252
(S'numSampsPerChan'
p23253
(lp23254
S'int32'
p23255
aNtp23256
(S'timeout'
p23257
(lp23258
S'float64'
p23259
aNtp23260
(S'fillMode'
p23261
(lp23262
S'bool32'
p23263
aNtp23264
(S'readArray'
p23265
(lp23266
S'uInt16'
p23267
a(lp23268
I-1
aaNtp23269
(S'arraySizeInSamps'
p23270
(lp23271
S'uInt32'
p23272
aNtp23273
(S'sampsPerChanRead'
p23274
(lp23275
S'int32'
p23276
ag42
aNtp23277
(S'reserved'
p23278
(lp23279
S'bool32'
p23280
ag42
aNtp23281
tp23282
tp23283
sS'DAQmxSwitchConnect'
p23284
((lp23285
S'int32'
p23286
ag34
a((S'switchChannel1'
p23287
(lp23288
S'char'
p23289
a(lp23290
I-1
aaNtp23291
(S'switchChannel2'
p23292
(lp23293
S'char'
p23294
a(lp23295
I-1
aaNtp23296
(S'waitForSettling'
p23297
(lp23298
S'bool32'
p23299
aNtp23300
tp23301
tp23302
sS'DAQmxGetDigPatternStartTrigPattern'
p23303
((lp23304
S'int32'
p23305
ag34
a((S'taskHandle'
p23306
(lp23307
S'TaskHandle'
p23308
aNtp23309
(S'data'
p23310
(lp23311
S'char'
p23312
ag42
aNtp23313
(S'bufferSize'
p23314
(lp23315
S'uInt32'
p23316
aNtp23317
tp23318
tp23319
sS'DAQmxResetDigPatternRefTrigWhen'
p23320
((lp23321
S'int32'
p23322
ag34
a((S'taskHandle'
p23323
(lp23324
S'TaskHandle'
p23325
aNtp23326
tp23327
tp23328
sS'DAQmxGetCILinEncoderUnits'
p23329
((lp23330
S'int32'
p23331
ag34
a((S'taskHandle'
p23332
(lp23333
S'TaskHandle'
p23334
aNtp23335
(S'channel'
p23336
(lp23337
S'char'
p23338
a(lp23339
I-1
aaNtp23340
(S'data'
p23341
(lp23342
S'int32'
p23343
ag42
aNtp23344
tp23345
tp23346
sS'DAQmxGetAIBridgeNomResistance'
p23347
((lp23348
S'int32'
p23349
ag34
a((S'taskHandle'
p23350
(lp23351
S'TaskHandle'
p23352
aNtp23353
(S'channel'
p23354
(lp23355
S'char'
p23356
a(lp23357
I-1
aaNtp23358
(S'data'
p23359
(lp23360
S'float64'
p23361
ag42
aNtp23362
tp23363
tp23364
sS'DAQmxStartTask'
p23365
((lp23366
S'int32'
p23367
ag34
a((S'taskHandle'
p23368
(lp23369
S'TaskHandle'
p23370
aNtp23371
tp23372
tp23373
sS'DAQmxGetAnlgEdgeStartTrigSlope'
p23374
((lp23375
S'int32'
p23376
ag34
a((S'taskHandle'
p23377
(lp23378
S'TaskHandle'
p23379
aNtp23380
(S'data'
p23381
(lp23382
S'int32'
p23383
ag42
aNtp23384
tp23385
tp23386
sS'DAQmxGetReadOverloadedChansExist'
p23387
((lp23388
S'int32'
p23389
ag34
a((S'taskHandle'
p23390
(lp23391
S'TaskHandle'
p23392
aNtp23393
(S'data'
p23394
(lp23395
S'bool32'
p23396
ag42
aNtp23397
tp23398
tp23399
sS'DAQmxGetCIAngEncoderPulsesPerRev'
p23400
((lp23401
S'int32'
p23402
ag34
a((S'taskHandle'
p23403
(lp23404
S'TaskHandle'
p23405
aNtp23406
(S'channel'
p23407
(lp23408
S'char'
p23409
a(lp23410
I-1
aaNtp23411
(S'data'
p23412
(lp23413
S'uInt32'
p23414
ag42
aNtp23415
tp23416
tp23417
sS'DAQmxResetReadOffset'
p23418
((lp23419
S'int32'
p23420
ag34
a((S'taskHandle'
p23421
(lp23422
S'TaskHandle'
p23423
aNtp23424
tp23425
tp23426
sS'DAQmxGetRealTimeReportMissedSamp'
p23427
((lp23428
S'int32'
p23429
ag34
a((S'taskHandle'
p23430
(lp23431
S'TaskHandle'
p23432
aNtp23433
(S'data'
p23434
(lp23435
S'bool32'
p23436
ag42
aNtp23437
tp23438
tp23439
sS'DAQmxGetAIAtten'
p23440
((lp23441
S'int32'
p23442
ag34
a((S'taskHandle'
p23443
(lp23444
S'TaskHandle'
p23445
aNtp23446
(S'channel'
p23447
(lp23448
S'char'
p23449
a(lp23450
I-1
aaNtp23451
(S'data'
p23452
(lp23453
S'float64'
p23454
ag42
aNtp23455
tp23456
tp23457
sS'DAQmxGetAIChanCalDesc'
p23458
((lp23459
S'int32'
p23460
ag34
a((S'taskHandle'
p23461
(lp23462
S'TaskHandle'
p23463
aNtp23464
(S'channel'
p23465
(lp23466
S'char'
p23467
a(lp23468
I-1
aaNtp23469
(S'data'
p23470
(lp23471
S'char'
p23472
ag42
aNtp23473
(S'bufferSize'
p23474
(lp23475
S'uInt32'
p23476
aNtp23477
tp23478
tp23479
sS'DAQmxSwitchDisconnectMulti'
p23480
((lp23481
S'int32'
p23482
ag34
a((S'connectionList'
p23483
(lp23484
S'char'
p23485
a(lp23486
I-1
aaNtp23487
(S'waitForSettling'
p23488
(lp23489
S'bool32'
p23490
aNtp23491
tp23492
tp23493
sS'DAQmxSetStartTrigDelay'
p23494
((lp23495
S'int32'
p23496
ag34
a((S'taskHandle'
p23497
(lp23498
S'TaskHandle'
p23499
aNtp23500
(S'data'
p23501
(lp23502
S'float64'
p23503
aNtp23504
tp23505
tp23506
sS'DAQmxResetBufOutputBufSize'
p23507
((lp23508
S'int32'
p23509
ag34
a((S'taskHandle'
p23510
(lp23511
S'TaskHandle'
p23512
aNtp23513
tp23514
tp23515
sS'DAQmxSetCOCtrTimebaseDigFltrTimebaseSrc'
p23516
((lp23517
S'int32'
p23518
ag34
a((S'taskHandle'
p23519
(lp23520
S'TaskHandle'
p23521
aNtp23522
(S'channel'
p23523
(lp23524
S'char'
p23525
a(lp23526
I-1
aaNtp23527
(S'data'
p23528
(lp23529
S'char'
p23530
ag42
aNtp23531
tp23532
tp23533
sS'DAQmxCfgAnlgEdgeRefTrig'
p23534
((lp23535
S'int32'
p23536
ag34
a((S'taskHandle'
p23537
(lp23538
S'TaskHandle'
p23539
aNtp23540
(S'triggerSource'
p23541
(lp23542
S'char'
p23543
a(lp23544
I-1
aaNtp23545
(S'triggerSlope'
p23546
(lp23547
S'int32'
p23548
aNtp23549
(S'triggerLevel'
p23550
(lp23551
S'float64'
p23552
aNtp23553
(S'pretriggerSamples'
p23554
(lp23555
S'uInt32'
p23556
aNtp23557
tp23558
tp23559
sS'DAQmxResetAIChanCalPolyReverseCoeff'
p23560
((lp23561
S'int32'
p23562
ag34
a((S'taskHandle'
p23563
(lp23564
S'TaskHandle'
p23565
aNtp23566
(S'channel'
p23567
(lp23568
S'char'
p23569
a(lp23570
I-1
aaNtp23571
tp23572
tp23573
sS'DAQmxGetExportedCtrOutEventOutputBehavior'
p23574
((lp23575
S'int32'
p23576
ag34
a((S'taskHandle'
p23577
(lp23578
S'TaskHandle'
p23579
aNtp23580
(S'data'
p23581
(lp23582
S'int32'
p23583
ag42
aNtp23584
tp23585
tp23586
sS'DAQmxWriteCtrFreqScalar'
p23587
((lp23588
S'int32'
p23589
ag34
a((S'taskHandle'
p23590
(lp23591
S'TaskHandle'
p23592
aNtp23593
(S'autoStart'
p23594
(lp23595
S'bool32'
p23596
aNtp23597
(S'timeout'
p23598
(lp23599
S'float64'
p23600
aNtp23601
(S'frequency'
p23602
(lp23603
S'float64'
p23604
aNtp23605
(S'dutyCycle'
p23606
(lp23607
S'float64'
p23608
aNtp23609
(S'reserved'
p23610
(lp23611
S'bool32'
p23612
ag42
aNtp23613
tp23614
tp23615
sS'DAQmxWriteToTEDSFromArray'
p23616
((lp23617
S'int32'
p23618
ag34
a((S'physicalChannel'
p23619
(lp23620
S'char'
p23621
a(lp23622
I-1
aaNtp23623
(S'bitStream'
p23624
(lp23625
S'uInt8'
p23626
a(lp23627
I-1
aaNtp23628
(S'arraySize'
p23629
(lp23630
S'uInt32'
p23631
aNtp23632
(S'basicTEDSOptions'
p23633
(lp23634
S'int32'
p23635
aNtp23636
tp23637
tp23638
sS'DAQmxSetAOGain'
p23639
((lp23640
S'int32'
p23641
ag34
a((S'taskHandle'
p23642
(lp23643
S'TaskHandle'
p23644
aNtp23645
(S'channel'
p23646
(lp23647
S'char'
p23648
a(lp23649
I-1
aaNtp23650
(S'data'
p23651
(lp23652
S'float64'
p23653
aNtp23654
tp23655
tp23656
sS'DAQmxSetAIRVDTUnits'
p23657
((lp23658
S'int32'
p23659
ag34
a((S'taskHandle'
p23660
(lp23661
S'TaskHandle'
p23662
aNtp23663
(S'channel'
p23664
(lp23665
S'char'
p23666
a(lp23667
I-1
aaNtp23668
(S'data'
p23669
(lp23670
S'int32'
p23671
aNtp23672
tp23673
tp23674
sS'DAQmxResetAODACOffsetExtSrc'
p23675
((lp23676
S'int32'
p23677
ag34
a((S'taskHandle'
p23678
(lp23679
S'TaskHandle'
p23680
aNtp23681
(S'channel'
p23682
(lp23683
S'char'
p23684
a(lp23685
I-1
aaNtp23686
tp23687
tp23688
sS'DAQmxSetAOIdleOutputBehavior'
p23689
((lp23690
S'int32'
p23691
ag34
a((S'taskHandle'
p23692
(lp23693
S'TaskHandle'
p23694
aNtp23695
(S'channel'
p23696
(lp23697
S'char'
p23698
a(lp23699
I-1
aaNtp23700
(S'data'
p23701
(lp23702
S'int32'
p23703
aNtp23704
tp23705
tp23706
sS'DAQmxSetAIAccelSensitivity'
p23707
((lp23708
S'int32'
p23709
ag34
a((S'taskHandle'
p23710
(lp23711
S'TaskHandle'
p23712
aNtp23713
(S'channel'
p23714
(lp23715
S'char'
p23716
a(lp23717
I-1
aaNtp23718
(S'data'
p23719
(lp23720
S'float64'
p23721
aNtp23722
tp23723
tp23724
sS'DAQmxSetCOPrescaler'
p23725
((lp23726
S'int32'
p23727
ag34
a((S'taskHandle'
p23728
(lp23729
S'TaskHandle'
p23730
aNtp23731
(S'channel'
p23732
(lp23733
S'char'
p23734
a(lp23735
I-1
aaNtp23736
(S'data'
p23737
(lp23738
S'uInt32'
p23739
aNtp23740
tp23741
tp23742
sS'DAQmxCreateAOVoltageChan'
p23743
((lp23744
S'int32'
p23745
ag34
a((S'taskHandle'
p23746
(lp23747
S'TaskHandle'
p23748
aNtp23749
(S'physicalChannel'
p23750
(lp23751
S'char'
p23752
a(lp23753
I-1
aaNtp23754
(S'nameToAssignToChannel'
p23755
(lp23756
S'char'
p23757
a(lp23758
I-1
aaNtp23759
(S'minVal'
p23760
(lp23761
S'float64'
p23762
aNtp23763
(S'maxVal'
p23764
(lp23765
S'float64'
p23766
aNtp23767
(S'units'
p23768
(lp23769
S'int32'
p23770
aNtp23771
(S'customScaleName'
p23772
(lp23773
S'char'
p23774
a(lp23775
I-1
aaNtp23776
tp23777
tp23778
sS'DAQmxSetDigEdgeStartTrigDigFltrEnable'
p23779
((lp23780
S'int32'
p23781
ag34
a((S'taskHandle'
p23782
(lp23783
S'TaskHandle'
p23784
aNtp23785
(S'data'
p23786
(lp23787
S'bool32'
p23788
aNtp23789
tp23790
tp23791
sS'DAQmxGetAIChanCalPolyReverseCoeff'
p23792
((lp23793
S'int32'
p23794
ag34
a((S'taskHandle'
p23795
(lp23796
S'TaskHandle'
p23797
aNtp23798
(S'channel'
p23799
(lp23800
S'char'
p23801
a(lp23802
I-1
aaNtp23803
(S'data'
p23804
(lp23805
S'float64'
p23806
ag42
aNtp23807
(S'arraySizeInSamples'
p23808
(lp23809
S'uInt32'
p23810
aNtp23811
tp23812
tp23813
sS'DAQmxGetExportedHshkEventInterlockedAssertedLvl'
p23814
((lp23815
S'int32'
p23816
ag34
a((S'taskHandle'
p23817
(lp23818
S'TaskHandle'
p23819
aNtp23820
(S'data'
p23821
(lp23822
S'int32'
p23823
ag42
aNtp23824
tp23825
tp23826
sS'DAQmxGetAIMicrophoneSensitivity'
p23827
((lp23828
S'int32'
p23829
ag34
a((S'taskHandle'
p23830
(lp23831
S'TaskHandle'
p23832
aNtp23833
(S'channel'
p23834
(lp23835
S'char'
p23836
a(lp23837
I-1
aaNtp23838
(S'data'
p23839
(lp23840
S'float64'
p23841
ag42
aNtp23842
tp23843
tp23844
sS'DAQmxSetExportedAdvCmpltEventOutputTerm'
p23845
((lp23846
S'int32'
p23847
ag34
a((S'taskHandle'
p23848
(lp23849
S'TaskHandle'
p23850
aNtp23851
(S'data'
p23852
(lp23853
S'char'
p23854
ag42
aNtp23855
tp23856
tp23857
sS'DAQmxGetSampClkRate'
p23858
((lp23859
S'int32'
p23860
ag34
a((S'taskHandle'
p23861
(lp23862
S'TaskHandle'
p23863
aNtp23864
(S'data'
p23865
(lp23866
S'float64'
p23867
ag42
aNtp23868
tp23869
tp23870
sS'DAQmxGetCalUserDefinedInfo'
p23871
((lp23872
S'int32'
p23873
ag34
a((S'deviceName'
p23874
(lp23875
S'char'
p23876
a(lp23877
I-1
aaNtp23878
(S'data'
p23879
(lp23880
S'char'
p23881
ag42
aNtp23882
(S'bufferSize'
p23883
(lp23884
S'uInt32'
p23885
aNtp23886
tp23887
tp23888
sS'DAQmxSetAIRTDA'
p23889
((lp23890
S'int32'
p23891
ag34
a((S'taskHandle'
p23892
(lp23893
S'TaskHandle'
p23894
aNtp23895
(S'channel'
p23896
(lp23897
S'char'
p23898
a(lp23899
I-1
aaNtp23900
(S'data'
p23901
(lp23902
S'float64'
p23903
aNtp23904
tp23905
tp23906
sS'DAQmxSetAIRTDC'
p23907
((lp23908
S'int32'
p23909
ag34
a((S'taskHandle'
p23910
(lp23911
S'TaskHandle'
p23912
aNtp23913
(S'channel'
p23914
(lp23915
S'char'
p23916
a(lp23917
I-1
aaNtp23918
(S'data'
p23919
(lp23920
S'float64'
p23921
aNtp23922
tp23923
tp23924
sS'DAQmxSetAIRTDB'
p23925
((lp23926
S'int32'
p23927
ag34
a((S'taskHandle'
p23928
(lp23929
S'TaskHandle'
p23930
aNtp23931
(S'channel'
p23932
(lp23933
S'char'
p23934
a(lp23935
I-1
aaNtp23936
(S'data'
p23937
(lp23938
S'float64'
p23939
aNtp23940
tp23941
tp23942
sS'DAQmxGetDevDOLines'
p23943
((lp23944
S'int32'
p23945
ag34
a((S'device'
p23946
(lp23947
S'char'
p23948
a(lp23949
I-1
aaNtp23950
(S'data'
p23951
(lp23952
S'char'
p23953
ag42
aNtp23954
(S'bufferSize'
p23955
(lp23956
S'uInt32'
p23957
aNtp23958
tp23959
tp23960
sS'DAQmxSetCIGPSSyncMethod'
p23961
((lp23962
S'int32'
p23963
ag34
a((S'taskHandle'
p23964
(lp23965
S'TaskHandle'
p23966
aNtp23967
(S'channel'
p23968
(lp23969
S'char'
p23970
a(lp23971
I-1
aaNtp23972
(S'data'
p23973
(lp23974
S'int32'
p23975
aNtp23976
tp23977
tp23978
sS'DAQmxSetRealTimeWriteRecoveryMode'
p23979
((lp23980
S'int32'
p23981
ag34
a((S'taskHandle'
p23982
(lp23983
S'TaskHandle'
p23984
aNtp23985
(S'data'
p23986
(lp23987
S'int32'
p23988
aNtp23989
tp23990
tp23991
sS'DAQmxSetCOCtrTimebaseRate'
p23992
((lp23993
S'int32'
p23994
ag34
a((S'taskHandle'
p23995
(lp23996
S'TaskHandle'
p23997
aNtp23998
(S'channel'
p23999
(lp24000
S'char'
p24001
a(lp24002
I-1
aaNtp24003
(S'data'
p24004
(lp24005
S'float64'
p24006
aNtp24007
tp24008
tp24009
sS'DAQmxGetAIRTDType'
p24010
((lp24011
S'int32'
p24012
ag34
a((S'taskHandle'
p24013
(lp24014
S'TaskHandle'
p24015
aNtp24016
(S'channel'
p24017
(lp24018
S'char'
p24019
a(lp24020
I-1
aaNtp24021
(S'data'
p24022
(lp24023
S'int32'
p24024
ag42
aNtp24025
tp24026
tp24027
sS'DAQmxSetDIInvertLines'
p24028
((lp24029
S'int32'
p24030
ag34
a((S'taskHandle'
p24031
(lp24032
S'TaskHandle'
p24033
aNtp24034
(S'channel'
p24035
(lp24036
S'char'
p24037
a(lp24038
I-1
aaNtp24039
(S'data'
p24040
(lp24041
S'bool32'
p24042
aNtp24043
tp24044
tp24045
sS'DAQmxResetSampClkSrc'
p24046
((lp24047
S'int32'
p24048
ag34
a((S'taskHandle'
p24049
(lp24050
S'TaskHandle'
p24051
aNtp24052
tp24053
tp24054
sS'DAQmxResetCITwoEdgeSepSecondEdge'
p24055
((lp24056
S'int32'
p24057
ag34
a((S'taskHandle'
p24058
(lp24059
S'TaskHandle'
p24060
aNtp24061
(S'channel'
p24062
(lp24063
S'char'
p24064
a(lp24065
I-1
aaNtp24066
tp24067
tp24068
sS'DAQmxResetDIInvertLines'
p24069
((lp24070
S'int32'
p24071
ag34
a((S'taskHandle'
p24072
(lp24073
S'TaskHandle'
p24074
aNtp24075
(S'channel'
p24076
(lp24077
S'char'
p24078
a(lp24079
I-1
aaNtp24080
tp24081
tp24082
sS'DAQmxSwitchGetMultiRelayCount'
p24083
((lp24084
S'int32'
p24085
ag34
a((S'relayList'
p24086
(lp24087
S'char'
p24088
a(lp24089
I-1
aaNtp24090
(S'count'
p24091
(lp24092
S'uInt32'
p24093
a(lp24094
I-1
aaNtp24095
(S'countArraySize'
p24096
(lp24097
S'uInt32'
p24098
aNtp24099
(S'numRelayCountsRead'
p24100
(lp24101
S'uInt32'
p24102
ag42
aNtp24103
tp24104
tp24105
sS'DAQmxSetCICountEdgesTerm'
p24106
((lp24107
S'int32'
p24108
ag34
a((S'taskHandle'
p24109
(lp24110
S'TaskHandle'
p24111
aNtp24112
(S'channel'
p24113
(lp24114
S'char'
p24115
a(lp24116
I-1
aaNtp24117
(S'data'
p24118
(lp24119
S'char'
p24120
ag42
aNtp24121
tp24122
tp24123
sS'DAQmxSetAnlgWinStartTrigWhen'
p24124
((lp24125
S'int32'
p24126
ag34
a((S'taskHandle'
p24127
(lp24128
S'TaskHandle'
p24129
aNtp24130
(S'data'
p24131
(lp24132
S'int32'
p24133
aNtp24134
tp24135
tp24136
sS'DAQmxResetSampClkActiveEdge'
p24137
((lp24138
S'int32'
p24139
ag34
a((S'taskHandle'
p24140
(lp24141
S'TaskHandle'
p24142
aNtp24143
tp24144
tp24145
sS'DAQmxSwitchDisconnect'
p24146
((lp24147
S'int32'
p24148
ag34
a((S'switchChannel1'
p24149
(lp24150
S'char'
p24151
a(lp24152
I-1
aaNtp24153
(S'switchChannel2'
p24154
(lp24155
S'char'
p24156
a(lp24157
I-1
aaNtp24158
(S'waitForSettling'
p24159
(lp24160
S'bool32'
p24161
aNtp24162
tp24163
tp24164
sS'DAQmxSetCIPeriodDigFltrTimebaseRate'
p24165
((lp24166
S'int32'
p24167
ag34
a((S'taskHandle'
p24168
(lp24169
S'TaskHandle'
p24170
aNtp24171
(S'channel'
p24172
(lp24173
S'char'
p24174
a(lp24175
I-1
aaNtp24176
(S'data'
p24177
(lp24178
S'float64'
p24179
aNtp24180
tp24181
tp24182
sS'DAQmxResetAnlgWinRefTrigBtm'
p24183
((lp24184
S'int32'
p24185
ag34
a((S'taskHandle'
p24186
(lp24187
S'TaskHandle'
p24188
aNtp24189
tp24190
tp24191
sS'DAQmxResetMasterTimebaseSrc'
p24192
((lp24193
S'int32'
p24194
ag34
a((S'taskHandle'
p24195
(lp24196
S'TaskHandle'
p24197
aNtp24198
tp24199
tp24200
sS'DAQmxSetDigEdgeRefTrigEdge'
p24201
((lp24202
S'int32'
p24203
ag34
a((S'taskHandle'
p24204
(lp24205
S'TaskHandle'
p24206
aNtp24207
(S'data'
p24208
(lp24209
S'int32'
p24210
aNtp24211
tp24212
tp24213
sS'DAQmxResetWriteAttribute'
p24214
((lp24215
S'int32'
p24216
ag34
a((S'taskHandle'
p24217
(lp24218
S'TaskHandle'
p24219
aNtp24220
(S'attribute'
p24221
(lp24222
S'int32'
p24223
aNtp24224
tp24225
tp24226
sS'DAQmxGetCIEncoderZIndexVal'
p24227
((lp24228
S'int32'
p24229
ag34
a((S'taskHandle'
p24230
(lp24231
S'TaskHandle'
p24232
aNtp24233
(S'channel'
p24234
(lp24235
S'char'
p24236
a(lp24237
I-1
aaNtp24238
(S'data'
p24239
(lp24240
S'float64'
p24241
ag42
aNtp24242
tp24243
tp24244
sS'DAQmxSetAIBridgeBalanceFinePot'
p24245
((lp24246
S'int32'
p24247
ag34
a((S'taskHandle'
p24248
(lp24249
S'TaskHandle'
p24250
aNtp24251
(S'channel'
p24252
(lp24253
S'char'
p24254
a(lp24255
I-1
aaNtp24256
(S'data'
p24257
(lp24258
S'int32'
p24259
aNtp24260
tp24261
tp24262
sS'DAQmxSetRefClkRate'
p24263
((lp24264
S'int32'
p24265
ag34
a((S'taskHandle'
p24266
(lp24267
S'TaskHandle'
p24268
aNtp24269
(S'data'
p24270
(lp24271
S'float64'
p24272
aNtp24273
tp24274
tp24275
sS'DAQmxSetAILVDTSensitivityUnits'
p24276
((lp24277
S'int32'
p24278
ag34
a((S'taskHandle'
p24279
(lp24280
S'TaskHandle'
p24281
aNtp24282
(S'channel'
p24283
(lp24284
S'char'
p24285
a(lp24286
I-1
aaNtp24287
(S'data'
p24288
(lp24289
S'int32'
p24290
aNtp24291
tp24292
tp24293
sS'DAQmxCreateAIThrmstrChanIex'
p24294
((lp24295
S'int32'
p24296
ag34
a((S'taskHandle'
p24297
(lp24298
S'TaskHandle'
p24299
aNtp24300
(S'physicalChannel'
p24301
(lp24302
S'char'
p24303
a(lp24304
I-1
aaNtp24305
(S'nameToAssignToChannel'
p24306
(lp24307
S'char'
p24308
a(lp24309
I-1
aaNtp24310
(S'minVal'
p24311
(lp24312
S'float64'
p24313
aNtp24314
(S'maxVal'
p24315
(lp24316
S'float64'
p24317
aNtp24318
(S'units'
p24319
(lp24320
S'int32'
p24321
aNtp24322
(S'resistanceConfig'
p24323
(lp24324
S'int32'
p24325
aNtp24326
(S'currentExcitSource'
p24327
(lp24328
S'int32'
p24329
aNtp24330
(S'currentExcitVal'
p24331
(lp24332
S'float64'
p24333
aNtp24334
(g18407
(lp24335
S'float64'
p24336
aNtp24337
(g18411
(lp24338
S'float64'
p24339
aNtp24340
(g18415
(lp24341
S'float64'
p24342
aNtp24343
tp24344
tp24345
sS'DAQmxSetCOPulseFreq'
p24346
((lp24347
S'int32'
p24348
ag34
a((S'taskHandle'
p24349
(lp24350
S'TaskHandle'
p24351
aNtp24352
(S'channel'
p24353
(lp24354
S'char'
p24355
a(lp24356
I-1
aaNtp24357
(S'data'
p24358
(lp24359
S'float64'
p24360
aNtp24361
tp24362
tp24363
sS'DAQmxSetCITwoEdgeSepFirstTerm'
p24364
((lp24365
S'int32'
p24366
ag34
a((S'taskHandle'
p24367
(lp24368
S'TaskHandle'
p24369
aNtp24370
(S'channel'
p24371
(lp24372
S'char'
p24373
a(lp24374
I-1
aaNtp24375
(S'data'
p24376
(lp24377
S'char'
p24378
ag42
aNtp24379
tp24380
tp24381
sS'DAQmxResetCICountEdgesTerm'
p24382
((lp24383
S'int32'
p24384
ag34
a((S'taskHandle'
p24385
(lp24386
S'TaskHandle'
p24387
aNtp24388
(S'channel'
p24389
(lp24390
S'char'
p24391
a(lp24392
I-1
aaNtp24393
tp24394
tp24395
sS'DAQmxSetCIPrescaler'
p24396
((lp24397
S'int32'
p24398
ag34
a((S'taskHandle'
p24399
(lp24400
S'TaskHandle'
p24401
aNtp24402
(S'channel'
p24403
(lp24404
S'char'
p24405
a(lp24406
I-1
aaNtp24407
(S'data'
p24408
(lp24409
S'uInt32'
p24410
aNtp24411
tp24412
tp24413
sS'DAQmxGetCICtrTimebaseRate'
p24414
((lp24415
S'int32'
p24416
ag34
a((S'taskHandle'
p24417
(lp24418
S'TaskHandle'
p24419
aNtp24420
(S'channel'
p24421
(lp24422
S'char'
p24423
a(lp24424
I-1
aaNtp24425
(S'data'
p24426
(lp24427
S'float64'
p24428
ag42
aNtp24429
tp24430
tp24431
sS'DAQmxResetAIFreqThreshVoltage'
p24432
((lp24433
S'int32'
p24434
ag34
a((S'taskHandle'
p24435
(lp24436
S'TaskHandle'
p24437
aNtp24438
(S'channel'
p24439
(lp24440
S'char'
p24441
a(lp24442
I-1
aaNtp24443
tp24444
tp24445
sS'DAQmxSetCOCtrTimebaseDigSyncEnable'
p24446
((lp24447
S'int32'
p24448
ag34
a((S'taskHandle'
p24449
(lp24450
S'TaskHandle'
p24451
aNtp24452
(S'channel'
p24453
(lp24454
S'char'
p24455
a(lp24456
I-1
aaNtp24457
(S'data'
p24458
(lp24459
S'bool32'
p24460
aNtp24461
tp24462
tp24463
sS'DAQmxResetAOCustomScaleName'
p24464
((lp24465
S'int32'
p24466
ag34
a((S'taskHandle'
p24467
(lp24468
S'TaskHandle'
p24469
aNtp24470
(S'channel'
p24471
(lp24472
S'char'
p24473
a(lp24474
I-1
aaNtp24475
tp24476
tp24477
sS'DAQmxCalculateReversePolyCoeff'
p24478
((lp24479
S'int32'
p24480
ag34
a((S'forwardCoeffs'
p24481
(lp24482
S'float64'
p24483
a(lp24484
I-1
aaNtp24485
(S'numForwardCoeffsIn'
p24486
(lp24487
S'uInt32'
p24488
aNtp24489
(S'minValX'
p24490
(lp24491
S'float64'
p24492
aNtp24493
(S'maxValX'
p24494
(lp24495
S'float64'
p24496
aNtp24497
(S'numPointsToCompute'
p24498
(lp24499
S'int32'
p24500
aNtp24501
(S'reversePolyOrder'
p24502
(lp24503
S'int32'
p24504
aNtp24505
(S'reverseCoeffs'
p24506
(lp24507
S'float64'
p24508
a(lp24509
I-1
aaNtp24510
tp24511
tp24512
sS'DAQmxResetCISemiPeriodDigFltrTimebaseSrc'
p24513
((lp24514
S'int32'
p24515
ag34
a((S'taskHandle'
p24516
(lp24517
S'TaskHandle'
p24518
aNtp24519
(S'channel'
p24520
(lp24521
S'char'
p24522
a(lp24523
I-1
aaNtp24524
tp24525
tp24526
sS'DAQmxGetAIRTDA'
p24527
((lp24528
S'int32'
p24529
ag34
a((S'taskHandle'
p24530
(lp24531
S'TaskHandle'
p24532
aNtp24533
(S'channel'
p24534
(lp24535
S'char'
p24536
a(lp24537
I-1
aaNtp24538
(S'data'
p24539
(lp24540
S'float64'
p24541
ag42
aNtp24542
tp24543
tp24544
sS'DAQmxGetAIRTDC'
p24545
((lp24546
S'int32'
p24547
ag34
a((S'taskHandle'
p24548
(lp24549
S'TaskHandle'
p24550
aNtp24551
(S'channel'
p24552
(lp24553
S'char'
p24554
a(lp24555
I-1
aaNtp24556
(S'data'
p24557
(lp24558
S'float64'
p24559
ag42
aNtp24560
tp24561
tp24562
sS'DAQmxGetAIRTDB'
p24563
((lp24564
S'int32'
p24565
ag34
a((S'taskHandle'
p24566
(lp24567
S'TaskHandle'
p24568
aNtp24569
(S'channel'
p24570
(lp24571
S'char'
p24572
a(lp24573
I-1
aaNtp24574
(S'data'
p24575
(lp24576
S'float64'
p24577
ag42
aNtp24578
tp24579
tp24580
sS'DAQmxGetAOMin'
p24581
((lp24582
S'int32'
p24583
ag34
a((S'taskHandle'
p24584
(lp24585
S'TaskHandle'
p24586
aNtp24587
(S'channel'
p24588
(lp24589
S'char'
p24590
a(lp24591
I-1
aaNtp24592
(S'data'
p24593
(lp24594
S'float64'
p24595
ag42
aNtp24596
tp24597
tp24598
sS'DAQmxGetCOPulseDutyCyc'
p24599
((lp24600
S'int32'
p24601
ag34
a((S'taskHandle'
p24602
(lp24603
S'TaskHandle'
p24604
aNtp24605
(S'channel'
p24606
(lp24607
S'char'
p24608
a(lp24609
I-1
aaNtp24610
(S'data'
p24611
(lp24612
S'float64'
p24613
ag42
aNtp24614
tp24615
tp24616
sS'DAQmxGetAICurrentUnits'
p24617
((lp24618
S'int32'
p24619
ag34
a((S'taskHandle'
p24620
(lp24621
S'TaskHandle'
p24622
aNtp24623
(S'channel'
p24624
(lp24625
S'char'
p24626
a(lp24627
I-1
aaNtp24628
(S'data'
p24629
(lp24630
S'int32'
p24631
ag42
aNtp24632
tp24633
tp24634
sS'DAQmxGetAIChanCalTableScaledVals'
p24635
((lp24636
S'int32'
p24637
ag34
a((S'taskHandle'
p24638
(lp24639
S'TaskHandle'
p24640
aNtp24641
(S'channel'
p24642
(lp24643
S'char'
p24644
a(lp24645
I-1
aaNtp24646
(S'data'
p24647
(lp24648
S'float64'
p24649
ag42
aNtp24650
(S'arraySizeInSamples'
p24651
(lp24652
S'uInt32'
p24653
aNtp24654
tp24655
tp24656
sS'DAQmxGetAIImpedance'
p24657
((lp24658
S'int32'
p24659
ag34
a((S'taskHandle'
p24660
(lp24661
S'TaskHandle'
p24662
aNtp24663
(S'channel'
p24664
(lp24665
S'char'
p24666
a(lp24667
I-1
aaNtp24668
(S'data'
p24669
(lp24670
S'float64'
p24671
ag42
aNtp24672
tp24673
tp24674
sS'DAQmxResetCIGPSSyncMethod'
p24675
((lp24676
S'int32'
p24677
ag34
a((S'taskHandle'
p24678
(lp24679
S'TaskHandle'
p24680
aNtp24681
(S'channel'
p24682
(lp24683
S'char'
p24684
a(lp24685
I-1
aaNtp24686
tp24687
tp24688
sS'DAQmxResetAIStrainUnits'
p24689
((lp24690
S'int32'
p24691
ag34
a((S'taskHandle'
p24692
(lp24693
S'TaskHandle'
p24694
aNtp24695
(S'channel'
p24696
(lp24697
S'char'
p24698
a(lp24699
I-1
aaNtp24700
tp24701
tp24702
sS'DAQmxSetDigEdgeStartTrigDigFltrTimebaseRate'
p24703
((lp24704
S'int32'
p24705
ag34
a((S'taskHandle'
p24706
(lp24707
S'TaskHandle'
p24708
aNtp24709
(S'data'
p24710
(lp24711
S'float64'
p24712
aNtp24713
tp24714
tp24715
sS'DAQmxResetDOUseOnlyOnBrdMem'
p24716
((lp24717
S'int32'
p24718
ag34
a((S'taskHandle'
p24719
(lp24720
S'TaskHandle'
p24721
aNtp24722
(S'channel'
p24723
(lp24724
S'char'
p24725
a(lp24726
I-1
aaNtp24727
tp24728
tp24729
sS'DAQmxGetCOPulseFreqInitialDelay'
p24730
((lp24731
S'int32'
p24732
ag34
a((S'taskHandle'
p24733
(lp24734
S'TaskHandle'
p24735
aNtp24736
(S'channel'
p24737
(lp24738
S'char'
p24739
a(lp24740
I-1
aaNtp24741
(S'data'
p24742
(lp24743
S'float64'
p24744
ag42
aNtp24745
tp24746
tp24747
sS'DAQmxResetDigEdgeArmStartTrigDigFltrMinPulseWidth'
p24748
((lp24749
S'int32'
p24750
ag34
a((S'taskHandle'
p24751
(lp24752
S'TaskHandle'
p24753
aNtp24754
tp24755
tp24756
sS'DAQmxSetExportedRdyForXferEventLvlActiveLvl'
p24757
((lp24758
S'int32'
p24759
ag34
a((S'taskHandle'
p24760
(lp24761
S'TaskHandle'
p24762
aNtp24763
(S'data'
p24764
(lp24765
S'int32'
p24766
aNtp24767
tp24768
tp24769
sS'DAQmxSetCIFreqMeasTime'
p24770
((lp24771
S'int32'
p24772
ag34
a((S'taskHandle'
p24773
(lp24774
S'TaskHandle'
p24775
aNtp24776
(S'channel'
p24777
(lp24778
S'char'
p24779
a(lp24780
I-1
aaNtp24781
(S'data'
p24782
(lp24783
S'float64'
p24784
aNtp24785
tp24786
tp24787
sS'DAQmxResetDigPatternStartTrigWhen'
p24788
((lp24789
S'int32'
p24790
ag34
a((S'taskHandle'
p24791
(lp24792
S'TaskHandle'
p24793
aNtp24794
tp24795
tp24796
sS'DAQmxSetCICountEdgesDirTerm'
p24797
((lp24798
S'int32'
p24799
ag34
a((S'taskHandle'
p24800
(lp24801
S'TaskHandle'
p24802
aNtp24803
(S'channel'
p24804
(lp24805
S'char'
p24806
a(lp24807
I-1
aaNtp24808
(S'data'
p24809
(lp24810
S'char'
p24811
ag42
aNtp24812
tp24813
tp24814
sS'DAQmxSetExportedSampClkOutputTerm'
p24815
((lp24816
S'int32'
p24817
ag34
a((S'taskHandle'
p24818
(lp24819
S'TaskHandle'
p24820
aNtp24821
(S'data'
p24822
(lp24823
S'char'
p24824
ag42
aNtp24825
tp24826
tp24827
sS'DAQmxSetStartTrigRetriggerable'
p24828
((lp24829
S'int32'
p24830
ag34
a((S'taskHandle'
p24831
(lp24832
S'TaskHandle'
p24833
aNtp24834
(S'data'
p24835
(lp24836
S'bool32'
p24837
aNtp24838
tp24839
tp24840
sS'DAQmxGetExportedRdyForXferEventLvlActiveLvl'
p24841
((lp24842
S'int32'
p24843
ag34
a((S'taskHandle'
p24844
(lp24845
S'TaskHandle'
p24846
aNtp24847
(S'data'
p24848
(lp24849
S'int32'
p24850
ag42
aNtp24851
tp24852
tp24853
sS'DAQmxResetAIRVDTSensitivity'
p24854
((lp24855
S'int32'
p24856
ag34
a((S'taskHandle'
p24857
(lp24858
S'TaskHandle'
p24859
aNtp24860
(S'channel'
p24861
(lp24862
S'char'
p24863
a(lp24864
I-1
aaNtp24865
tp24866
tp24867
sS'DAQmxSetAODACRngHigh'
p24868
((lp24869
S'int32'
p24870
ag34
a((S'taskHandle'
p24871
(lp24872
S'TaskHandle'
p24873
aNtp24874
(S'channel'
p24875
(lp24876
S'char'
p24877
a(lp24878
I-1
aaNtp24879
(S'data'
p24880
(lp24881
S'float64'
p24882
aNtp24883
tp24884
tp24885
sS'DAQmxSetCICtrTimebaseMasterTimebaseDiv'
p24886
((lp24887
S'int32'
p24888
ag34
a((S'taskHandle'
p24889
(lp24890
S'TaskHandle'
p24891
aNtp24892
(S'channel'
p24893
(lp24894
S'char'
p24895
a(lp24896
I-1
aaNtp24897
(S'data'
p24898
(lp24899
S'uInt32'
p24900
aNtp24901
tp24902
tp24903
sS'DAQmxResetCIFreqMeasTime'
p24904
((lp24905
S'int32'
p24906
ag34
a((S'taskHandle'
p24907
(lp24908
S'TaskHandle'
p24909
aNtp24910
(S'channel'
p24911
(lp24912
S'char'
p24913
a(lp24914
I-1
aaNtp24915
tp24916
tp24917
sS'DAQmxSetSwitchScanRepeatMode'
p24918
((lp24919
S'int32'
p24920
ag34
a((S'taskHandle'
p24921
(lp24922
S'TaskHandle'
p24923
aNtp24924
(S'data'
p24925
(lp24926
S'int32'
p24927
aNtp24928
tp24929
tp24930
sS'DAQmxGetReadReadAllAvailSamp'
p24931
((lp24932
S'int32'
p24933
ag34
a((S'taskHandle'
p24934
(lp24935
S'TaskHandle'
p24936
aNtp24937
(S'data'
p24938
(lp24939
S'bool32'
p24940
ag42
aNtp24941
tp24942
tp24943
sS'DAQmxGetDigEdgeStartTrigDigSyncEnable'
p24944
((lp24945
S'int32'
p24946
ag34
a((S'taskHandle'
p24947
(lp24948
S'TaskHandle'
p24949
aNtp24950
(S'data'
p24951
(lp24952
S'bool32'
p24953
ag42
aNtp24954
tp24955
tp24956
sS'DAQmxSetAIDataXferReqCond'
p24957
((lp24958
S'int32'
p24959
ag34
a((S'taskHandle'
p24960
(lp24961
S'TaskHandle'
p24962
aNtp24963
(S'channel'
p24964
(lp24965
S'char'
p24966
a(lp24967
I-1
aaNtp24968
(S'data'
p24969
(lp24970
S'int32'
p24971
aNtp24972
tp24973
tp24974
sS'DAQmxResetCIDataXferMech'
p24975
((lp24976
S'int32'
p24977
ag34
a((S'taskHandle'
p24978
(lp24979
S'TaskHandle'
p24980
aNtp24981
(S'channel'
p24982
(lp24983
S'char'
p24984
a(lp24985
I-1
aaNtp24986
tp24987
tp24988
sS'DAQmxResetDigEdgeStartTrigDigFltrEnable'
p24989
((lp24990
S'int32'
p24991
ag34
a((S'taskHandle'
p24992
(lp24993
S'TaskHandle'
p24994
aNtp24995
tp24996
tp24997
sS'DAQmxWriteCtrTicks'
p24998
((lp24999
S'int32'
p25000
ag34
a((S'taskHandle'
p25001
(lp25002
S'TaskHandle'
p25003
aNtp25004
(S'numSampsPerChan'
p25005
(lp25006
S'int32'
p25007
aNtp25008
(S'autoStart'
p25009
(lp25010
S'bool32'
p25011
aNtp25012
(S'timeout'
p25013
(lp25014
S'float64'
p25015
aNtp25016
(S'dataLayout'
p25017
(lp25018
S'bool32'
p25019
aNtp25020
(S'highTicks'
p25021
(lp25022
S'uInt32'
p25023
a(lp25024
I-1
aaNtp25025
(S'lowTicks'
p25026
(lp25027
S'uInt32'
p25028
a(lp25029
I-1
aaNtp25030
(S'numSampsPerChanWritten'
p25031
(lp25032
S'int32'
p25033
ag42
aNtp25034
(S'reserved'
p25035
(lp25036
S'bool32'
p25037
ag42
aNtp25038
tp25039
tp25040
sS'DAQmxGetDigEdgeStartTrigDigFltrEnable'
p25041
((lp25042
S'int32'
p25043
ag34
a((S'taskHandle'
p25044
(lp25045
S'TaskHandle'
p25046
aNtp25047
(S'data'
p25048
(lp25049
S'bool32'
p25050
ag42
aNtp25051
tp25052
tp25053
sS'DAQmxResetAnlgEdgeStartTrigLvl'
p25054
((lp25055
S'int32'
p25056
ag34
a((S'taskHandle'
p25057
(lp25058
S'TaskHandle'
p25059
aNtp25060
tp25061
tp25062
sS'DAQmxGetCIDupCountPrevent'
p25063
((lp25064
S'int32'
p25065
ag34
a((S'taskHandle'
p25066
(lp25067
S'TaskHandle'
p25068
aNtp25069
(S'channel'
p25070
(lp25071
S'char'
p25072
a(lp25073
I-1
aaNtp25074
(S'data'
p25075
(lp25076
S'bool32'
p25077
ag42
aNtp25078
tp25079
tp25080
sS'DAQmxResetCIPeriodDigFltrMinPulseWidth'
p25081
((lp25082
S'int32'
p25083
ag34
a((S'taskHandle'
p25084
(lp25085
S'TaskHandle'
p25086
aNtp25087
(S'channel'
p25088
(lp25089
S'char'
p25090
a(lp25091
I-1
aaNtp25092
tp25093
tp25094
sS'DAQmxGetScaleTablePreScaledVals'
p25095
((lp25096
S'int32'
p25097
ag34
a((S'scaleName'
p25098
(lp25099
S'char'
p25100
a(lp25101
I-1
aaNtp25102
(S'data'
p25103
(lp25104
S'float64'
p25105
ag42
aNtp25106
(S'arraySizeInSamples'
p25107
(lp25108
S'uInt32'
p25109
aNtp25110
tp25111
tp25112
sS'DAQmxGetCOPulseHighTicks'
p25113
((lp25114
S'int32'
p25115
ag34
a((S'taskHandle'
p25116
(lp25117
S'TaskHandle'
p25118
aNtp25119
(S'channel'
p25120
(lp25121
S'char'
p25122
a(lp25123
I-1
aaNtp25124
(S'data'
p25125
(lp25126
S'uInt32'
p25127
ag42
aNtp25128
tp25129
tp25130
sS'DAQmxGetWriteRelativeTo'
p25131
((lp25132
S'int32'
p25133
ag34
a((S'taskHandle'
p25134
(lp25135
S'TaskHandle'
p25136
aNtp25137
(S'data'
p25138
(lp25139
S'int32'
p25140
ag42
aNtp25141
tp25142
tp25143
sS'DAQmxSetAIExcitVoltageOrCurrent'
p25144
((lp25145
S'int32'
p25146
ag34
a((S'taskHandle'
p25147
(lp25148
S'TaskHandle'
p25149
aNtp25150
(S'channel'
p25151
(lp25152
S'char'
p25153
a(lp25154
I-1
aaNtp25155
(S'data'
p25156
(lp25157
S'int32'
p25158
aNtp25159
tp25160
tp25161
sS'DAQmxGetSampQuantSampPerChan'
p25162
((lp25163
S'int32'
p25164
ag34
a((S'taskHandle'
p25165
(lp25166
S'TaskHandle'
p25167
aNtp25168
(S'data'
p25169
(lp25170
S'uInt64'
p25171
ag42
aNtp25172
tp25173
tp25174
sS'DAQmxGetScaleMapScaledMax'
p25175
((lp25176
S'int32'
p25177
ag34
a((S'scaleName'
p25178
(lp25179
S'char'
p25180
a(lp25181
I-1
aaNtp25182
(S'data'
p25183
(lp25184
S'float64'
p25185
ag42
aNtp25186
tp25187
tp25188
sS'DAQmxGetSampClkDigFltrMinPulseWidth'
p25189
((lp25190
S'int32'
p25191
ag34
a((S'taskHandle'
p25192
(lp25193
S'TaskHandle'
p25194
aNtp25195
(S'data'
p25196
(lp25197
S'float64'
p25198
ag42
aNtp25199
tp25200
tp25201
sS'DAQmxSetAIDataXferCustomThreshold'
p25202
((lp25203
S'int32'
p25204
ag34
a((S'taskHandle'
p25205
(lp25206
S'TaskHandle'
p25207
aNtp25208
(S'channel'
p25209
(lp25210
S'char'
p25211
a(lp25212
I-1
aaNtp25213
(S'data'
p25214
(lp25215
S'uInt32'
p25216
aNtp25217
tp25218
tp25219
sS'DAQmxSetAICurrentUnits'
p25220
((lp25221
S'int32'
p25222
ag34
a((S'taskHandle'
p25223
(lp25224
S'TaskHandle'
p25225
aNtp25226
(S'channel'
p25227
(lp25228
S'char'
p25229
a(lp25230
I-1
aaNtp25231
(S'data'
p25232
(lp25233
S'int32'
p25234
aNtp25235
tp25236
tp25237
sS'DAQmxGetAOGain'
p25238
((lp25239
S'int32'
p25240
ag34
a((S'taskHandle'
p25241
(lp25242
S'TaskHandle'
p25243
aNtp25244
(S'channel'
p25245
(lp25246
S'char'
p25247
a(lp25248
I-1
aaNtp25249
(S'data'
p25250
(lp25251
S'float64'
p25252
ag42
aNtp25253
tp25254
tp25255
sS'DAQmxResetExportedHshkEventInterlockedAssertedLvl'
p25256
((lp25257
S'int32'
p25258
ag34
a((S'taskHandle'
p25259
(lp25260
S'TaskHandle'
p25261
aNtp25262
tp25263
tp25264
sS'DAQmxGetExportedStartTrigOutputTerm'
p25265
((lp25266
S'int32'
p25267
ag34
a((S'taskHandle'
p25268
(lp25269
S'TaskHandle'
p25270
aNtp25271
(S'data'
p25272
(lp25273
S'char'
p25274
ag42
aNtp25275
(S'bufferSize'
p25276
(lp25277
S'uInt32'
p25278
aNtp25279
tp25280
tp25281
sS'DAQmxGetCIAngEncoderInitialAngle'
p25282
((lp25283
S'int32'
p25284
ag34
a((S'taskHandle'
p25285
(lp25286
S'TaskHandle'
p25287
aNtp25288
(S'channel'
p25289
(lp25290
S'char'
p25291
a(lp25292
I-1
aaNtp25293
(S'data'
p25294
(lp25295
S'float64'
p25296
ag42
aNtp25297
tp25298
tp25299
sS'DAQmxClearTEDS'
p25300
((lp25301
S'int32'
p25302
ag34
a((S'physicalChannel'
p25303
(lp25304
S'char'
p25305
a(lp25306
I-1
aaNtp25307
tp25308
tp25309
sS'DAQmxResetCICountEdgesCountDirDigFltrMinPulseWidth'
p25310
((lp25311
S'int32'
p25312
ag34
a((S'taskHandle'
p25313
(lp25314
S'TaskHandle'
p25315
aNtp25316
(S'channel'
p25317
(lp25318
S'char'
p25319
a(lp25320
I-1
aaNtp25321
tp25322
tp25323
sS'DAQmxGetExportedAdvTrigPulseWidth'
p25324
((lp25325
S'int32'
p25326
ag34
a((S'taskHandle'
p25327
(lp25328
S'TaskHandle'
p25329
aNtp25330
(S'data'
p25331
(lp25332
S'float64'
p25333
ag42
aNtp25334
tp25335
tp25336
sS'DAQmxCfgAnlgWindowStartTrig'
p25337
((lp25338
S'int32'
p25339
ag34
a((S'taskHandle'
p25340
(lp25341
S'TaskHandle'
p25342
aNtp25343
(S'triggerSource'
p25344
(lp25345
S'char'
p25346
a(lp25347
I-1
aaNtp25348
(S'triggerWhen'
p25349
(lp25350
S'int32'
p25351
aNtp25352
(S'windowTop'
p25353
(lp25354
S'float64'
p25355
aNtp25356
(S'windowBottom'
p25357
(lp25358
S'float64'
p25359
aNtp25360
tp25361
tp25362
sS'DAQmxGetCOPulseLowTime'
p25363
((lp25364
S'int32'
p25365
ag34
a((S'taskHandle'
p25366
(lp25367
S'TaskHandle'
p25368
aNtp25369
(S'channel'
p25370
(lp25371
S'char'
p25372
a(lp25373
I-1
aaNtp25374
(S'data'
p25375
(lp25376
S'float64'
p25377
ag42
aNtp25378
tp25379
tp25380
sS'DAQmxSetAILVDTUnits'
p25381
((lp25382
S'int32'
p25383
ag34
a((S'taskHandle'
p25384
(lp25385
S'TaskHandle'
p25386
aNtp25387
(S'channel'
p25388
(lp25389
S'char'
p25390
a(lp25391
I-1
aaNtp25392
(S'data'
p25393
(lp25394
S'int32'
p25395
aNtp25396
tp25397
tp25398
sS'DAQmxSetExportedChangeDetectEventOutputTerm'
p25399
((lp25400
S'int32'
p25401
ag34
a((S'taskHandle'
p25402
(lp25403
S'TaskHandle'
p25404
aNtp25405
(S'data'
p25406
(lp25407
S'char'
p25408
ag42
aNtp25409
tp25410
tp25411
sS'DAQmxCfgDigPatternStartTrig'
p25412
((lp25413
S'int32'
p25414
ag34
a((S'taskHandle'
p25415
(lp25416
S'TaskHandle'
p25417
aNtp25418
(S'triggerSource'
p25419
(lp25420
S'char'
p25421
a(lp25422
I-1
aaNtp25423
(S'triggerPattern'
p25424
(lp25425
S'char'
p25426
a(lp25427
I-1
aaNtp25428
(S'triggerWhen'
p25429
(lp25430
S'int32'
p25431
aNtp25432
tp25433
tp25434
sS'DAQmxSetCIEncoderAInputDigFltrTimebaseSrc'
p25435
((lp25436
S'int32'
p25437
ag34
a((S'taskHandle'
p25438
(lp25439
S'TaskHandle'
p25440
aNtp25441
(S'channel'
p25442
(lp25443
S'char'
p25444
a(lp25445
I-1
aaNtp25446
(S'data'
p25447
(lp25448
S'char'
p25449
ag42
aNtp25450
tp25451
tp25452
sS'DAQmxAdjust4224Cal'
p25453
((lp25454
S'int32'
p25455
ag34
a((S'calHandle'
p25456
(lp25457
S'uInt32'
p25458
aNtp25459
(S'channelNames'
p25460
(lp25461
S'char'
p25462
a(lp25463
I-1
aaNtp25464
(S'gain'
p25465
(lp25466
S'float64'
p25467
aNtp25468
(S'inputVal'
p25469
(lp25470
S'float64'
p25471
aNtp25472
tp25473
tp25474
sS'DAQmxDisconnectTerms'
p25475
((lp25476
S'int32'
p25477
ag34
a((S'sourceTerminal'
p25478
(lp25479
S'char'
p25480
a(lp25481
I-1
aaNtp25482
(S'destinationTerminal'
p25483
(lp25484
S'char'
p25485
a(lp25486
I-1
aaNtp25487
tp25488
tp25489
sS'DAQmxResetExportedHshkEventPulsePolarity'
p25490
((lp25491
S'int32'
p25492
ag34
a((S'taskHandle'
p25493
(lp25494
S'TaskHandle'
p25495
aNtp25496
tp25497
tp25498
sS'DAQmxResetAIFreqHyst'
p25499
((lp25500
S'int32'
p25501
ag34
a((S'taskHandle'
p25502
(lp25503
S'TaskHandle'
p25504
aNtp25505
(S'channel'
p25506
(lp25507
S'char'
p25508
a(lp25509
I-1
aaNtp25510
tp25511
tp25512
sS'DAQmxGetWatchdogHasExpired'
p25513
((lp25514
S'int32'
p25515
ag34
a((S'taskHandle'
p25516
(lp25517
S'TaskHandle'
p25518
aNtp25519
(S'data'
p25520
(lp25521
S'bool32'
p25522
ag42
aNtp25523
tp25524
tp25525
sS'DAQmxResetAILowpassEnable'
p25526
((lp25527
S'int32'
p25528
ag34
a((S'taskHandle'
p25529
(lp25530
S'TaskHandle'
p25531
aNtp25532
(S'channel'
p25533
(lp25534
S'char'
p25535
a(lp25536
I-1
aaNtp25537
tp25538
tp25539
sS'DAQmxGetDITristate'
p25540
((lp25541
S'int32'
p25542
ag34
a((S'taskHandle'
p25543
(lp25544
S'TaskHandle'
p25545
aNtp25546
(S'channel'
p25547
(lp25548
S'char'
p25549
a(lp25550
I-1
aaNtp25551
(S'data'
p25552
(lp25553
S'bool32'
p25554
ag42
aNtp25555
tp25556
tp25557
sS'DAQmxGetCISemiPeriodTerm'
p25558
((lp25559
S'int32'
p25560
ag34
a((S'taskHandle'
p25561
(lp25562
S'TaskHandle'
p25563
aNtp25564
(S'channel'
p25565
(lp25566
S'char'
p25567
a(lp25568
I-1
aaNtp25569
(S'data'
p25570
(lp25571
S'char'
p25572
ag42
aNtp25573
(S'bufferSize'
p25574
(lp25575
S'uInt32'
p25576
aNtp25577
tp25578
tp25579
sS'DAQmxGetCICountEdgesCountDirDigFltrMinPulseWidth'
p25580
((lp25581
S'int32'
p25582
ag34
a((S'taskHandle'
p25583
(lp25584
S'TaskHandle'
p25585
aNtp25586
(S'channel'
p25587
(lp25588
S'char'
p25589
a(lp25590
I-1
aaNtp25591
(S'data'
p25592
(lp25593
S'float64'
p25594
ag42
aNtp25595
tp25596
tp25597
sS'DAQmxSetScalePolyForwardCoeff'
p25598
((lp25599
S'int32'
p25600
ag34
a((S'scaleName'
p25601
(lp25602
S'char'
p25603
a(lp25604
I-1
aaNtp25605
(S'data'
p25606
(lp25607
S'float64'
p25608
ag42
aNtp25609
(S'arraySizeInSamples'
p25610
(lp25611
S'uInt32'
p25612
aNtp25613
tp25614
tp25615
sS'DAQmxGetAILVDTUnits'
p25616
((lp25617
S'int32'
p25618
ag34
a((S'taskHandle'
p25619
(lp25620
S'TaskHandle'
p25621
aNtp25622
(S'channel'
p25623
(lp25624
S'char'
p25625
a(lp25626
I-1
aaNtp25627
(S'data'
p25628
(lp25629
S'int32'
p25630
ag42
aNtp25631
tp25632
tp25633
sS'DAQmxSetDigPatternStartTrigSrc'
p25634
((lp25635
S'int32'
p25636
ag34
a((S'taskHandle'
p25637
(lp25638
S'TaskHandle'
p25639
aNtp25640
(S'data'
p25641
(lp25642
S'char'
p25643
ag42
aNtp25644
tp25645
tp25646
sS'DAQmxSetAIResistanceCfg'
p25647
((lp25648
S'int32'
p25649
ag34
a((S'taskHandle'
p25650
(lp25651
S'TaskHandle'
p25652
aNtp25653
(S'channel'
p25654
(lp25655
S'char'
p25656
a(lp25657
I-1
aaNtp25658
(S'data'
p25659
(lp25660
S'int32'
p25661
aNtp25662
tp25663
tp25664
sS'DAQmxSetup1125Cal'
p25665
((lp25666
S'int32'
p25667
ag34
a((S'calHandle'
p25668
(lp25669
S'uInt32'
p25670
aNtp25671
(S'channelNames'
p25672
(lp25673
S'char'
p25674
a(lp25675
I-1
aaNtp25676
(S'gain'
p25677
(lp25678
S'float64'
p25679
aNtp25680
tp25681
tp25682
sS'DAQmxSetCOAutoIncrCnt'
p25683
((lp25684
S'int32'
p25685
ag34
a((S'taskHandle'
p25686
(lp25687
S'TaskHandle'
p25688
aNtp25689
(S'channel'
p25690
(lp25691
S'char'
p25692
a(lp25693
I-1
aaNtp25694
(S'data'
p25695
(lp25696
S'uInt32'
p25697
aNtp25698
tp25699
tp25700
sS'DAQmxResetDigPatternRefTrigPattern'
p25701
((lp25702
S'int32'
p25703
ag34
a((S'taskHandle'
p25704
(lp25705
S'TaskHandle'
p25706
aNtp25707
tp25708
tp25709
sS'DAQmxSwitchFindPath'
p25710
((lp25711
S'int32'
p25712
ag34
a((S'switchChannel1'
p25713
(lp25714
S'char'
p25715
a(lp25716
I-1
aaNtp25717
(S'switchChannel2'
p25718
(lp25719
S'char'
p25720
a(lp25721
I-1
aaNtp25722
(S'path'
p25723
(lp25724
S'char'
p25725
a(lp25726
I-1
aaNtp25727
(S'pathBufferSize'
p25728
(lp25729
S'uInt32'
p25730
aNtp25731
(S'pathStatus'
p25732
(lp25733
S'int32'
p25734
ag42
aNtp25735
tp25736
tp25737
sS'DAQmxSetBufOutputOnbrdBufSize'
p25738
((lp25739
S'int32'
p25740
ag34
a((S'taskHandle'
p25741
(lp25742
S'TaskHandle'
p25743
aNtp25744
(S'data'
p25745
(lp25746
S'uInt32'
p25747
aNtp25748
tp25749
tp25750
sS'DAQmxSetCITwoEdgeSepSecondDigFltrTimebaseSrc'
p25751
((lp25752
S'int32'
p25753
ag34
a((S'taskHandle'
p25754
(lp25755
S'TaskHandle'
p25756
aNtp25757
(S'channel'
p25758
(lp25759
S'char'
p25760
a(lp25761
I-1
aaNtp25762
(S'data'
p25763
(lp25764
S'char'
p25765
ag42
aNtp25766
tp25767
tp25768
sS'DAQmxGetCIEncoderZInputDigFltrTimebaseRate'
p25769
((lp25770
S'int32'
p25771
ag34
a((S'taskHandle'
p25772
(lp25773
S'TaskHandle'
p25774
aNtp25775
(S'channel'
p25776
(lp25777
S'char'
p25778
a(lp25779
I-1
aaNtp25780
(S'data'
p25781
(lp25782
S'float64'
p25783
ag42
aNtp25784
tp25785
tp25786
sS'DAQmxResetDigLvlPauseTrigDigSyncEnable'
p25787
((lp25788
S'int32'
p25789
ag34
a((S'taskHandle'
p25790
(lp25791
S'TaskHandle'
p25792
aNtp25793
tp25794
tp25795
sS'DAQmxGetCIEncoderBInputDigSyncEnable'
p25796
((lp25797
S'int32'
p25798
ag34
a((S'taskHandle'
p25799
(lp25800
S'TaskHandle'
p25801
aNtp25802
(S'channel'
p25803
(lp25804
S'char'
p25805
a(lp25806
I-1
aaNtp25807
(S'data'
p25808
(lp25809
S'bool32'
p25810
ag42
aNtp25811
tp25812
tp25813
sS'DAQmxSetAICurrentShuntLoc'
p25814
((lp25815
S'int32'
p25816
ag34
a((S'taskHandle'
p25817
(lp25818
S'TaskHandle'
p25819
aNtp25820
(S'channel'
p25821
(lp25822
S'char'
p25823
a(lp25824
I-1
aaNtp25825
(S'data'
p25826
(lp25827
S'int32'
p25828
aNtp25829
tp25830
tp25831
sS'DAQmxSetCIEncoderBInputTerm'
p25832
((lp25833
S'int32'
p25834
ag34
a((S'taskHandle'
p25835
(lp25836
S'TaskHandle'
p25837
aNtp25838
(S'channel'
p25839
(lp25840
S'char'
p25841
a(lp25842
I-1
aaNtp25843
(S'data'
p25844
(lp25845
S'char'
p25846
ag42
aNtp25847
tp25848
tp25849
sS'DAQmxRegisterEveryNSamplesEvent'
p25850
((lp25851
S'int32'
p25852
ag34
a((S'task'
p25853
(lp25854
S'TaskHandle'
p25855
aNtp25856
(S'everyNsamplesEventType'
p25857
(lp25858
S'int32'
p25859
aNtp25860
(S'nSamples'
p25861
(lp25862
S'uInt32'
p25863
aNtp25864
(S'options'
p25865
(lp25866
S'uInt32'
p25867
aNtp25868
(S'callbackFunction'
p25869
(lp25870
S'DAQmxEveryNSamplesEventCallbackPtr'
p25871
aNtp25872
(S'callbackData'
p25873
(lp25874
S'void'
p25875
ag42
aNtp25876
tp25877
tp25878
sS'DAQmxSetReadOffset'
p25879
((lp25880
S'int32'
p25881
ag34
a((S'taskHandle'
p25882
(lp25883
S'TaskHandle'
p25884
aNtp25885
(S'data'
p25886
(lp25887
S'int32'
p25888
aNtp25889
tp25890
tp25891
sS'DAQmxResetCIEncoderZInputDigFltrMinPulseWidth'
p25892
((lp25893
S'int32'
p25894
ag34
a((S'taskHandle'
p25895
(lp25896
S'TaskHandle'
p25897
aNtp25898
(S'channel'
p25899
(lp25900
S'char'
p25901
a(lp25902
I-1
aaNtp25903
tp25904
tp25905
sS'DAQmxResetReadWaitMode'
p25906
((lp25907
S'int32'
p25908
ag34
a((S'taskHandle'
p25909
(lp25910
S'TaskHandle'
p25911
aNtp25912
tp25913
tp25914
sS'DAQmxGetCIPeriodTerm'
p25915
((lp25916
S'int32'
p25917
ag34
a((S'taskHandle'
p25918
(lp25919
S'TaskHandle'
p25920
aNtp25921
(S'channel'
p25922
(lp25923
S'char'
p25924
a(lp25925
I-1
aaNtp25926
(S'data'
p25927
(lp25928
S'char'
p25929
ag42
aNtp25930
(S'bufferSize'
p25931
(lp25932
S'uInt32'
p25933
aNtp25934
tp25935
tp25936
sS'DAQmxResetDIDataXferMech'
p25937
((lp25938
S'int32'
p25939
ag34
a((S'taskHandle'
p25940
(lp25941
S'TaskHandle'
p25942
aNtp25943
(S'channel'
p25944
(lp25945
S'char'
p25946
a(lp25947
I-1
aaNtp25948
tp25949
tp25950
sS'DAQmxReadBinaryU32'
p25951
((lp25952
S'int32'
p25953
ag34
a((S'taskHandle'
p25954
(lp25955
S'TaskHandle'
p25956
aNtp25957
(S'numSampsPerChan'
p25958
(lp25959
S'int32'
p25960
aNtp25961
(S'timeout'
p25962
(lp25963
S'float64'
p25964
aNtp25965
(S'fillMode'
p25966
(lp25967
S'bool32'
p25968
aNtp25969
(S'readArray'
p25970
(lp25971
S'uInt32'
p25972
a(lp25973
I-1
aaNtp25974
(S'arraySizeInSamps'
p25975
(lp25976
S'uInt32'
p25977
aNtp25978
(S'sampsPerChanRead'
p25979
(lp25980
S'int32'
p25981
ag42
aNtp25982
(S'reserved'
p25983
(lp25984
S'bool32'
p25985
ag42
aNtp25986
tp25987
tp25988
sS'DAQmxCfgDigEdgeRefTrig'
p25989
((lp25990
S'int32'
p25991
ag34
a((S'taskHandle'
p25992
(lp25993
S'TaskHandle'
p25994
aNtp25995
(S'triggerSource'
p25996
(lp25997
S'char'
p25998
a(lp25999
I-1
aaNtp26000
(S'triggerEdge'
p26001
(lp26002
S'int32'
p26003
aNtp26004
(S'pretriggerSamples'
p26005
(lp26006
S'uInt32'
p26007
aNtp26008
tp26009
tp26010
sS'DAQmxResetAnlgWinStartTrigBtm'
p26011
((lp26012
S'int32'
p26013
ag34
a((S'taskHandle'
p26014
(lp26015
S'TaskHandle'
p26016
aNtp26017
tp26018
tp26019
sS'DAQmxGetCOPulseLowTicks'
p26020
((lp26021
S'int32'
p26022
ag34
a((S'taskHandle'
p26023
(lp26024
S'TaskHandle'
p26025
aNtp26026
(S'channel'
p26027
(lp26028
S'char'
p26029
a(lp26030
I-1
aaNtp26031
(S'data'
p26032
(lp26033
S'uInt32'
p26034
ag42
aNtp26035
tp26036
tp26037
sS'DAQmxGetSysNIDAQMajorVersion'
p26038
((lp26039
S'int32'
p26040
ag34
a((S'data'
p26041
(lp26042
S'uInt32'
p26043
ag42
aNtp26044
tp26045
tp26046
sS'DAQmxGetAIChanCalOperatorName'
p26047
((lp26048
S'int32'
p26049
ag34
a((S'taskHandle'
p26050
(lp26051
S'TaskHandle'
p26052
aNtp26053
(S'channel'
p26054
(lp26055
S'char'
p26056
a(lp26057
I-1
aaNtp26058
(S'data'
p26059
(lp26060
S'char'
p26061
ag42
aNtp26062
(S'bufferSize'
p26063
(lp26064
S'uInt32'
p26065
aNtp26066
tp26067
tp26068
sS'DAQmxGetExportedHshkEventOutputBehavior'
p26069
((lp26070
S'int32'
p26071
ag34
a((S'taskHandle'
p26072
(lp26073
S'TaskHandle'
p26074
aNtp26075
(S'data'
p26076
(lp26077
S'int32'
p26078
ag42
aNtp26079
tp26080
tp26081
sS'DAQmxGetAIChanCalApplyCalIfExp'
p26082
((lp26083
S'int32'
p26084
ag34
a((S'taskHandle'
p26085
(lp26086
S'TaskHandle'
p26087
aNtp26088
(S'channel'
p26089
(lp26090
S'char'
p26091
a(lp26092
I-1
aaNtp26093
(S'data'
p26094
(lp26095
S'bool32'
p26096
ag42
aNtp26097
tp26098
tp26099
sS'DAQmxResetSampClkDigFltrMinPulseWidth'
p26100
((lp26101
S'int32'
p26102
ag34
a((S'taskHandle'
p26103
(lp26104
S'TaskHandle'
p26105
aNtp26106
tp26107
tp26108
sS'DAQmxSetCOCtrTimebaseSrc'
p26109
((lp26110
S'int32'
p26111
ag34
a((S'taskHandle'
p26112
(lp26113
S'TaskHandle'
p26114
aNtp26115
(S'channel'
p26116
(lp26117
S'char'
p26118
a(lp26119
I-1
aaNtp26120
(S'data'
p26121
(lp26122
S'char'
p26123
ag42
aNtp26124
tp26125
tp26126
sS'DAQmxGetPersistedScaleAuthor'
p26127
((lp26128
S'int32'
p26129
ag34
a((S'scaleName'
p26130
(lp26131
S'char'
p26132
a(lp26133
I-1
aaNtp26134
(S'data'
p26135
(lp26136
S'char'
p26137
ag42
aNtp26138
(S'bufferSize'
p26139
(lp26140
S'uInt32'
p26141
aNtp26142
tp26143
tp26144
sS'DAQmxGetCITwoEdgeSepFirstTerm'
p26145
((lp26146
S'int32'
p26147
ag34
a((S'taskHandle'
p26148
(lp26149
S'TaskHandle'
p26150
aNtp26151
(S'channel'
p26152
(lp26153
S'char'
p26154
a(lp26155
I-1
aaNtp26156
(S'data'
p26157
(lp26158
S'char'
p26159
ag42
aNtp26160
(S'bufferSize'
p26161
(lp26162
S'uInt32'
p26163
aNtp26164
tp26165
tp26166
sS'DAQmxSetDigPatternStartTrigWhen'
p26167
((lp26168
S'int32'
p26169
ag34
a((S'taskHandle'
p26170
(lp26171
S'TaskHandle'
p26172
aNtp26173
(S'data'
p26174
(lp26175
S'int32'
p26176
aNtp26177
tp26178
tp26179
sS'DAQmxGetNthTaskReadChannel'
p26180
((lp26181
S'int32'
p26182
ag34
a((S'taskHandle'
p26183
(lp26184
S'TaskHandle'
p26185
aNtp26186
(S'index'
p26187
(lp26188
S'uInt32'
p26189
aNtp26190
(S'buffer'
p26191
(lp26192
S'char'
p26193
a(lp26194
I-1
aaNtp26195
(S'bufferSize'
p26196
(lp26197
S'int32'
p26198
aNtp26199
tp26200
tp26201
sS'DAQmxGetDevDIPorts'
p26202
((lp26203
S'int32'
p26204
ag34
a((S'device'
p26205
(lp26206
S'char'
p26207
a(lp26208
I-1
aaNtp26209
(S'data'
p26210
(lp26211
S'char'
p26212
ag42
aNtp26213
(S'bufferSize'
p26214
(lp26215
S'uInt32'
p26216
aNtp26217
tp26218
tp26219
sS'DAQmxWaitUntilTaskDone'
p26220
((lp26221
S'int32'
p26222
ag34
a((S'taskHandle'
p26223
(lp26224
S'TaskHandle'
p26225
aNtp26226
(S'timeToWait'
p26227
(lp26228
S'float64'
p26229
aNtp26230
tp26231
tp26232
sS'DAQmxSetAIAtten'
p26233
((lp26234
S'int32'
p26235
ag34
a((S'taskHandle'
p26236
(lp26237
S'TaskHandle'
p26238
aNtp26239
(S'channel'
p26240
(lp26241
S'char'
p26242
a(lp26243
I-1
aaNtp26244
(S'data'
p26245
(lp26246
S'float64'
p26247
aNtp26248
tp26249
tp26250
sS'DAQmxResetAILowpassSwitchCapClkSrc'
p26251
((lp26252
S'int32'
p26253
ag34
a((S'taskHandle'
p26254
(lp26255
S'TaskHandle'
p26256
aNtp26257
(S'channel'
p26258
(lp26259
S'char'
p26260
a(lp26261
I-1
aaNtp26262
tp26263
tp26264
sS'DAQmxSetRefTrigPretrigSamples'
p26265
((lp26266
S'int32'
p26267
ag34
a((S'taskHandle'
p26268
(lp26269
S'TaskHandle'
p26270
aNtp26271
(S'data'
p26272
(lp26273
S'uInt32'
p26274
aNtp26275
tp26276
tp26277
sS'DAQmxResetAICurrentShuntLoc'
p26278
((lp26279
S'int32'
p26280
ag34
a((S'taskHandle'
p26281
(lp26282
S'TaskHandle'
p26283
aNtp26284
(S'channel'
p26285
(lp26286
S'char'
p26287
a(lp26288
I-1
aaNtp26289
tp26290
tp26291
sS'DAQmxGetCICountEdgesDigFltrTimebaseRate'
p26292
((lp26293
S'int32'
p26294
ag34
a((S'taskHandle'
p26295
(lp26296
S'TaskHandle'
p26297
aNtp26298
(S'channel'
p26299
(lp26300
S'char'
p26301
a(lp26302
I-1
aaNtp26303
(S'data'
p26304
(lp26305
S'float64'
p26306
ag42
aNtp26307
tp26308
tp26309
sS'DAQmxGetCICountEdgesCountDirDigFltrTimebaseSrc'
p26310
((lp26311
S'int32'
p26312
ag34
a((S'taskHandle'
p26313
(lp26314
S'TaskHandle'
p26315
aNtp26316
(S'channel'
p26317
(lp26318
S'char'
p26319
a(lp26320
I-1
aaNtp26321
(S'data'
p26322
(lp26323
S'char'
p26324
ag42
aNtp26325
(S'bufferSize'
p26326
(lp26327
S'uInt32'
p26328
aNtp26329
tp26330
tp26331
sS'DAQmxIsTaskDone'
p26332
((lp26333
S'int32'
p26334
ag34
a((S'taskHandle'
p26335
(lp26336
S'TaskHandle'
p26337
aNtp26338
(S'isTaskDone'
p26339
(lp26340
S'bool32'
p26341
ag42
aNtp26342
tp26343
tp26344
sS'DAQmxSetCOPulseTimeUnits'
p26345
((lp26346
S'int32'
p26347
ag34
a((S'taskHandle'
p26348
(lp26349
S'TaskHandle'
p26350
aNtp26351
(S'channel'
p26352
(lp26353
S'char'
p26354
a(lp26355
I-1
aaNtp26356
(S'data'
p26357
(lp26358
S'int32'
p26359
aNtp26360
tp26361
tp26362
sS'DAQmxGetAODACRefExtSrc'
p26363
((lp26364
S'int32'
p26365
ag34
a((S'taskHandle'
p26366
(lp26367
S'TaskHandle'
p26368
aNtp26369
(S'channel'
p26370
(lp26371
S'char'
p26372
a(lp26373
I-1
aaNtp26374
(S'data'
p26375
(lp26376
S'char'
p26377
ag42
aNtp26378
(S'bufferSize'
p26379
(lp26380
S'uInt32'
p26381
aNtp26382
tp26383
tp26384
sS'DAQmxSetAIExcitVal'
p26385
((lp26386
S'int32'
p26387
ag34
a((S'taskHandle'
p26388
(lp26389
S'TaskHandle'
p26390
aNtp26391
(S'channel'
p26392
(lp26393
S'char'
p26394
a(lp26395
I-1
aaNtp26396
(S'data'
p26397
(lp26398
S'float64'
p26399
aNtp26400
tp26401
tp26402
sS'DAQmxGetCICountEdgesDirTerm'
p26403
((lp26404
S'int32'
p26405
ag34
a((S'taskHandle'
p26406
(lp26407
S'TaskHandle'
p26408
aNtp26409
(S'channel'
p26410
(lp26411
S'char'
p26412
a(lp26413
I-1
aaNtp26414
(S'data'
p26415
(lp26416
S'char'
p26417
ag42
aNtp26418
(S'bufferSize'
p26419
(lp26420
S'uInt32'
p26421
aNtp26422
tp26423
tp26424
sS'DAQmxSetDOUseOnlyOnBrdMem'
p26425
((lp26426
S'int32'
p26427
ag34
a((S'taskHandle'
p26428
(lp26429
S'TaskHandle'
p26430
aNtp26431
(S'channel'
p26432
(lp26433
S'char'
p26434
a(lp26435
I-1
aaNtp26436
(S'data'
p26437
(lp26438
S'bool32'
p26439
aNtp26440
tp26441
tp26442
sS'DAQmxResetSampQuantSampMode'
p26443
((lp26444
S'int32'
p26445
ag34
a((S'taskHandle'
p26446
(lp26447
S'TaskHandle'
p26448
aNtp26449
tp26450
tp26451
sS'DAQmxSetCIEncoderZInputDigFltrTimebaseRate'
p26452
((lp26453
S'int32'
p26454
ag34
a((S'taskHandle'
p26455
(lp26456
S'TaskHandle'
p26457
aNtp26458
(S'channel'
p26459
(lp26460
S'char'
p26461
a(lp26462
I-1
aaNtp26463
(S'data'
p26464
(lp26465
S'float64'
p26466
aNtp26467
tp26468
tp26469
sS'DAQmxSetCISemiPeriodTerm'
p26470
((lp26471
S'int32'
p26472
ag34
a((S'taskHandle'
p26473
(lp26474
S'TaskHandle'
p26475
aNtp26476
(S'channel'
p26477
(lp26478
S'char'
p26479
a(lp26480
I-1
aaNtp26481
(S'data'
p26482
(lp26483
S'char'
p26484
ag42
aNtp26485
tp26486
tp26487
sS'DAQmxGetCISemiPeriodDigSyncEnable'
p26488
((lp26489
S'int32'
p26490
ag34
a((S'taskHandle'
p26491
(lp26492
S'TaskHandle'
p26493
aNtp26494
(S'channel'
p26495
(lp26496
S'char'
p26497
a(lp26498
I-1
aaNtp26499
(S'data'
p26500
(lp26501
S'bool32'
p26502
ag42
aNtp26503
tp26504
tp26505
sS'DAQmxResetAILowpassSwitchCapExtClkFreq'
p26506
((lp26507
S'int32'
p26508
ag34
a((S'taskHandle'
p26509
(lp26510
S'TaskHandle'
p26511
aNtp26512
(S'channel'
p26513
(lp26514
S'char'
p26515
a(lp26516
I-1
aaNtp26517
tp26518
tp26519
sS'DAQmxSetDigLvlPauseTrigDigFltrTimebaseRate'
p26520
((lp26521
S'int32'
p26522
ag34
a((S'taskHandle'
p26523
(lp26524
S'TaskHandle'
p26525
aNtp26526
(S'data'
p26527
(lp26528
S'float64'
p26529
aNtp26530
tp26531
tp26532
sS'DAQmxGetStartTrigType'
p26533
((lp26534
S'int32'
p26535
ag34
a((S'taskHandle'
p26536
(lp26537
S'TaskHandle'
p26538
aNtp26539
(S'data'
p26540
(lp26541
S'int32'
p26542
ag42
aNtp26543
tp26544
tp26545
sS'DAQmxGetAnlgWinPauseTrigTop'
p26546
((lp26547
S'int32'
p26548
ag34
a((S'taskHandle'
p26549
(lp26550
S'TaskHandle'
p26551
aNtp26552
(S'data'
p26553
(lp26554
S'float64'
p26555
ag42
aNtp26556
tp26557
tp26558
sS'DAQmxGetPauseTrigType'
p26559
((lp26560
S'int32'
p26561
ag34
a((S'taskHandle'
p26562
(lp26563
S'TaskHandle'
p26564
aNtp26565
(S'data'
p26566
(lp26567
S'int32'
p26568
ag42
aNtp26569
tp26570
tp26571
sS'DAQmxSetCOCtrTimebaseMasterTimebaseDiv'
p26572
((lp26573
S'int32'
p26574
ag34
a((S'taskHandle'
p26575
(lp26576
S'TaskHandle'
p26577
aNtp26578
(S'channel'
p26579
(lp26580
S'char'
p26581
a(lp26582
I-1
aaNtp26583
(S'data'
p26584
(lp26585
S'uInt32'
p26586
aNtp26587
tp26588
tp26589
sS'DAQmxResetAnlgLvlPauseTrigWhen'
p26590
((lp26591
S'int32'
p26592
ag34
a((S'taskHandle'
p26593
(lp26594
S'TaskHandle'
p26595
aNtp26596
tp26597
tp26598
sS'DAQmxSetExportedHshkEventOutputBehavior'
p26599
((lp26600
S'int32'
p26601
ag34
a((S'taskHandle'
p26602
(lp26603
S'TaskHandle'
p26604
aNtp26605
(S'data'
p26606
(lp26607
S'int32'
p26608
aNtp26609
tp26610
tp26611
sS'DAQmxGetCOCtrTimebaseDigSyncEnable'
p26612
((lp26613
S'int32'
p26614
ag34
a((S'taskHandle'
p26615
(lp26616
S'TaskHandle'
p26617
aNtp26618
(S'channel'
p26619
(lp26620
S'char'
p26621
a(lp26622
I-1
aaNtp26623
(S'data'
p26624
(lp26625
S'bool32'
p26626
ag42
aNtp26627
tp26628
tp26629
sS'DAQmxGetScalePreScaledUnits'
p26630
((lp26631
S'int32'
p26632
ag34
a((S'scaleName'
p26633
(lp26634
S'char'
p26635
a(lp26636
I-1
aaNtp26637
(S'data'
p26638
(lp26639
S'int32'
p26640
ag42
aNtp26641
tp26642
tp26643
sS'DAQmxResetAILVDTSensitivityUnits'
p26644
((lp26645
S'int32'
p26646
ag34
a((S'taskHandle'
p26647
(lp26648
S'TaskHandle'
p26649
aNtp26650
(S'channel'
p26651
(lp26652
S'char'
p26653
a(lp26654
I-1
aaNtp26655
tp26656
tp26657
sS'DAQmxResetCICtrTimebaseRate'
p26658
((lp26659
S'int32'
p26660
ag34
a((S'taskHandle'
p26661
(lp26662
S'TaskHandle'
p26663
aNtp26664
(S'channel'
p26665
(lp26666
S'char'
p26667
a(lp26668
I-1
aaNtp26669
tp26670
tp26671
sS'DAQmxGetWriteAttribute'
p26672
((lp26673
S'int32'
p26674
ag2570
a((S'taskHandle'
p26675
(lp26676
S'TaskHandle'
p26677
aNtp26678
(S'attribute'
p26679
(lp26680
S'int32'
p26681
aNtp26682
(S'value'
p26683
(lp26684
S'void'
p26685
ag42
aNtp26686
tp26687
tp26688
sS'DAQmxResetCIEncoderBInputDigFltrTimebaseSrc'
p26689
((lp26690
S'int32'
p26691
ag34
a((S'taskHandle'
p26692
(lp26693
S'TaskHandle'
p26694
aNtp26695
(S'channel'
p26696
(lp26697
S'char'
p26698
a(lp26699
I-1
aaNtp26700
tp26701
tp26702
sS'DAQmxResetCITwoEdgeSepSecondDigFltrMinPulseWidth'
p26703
((lp26704
S'int32'
p26705
ag34
a((S'taskHandle'
p26706
(lp26707
S'TaskHandle'
p26708
aNtp26709
(S'channel'
p26710
(lp26711
S'char'
p26712
a(lp26713
I-1
aaNtp26714
tp26715
tp26716
sS'DAQmxResetCIAngEncoderUnits'
p26717
((lp26718
S'int32'
p26719
ag34
a((S'taskHandle'
p26720
(lp26721
S'TaskHandle'
p26722
aNtp26723
(S'channel'
p26724
(lp26725
S'char'
p26726
a(lp26727
I-1
aaNtp26728
tp26729
tp26730
sS'DAQmxResetAOEnhancedImageRejectionEnable'
p26731
((lp26732
S'int32'
p26733
ag34
a((S'taskHandle'
p26734
(lp26735
S'TaskHandle'
p26736
aNtp26737
(S'channel'
p26738
(lp26739
S'char'
p26740
a(lp26741
I-1
aaNtp26742
tp26743
tp26744
sS'DAQmxGetSyncPulseSyncTime'
p26745
((lp26746
S'int32'
p26747
ag34
a((S'taskHandle'
p26748
(lp26749
S'TaskHandle'
p26750
aNtp26751
(S'data'
p26752
(lp26753
S'float64'
p26754
ag42
aNtp26755
tp26756
tp26757
sS'DAQmxDeleteSavedScale'
p26758
((lp26759
S'int32'
p26760
ag34
a((S'scaleName'
p26761
(lp26762
S'char'
p26763
a(lp26764
I-1
aaNtp26765
tp26766
tp26767
sS'DAQmxGetPersistedScaleAllowInteractiveEditing'
p26768
((lp26769
S'int32'
p26770
ag34
a((S'scaleName'
p26771
(lp26772
S'char'
p26773
a(lp26774
I-1
aaNtp26775
(S'data'
p26776
(lp26777
S'bool32'
p26778
ag42
aNtp26779
tp26780
tp26781
sS'DAQmxGetCOPrescaler'
p26782
((lp26783
S'int32'
p26784
ag34
a((S'taskHandle'
p26785
(lp26786
S'TaskHandle'
p26787
aNtp26788
(S'channel'
p26789
(lp26790
S'char'
p26791
a(lp26792
I-1
aaNtp26793
(S'data'
p26794
(lp26795
S'uInt32'
p26796
ag42
aNtp26797
tp26798
tp26799
sS'DAQmxGetAIRTDR0'
p26800
((lp26801
S'int32'
p26802
ag34
a((S'taskHandle'
p26803
(lp26804
S'TaskHandle'
p26805
aNtp26806
(S'channel'
p26807
(lp26808
S'char'
p26809
a(lp26810
I-1
aaNtp26811
(S'data'
p26812
(lp26813
S'float64'
p26814
ag42
aNtp26815
tp26816
tp26817
sS'DAQmxGetAIResistanceUnits'
p26818
((lp26819
S'int32'
p26820
ag34
a((S'taskHandle'
p26821
(lp26822
S'TaskHandle'
p26823
aNtp26824
(S'channel'
p26825
(lp26826
S'char'
p26827
a(lp26828
I-1
aaNtp26829
(S'data'
p26830
(lp26831
S'int32'
p26832
ag42
aNtp26833
tp26834
tp26835
sS'DAQmxSetCOCtrTimebaseActiveEdge'
p26836
((lp26837
S'int32'
p26838
ag34
a((S'taskHandle'
p26839
(lp26840
S'TaskHandle'
p26841
aNtp26842
(S'channel'
p26843
(lp26844
S'char'
p26845
a(lp26846
I-1
aaNtp26847
(S'data'
p26848
(lp26849
S'int32'
p26850
aNtp26851
tp26852
tp26853
sS'DAQmxGetCIFreqDigFltrMinPulseWidth'
p26854
((lp26855
S'int32'
p26856
ag34
a((S'taskHandle'
p26857
(lp26858
S'TaskHandle'
p26859
aNtp26860
(S'channel'
p26861
(lp26862
S'char'
p26863
a(lp26864
I-1
aaNtp26865
(S'data'
p26866
(lp26867
S'float64'
p26868
ag42
aNtp26869
tp26870
tp26871
sS'DAQmxResetCIGPSSyncSrc'
p26872
((lp26873
S'int32'
p26874
ag34
a((S'taskHandle'
p26875
(lp26876
S'TaskHandle'
p26877
aNtp26878
(S'channel'
p26879
(lp26880
S'char'
p26881
a(lp26882
I-1
aaNtp26883
tp26884
tp26885
sS'DAQmxResetExportedHshkEventInterlockedDeassertDelay'
p26886
((lp26887
S'int32'
p26888
ag34
a((S'taskHandle'
p26889
(lp26890
S'TaskHandle'
p26891
aNtp26892
tp26893
tp26894
sS'DAQmxSetAIConvActiveEdge'
p26895
((lp26896
S'int32'
p26897
ag34
a((S'taskHandle'
p26898
(lp26899
S'TaskHandle'
p26900
aNtp26901
(S'data'
p26902
(lp26903
S'int32'
p26904
aNtp26905
tp26906
tp26907
sS'DAQmxGetCIFreqMeasTime'
p26908
((lp26909
S'int32'
p26910
ag34
a((S'taskHandle'
p26911
(lp26912
S'TaskHandle'
p26913
aNtp26914
(S'channel'
p26915
(lp26916
S'char'
p26917
a(lp26918
I-1
aaNtp26919
(S'data'
p26920
(lp26921
S'float64'
p26922
ag42
aNtp26923
tp26924
tp26925
sS'DAQmxGetAIDataXferReqCond'
p26926
((lp26927
S'int32'
p26928
ag34
a((S'taskHandle'
p26929
(lp26930
S'TaskHandle'
p26931
aNtp26932
(S'channel'
p26933
(lp26934
S'char'
p26935
a(lp26936
I-1
aaNtp26937
(S'data'
p26938
(lp26939
S'int32'
p26940
ag42
aNtp26941
tp26942
tp26943
sS'DAQmxGetCISemiPeriodStartingEdge'
p26944
((lp26945
S'int32'
p26946
ag34
a((S'taskHandle'
p26947
(lp26948
S'TaskHandle'
p26949
aNtp26950
(S'channel'
p26951
(lp26952
S'char'
p26953
a(lp26954
I-1
aaNtp26955
(S'data'
p26956
(lp26957
S'int32'
p26958
ag42
aNtp26959
tp26960
tp26961
sS'DAQmxGetAIBridgeShuntCalGainAdjust'
p26962
((lp26963
S'int32'
p26964
ag34
a((S'taskHandle'
p26965
(lp26966
S'TaskHandle'
p26967
aNtp26968
(S'channel'
p26969
(lp26970
S'char'
p26971
a(lp26972
I-1
aaNtp26973
(S'data'
p26974
(lp26975
S'float64'
p26976
ag42
aNtp26977
tp26978
tp26979
sS'DAQmxWriteBinaryI16'
p26980
((lp26981
S'int32'
p26982
ag34
a((S'taskHandle'
p26983
(lp26984
S'TaskHandle'
p26985
aNtp26986
(S'numSampsPerChan'
p26987
(lp26988
S'int32'
p26989
aNtp26990
(S'autoStart'
p26991
(lp26992
S'bool32'
p26993
aNtp26994
(S'timeout'
p26995
(lp26996
S'float64'
p26997
aNtp26998
(S'dataLayout'
p26999
(lp27000
S'bool32'
p27001
aNtp27002
(S'writeArray'
p27003
(lp27004
S'int16'
p27005
a(lp27006
I-1
aaNtp27007
(S'sampsPerChanWritten'
p27008
(lp27009
S'int32'
p27010
ag42
aNtp27011
(S'reserved'
p27012
(lp27013
S'bool32'
p27014
ag42
aNtp27015
tp27016
tp27017
sS'DAQmxSetCICountEdgesCountDirDigSyncEnable'
p27018
((lp27019
S'int32'
p27020
ag34
a((S'taskHandle'
p27021
(lp27022
S'TaskHandle'
p27023
aNtp27024
(S'channel'
p27025
(lp27026
S'char'
p27027
a(lp27028
I-1
aaNtp27029
(S'data'
p27030
(lp27031
S'bool32'
p27032
aNtp27033
tp27034
tp27035
sS'DAQmxGetWriteNumChans'
p27036
((lp27037
S'int32'
p27038
ag34
a((S'taskHandle'
p27039
(lp27040
S'TaskHandle'
p27041
aNtp27042
(S'data'
p27043
(lp27044
S'uInt32'
p27045
ag42
aNtp27046
tp27047
tp27048
sS'DAQmxSetSampClkDigFltrEnable'
p27049
((lp27050
S'int32'
p27051
ag34
a((S'taskHandle'
p27052
(lp27053
S'TaskHandle'
p27054
aNtp27055
(S'data'
p27056
(lp27057
S'bool32'
p27058
aNtp27059
tp27060
tp27061
sS'DAQmxSetCICountEdgesDigFltrMinPulseWidth'
p27062
((lp27063
S'int32'
p27064
ag34
a((S'taskHandle'
p27065
(lp27066
S'TaskHandle'
p27067
aNtp27068
(S'channel'
p27069
(lp27070
S'char'
p27071
a(lp27072
I-1
aaNtp27073
(S'data'
p27074
(lp27075
S'float64'
p27076
aNtp27077
tp27078
tp27079
sS'DAQmxGetAnlgWinStartTrigWhen'
p27080
((lp27081
S'int32'
p27082
ag34
a((S'taskHandle'
p27083
(lp27084
S'TaskHandle'
p27085
aNtp27086
(S'data'
p27087
(lp27088
S'int32'
p27089
ag42
aNtp27090
tp27091
tp27092
sS'DAQmxCreateAIStrainGageChan'
p27093
((lp27094
S'int32'
p27095
ag34
a((S'taskHandle'
p27096
(lp27097
S'TaskHandle'
p27098
aNtp27099
(S'physicalChannel'
p27100
(lp27101
S'char'
p27102
a(lp27103
I-1
aaNtp27104
(S'nameToAssignToChannel'
p27105
(lp27106
S'char'
p27107
a(lp27108
I-1
aaNtp27109
(S'minVal'
p27110
(lp27111
S'float64'
p27112
aNtp27113
(S'maxVal'
p27114
(lp27115
S'float64'
p27116
aNtp27117
(S'units'
p27118
(lp27119
S'int32'
p27120
aNtp27121
(S'strainConfig'
p27122
(lp27123
S'int32'
p27124
aNtp27125
(S'voltageExcitSource'
p27126
(lp27127
S'int32'
p27128
aNtp27129
(S'voltageExcitVal'
p27130
(lp27131
S'float64'
p27132
aNtp27133
(S'gageFactor'
p27134
(lp27135
S'float64'
p27136
aNtp27137
(S'initialBridgeVoltage'
p27138
(lp27139
S'float64'
p27140
aNtp27141
(S'nominalGageResistance'
p27142
(lp27143
S'float64'
p27144
aNtp27145
(S'poissonRatio'
p27146
(lp27147
S'float64'
p27148
aNtp27149
(S'leadWireResistance'
p27150
(lp27151
S'float64'
p27152
aNtp27153
(S'customScaleName'
p27154
(lp27155
S'char'
p27156
a(lp27157
I-1
aaNtp27158
tp27159
tp27160
sS'DAQmxGetDigEdgeStartTrigDigFltrMinPulseWidth'
p27161
((lp27162
S'int32'
p27163
ag34
a((S'taskHandle'
p27164
(lp27165
S'TaskHandle'
p27166
aNtp27167
(S'data'
p27168
(lp27169
S'float64'
p27170
ag42
aNtp27171
tp27172
tp27173
sS'DAQmxResetSampClkTimebaseSrc'
p27174
((lp27175
S'int32'
p27176
ag34
a((S'taskHandle'
p27177
(lp27178
S'TaskHandle'
p27179
aNtp27180
tp27181
tp27182
sS'DAQmxResetCICtrTimebaseDigFltrEnable'
p27183
((lp27184
S'int32'
p27185
ag34
a((S'taskHandle'
p27186
(lp27187
S'TaskHandle'
p27188
aNtp27189
(S'channel'
p27190
(lp27191
S'char'
p27192
a(lp27193
I-1
aaNtp27194
tp27195
tp27196
sS'DAQmxGetSysNIDAQMinorVersion'
p27197
((lp27198
S'int32'
p27199
ag34
a((S'data'
p27200
(lp27201
S'uInt32'
p27202
ag42
aNtp27203
tp27204
tp27205
sS'DAQmxAOSeriesCalAdjust'
p27206
((lp27207
S'int32'
p27208
ag34
a((S'calHandle'
p27209
(lp27210
S'uInt32'
p27211
aNtp27212
(S'referenceVoltage'
p27213
(lp27214
S'float64'
p27215
aNtp27216
tp27217
tp27218
sS'DAQmxSetAOEnhancedImageRejectionEnable'
p27219
((lp27220
S'int32'
p27221
ag34
a((S'taskHandle'
p27222
(lp27223
S'TaskHandle'
p27224
aNtp27225
(S'channel'
p27226
(lp27227
S'char'
p27228
a(lp27229
I-1
aaNtp27230
(S'data'
p27231
(lp27232
S'bool32'
p27233
aNtp27234
tp27235
tp27236
sS'DAQmxSetCIAngEncoderUnits'
p27237
((lp27238
S'int32'
p27239
ag34
a((S'taskHandle'
p27240
(lp27241
S'TaskHandle'
p27242
aNtp27243
(S'channel'
p27244
(lp27245
S'char'
p27246
a(lp27247
I-1
aaNtp27248
(S'data'
p27249
(lp27250
S'int32'
p27251
aNtp27252
tp27253
tp27254
sS'DAQmxGetReadNumChans'
p27255
((lp27256
S'int32'
p27257
ag34
a((S'taskHandle'
p27258
(lp27259
S'TaskHandle'
p27260
aNtp27261
(S'data'
p27262
(lp27263
S'uInt32'
p27264
ag42
aNtp27265
tp27266
tp27267
sS'DAQmxGetCITwoEdgeSepFirstDigFltrEnable'
p27268
((lp27269
S'int32'
p27270
ag34
a((S'taskHandle'
p27271
(lp27272
S'TaskHandle'
p27273
aNtp27274
(S'channel'
p27275
(lp27276
S'char'
p27277
a(lp27278
I-1
aaNtp27279
(S'data'
p27280
(lp27281
S'bool32'
p27282
ag42
aNtp27283
tp27284
tp27285
sS'DAQmxResetAODACRefExtSrc'
p27286
((lp27287
S'int32'
p27288
ag34
a((S'taskHandle'
p27289
(lp27290
S'TaskHandle'
p27291
aNtp27292
(S'channel'
p27293
(lp27294
S'char'
p27295
a(lp27296
I-1
aaNtp27297
tp27298
tp27299
sS'DAQmxSetCOCtrTimebaseDigFltrMinPulseWidth'
p27300
((lp27301
S'int32'
p27302
ag34
a((S'taskHandle'
p27303
(lp27304
S'TaskHandle'
p27305
aNtp27306
(S'channel'
p27307
(lp27308
S'char'
p27309
a(lp27310
I-1
aaNtp27311
(S'data'
p27312
(lp27313
S'float64'
p27314
aNtp27315
tp27316
tp27317
sS'DAQmxSetCIEncoderZIndexEnable'
p27318
((lp27319
S'int32'
p27320
ag34
a((S'taskHandle'
p27321
(lp27322
S'TaskHandle'
p27323
aNtp27324
(S'channel'
p27325
(lp27326
S'char'
p27327
a(lp27328
I-1
aaNtp27329
(S'data'
p27330
(lp27331
S'bool32'
p27332
aNtp27333
tp27334
tp27335
sS'DAQmxSetCOPulseTimeInitialDelay'
p27336
((lp27337
S'int32'
p27338
ag34
a((S'taskHandle'
p27339
(lp27340
S'TaskHandle'
p27341
aNtp27342
(S'channel'
p27343
(lp27344
S'char'
p27345
a(lp27346
I-1
aaNtp27347
(S'data'
p27348
(lp27349
S'float64'
p27350
aNtp27351
tp27352
tp27353
sS'DAQmxSetCIFreqDigFltrTimebaseRate'
p27354
((lp27355
S'int32'
p27356
ag34
a((S'taskHandle'
p27357
(lp27358
S'TaskHandle'
p27359
aNtp27360
(S'channel'
p27361
(lp27362
S'char'
p27363
a(lp27364
I-1
aaNtp27365
(S'data'
p27366
(lp27367
S'float64'
p27368
aNtp27369
tp27370
tp27371
sS'DAQmxSetAIMicrophoneSensitivity'
p27372
((lp27373
S'int32'
p27374
ag34
a((S'taskHandle'
p27375
(lp27376
S'TaskHandle'
p27377
aNtp27378
(S'channel'
p27379
(lp27380
S'char'
p27381
a(lp27382
I-1
aaNtp27383
(S'data'
p27384
(lp27385
S'float64'
p27386
aNtp27387
tp27388
tp27389
sS'DAQmxResetCITwoEdgeSepSecondDigFltrTimebaseSrc'
p27390
((lp27391
S'int32'
p27392
ag34
a((S'taskHandle'
p27393
(lp27394
S'TaskHandle'
p27395
aNtp27396
(S'channel'
p27397
(lp27398
S'char'
p27399
a(lp27400
I-1
aaNtp27401
tp27402
tp27403
sS'DAQmxSetCOPulseDutyCyc'
p27404
((lp27405
S'int32'
p27406
ag34
a((S'taskHandle'
p27407
(lp27408
S'TaskHandle'
p27409
aNtp27410
(S'channel'
p27411
(lp27412
S'char'
p27413
a(lp27414
I-1
aaNtp27415
(S'data'
p27416
(lp27417
S'float64'
p27418
aNtp27419
tp27420
tp27421
sS'DAQmxResetAILowpassCutoffFreq'
p27422
((lp27423
S'int32'
p27424
ag34
a((S'taskHandle'
p27425
(lp27426
S'TaskHandle'
p27427
aNtp27428
(S'channel'
p27429
(lp27430
S'char'
p27431
a(lp27432
I-1
aaNtp27433
tp27434
tp27435
sS'DAQmxResetRefTrigType'
p27436
((lp27437
S'int32'
p27438
ag34
a((S'taskHandle'
p27439
(lp27440
S'TaskHandle'
p27441
aNtp27442
tp27443
tp27444
sS'DAQmxGetCIFreqTerm'
p27445
((lp27446
S'int32'
p27447
ag34
a((S'taskHandle'
p27448
(lp27449
S'TaskHandle'
p27450
aNtp27451
(S'channel'
p27452
(lp27453
S'char'
p27454
a(lp27455
I-1
aaNtp27456
(S'data'
p27457
(lp27458
S'char'
p27459
ag42
aNtp27460
(S'bufferSize'
p27461
(lp27462
S'uInt32'
p27463
aNtp27464
tp27465
tp27466
sS'DAQmxResetCIFreqDigFltrTimebaseSrc'
p27467
((lp27468
S'int32'
p27469
ag34
a((S'taskHandle'
p27470
(lp27471
S'TaskHandle'
p27472
aNtp27473
(S'channel'
p27474
(lp27475
S'char'
p27476
a(lp27477
I-1
aaNtp27478
tp27479
tp27480
sS'DAQmxResetCOPrescaler'
p27481
((lp27482
S'int32'
p27483
ag34
a((S'taskHandle'
p27484
(lp27485
S'TaskHandle'
p27486
aNtp27487
(S'channel'
p27488
(lp27489
S'char'
p27490
a(lp27491
I-1
aaNtp27492
tp27493
tp27494
sS'DAQmxResetCOPulseTerm'
p27495
((lp27496
S'int32'
p27497
ag34
a((S'taskHandle'
p27498
(lp27499
S'TaskHandle'
p27500
aNtp27501
(S'channel'
p27502
(lp27503
S'char'
p27504
a(lp27505
I-1
aaNtp27506
tp27507
tp27508
sS'DAQmxGetScaleDescr'
p27509
((lp27510
S'int32'
p27511
ag34
a((S'scaleName'
p27512
(lp27513
S'char'
p27514
a(lp27515
I-1
aaNtp27516
(S'data'
p27517
(lp27518
S'char'
p27519
ag42
aNtp27520
(S'bufferSize'
p27521
(lp27522
S'uInt32'
p27523
aNtp27524
tp27525
tp27526
sS'DAQmxGetAnlgWinStartTrigCoupling'
p27527
((lp27528
S'int32'
p27529
ag34
a((S'taskHandle'
p27530
(lp27531
S'TaskHandle'
p27532
aNtp27533
(S'data'
p27534
(lp27535
S'int32'
p27536
ag42
aNtp27537
tp27538
tp27539
sS'DAQmxGetAnlgLvlPauseTrigLvl'
p27540
((lp27541
S'int32'
p27542
ag34
a((S'taskHandle'
p27543
(lp27544
S'TaskHandle'
p27545
aNtp27546
(S'data'
p27547
(lp27548
S'float64'
p27549
ag42
aNtp27550
tp27551
tp27552
sS'DAQmxResetCISemiPeriodStartingEdge'
p27553
((lp27554
S'int32'
p27555
ag34
a((S'taskHandle'
p27556
(lp27557
S'TaskHandle'
p27558
aNtp27559
(S'channel'
p27560
(lp27561
S'char'
p27562
a(lp27563
I-1
aaNtp27564
tp27565
tp27566
sS'DAQmxGetSysTasks'
p27567
((lp27568
S'int32'
p27569
ag34
a((S'data'
p27570
(lp27571
S'char'
p27572
ag42
aNtp27573
(S'bufferSize'
p27574
(lp27575
S'uInt32'
p27576
aNtp27577
tp27578
tp27579
sS'DAQmxSetCISemiPeriodDigFltrEnable'
p27580
((lp27581
S'int32'
p27582
ag34
a((S'taskHandle'
p27583
(lp27584
S'TaskHandle'
p27585
aNtp27586
(S'channel'
p27587
(lp27588
S'char'
p27589
a(lp27590
I-1
aaNtp27591
(S'data'
p27592
(lp27593
S'bool32'
p27594
aNtp27595
tp27596
tp27597
sS'DAQmxSetAnlgEdgeStartTrigSrc'
p27598
((lp27599
S'int32'
p27600
ag34
a((S'taskHandle'
p27601
(lp27602
S'TaskHandle'
p27603
aNtp27604
(S'data'
p27605
(lp27606
S'char'
p27607
ag42
aNtp27608
tp27609
tp27610
sS'DAQmxResetBufInputBufSize'
p27611
((lp27612
S'int32'
p27613
ag34
a((S'taskHandle'
p27614
(lp27615
S'TaskHandle'
p27616
aNtp27617
tp27618
tp27619
sS'DAQmxSetCICountEdgesDigFltrTimebaseSrc'
p27620
((lp27621
S'int32'
p27622
ag34
a((S'taskHandle'
p27623
(lp27624
S'TaskHandle'
p27625
aNtp27626
(S'channel'
p27627
(lp27628
S'char'
p27629
a(lp27630
I-1
aaNtp27631
(S'data'
p27632
(lp27633
S'char'
p27634
ag42
aNtp27635
tp27636
tp27637
sS'DAQmxResetReadOverWrite'
p27638
((lp27639
S'int32'
p27640
ag34
a((S'taskHandle'
p27641
(lp27642
S'TaskHandle'
p27643
aNtp27644
tp27645
tp27646
sS'DAQmxGetTaskComplete'
p27647
((lp27648
S'int32'
p27649
ag34
a((S'taskHandle'
p27650
(lp27651
S'TaskHandle'
p27652
aNtp27653
(S'data'
p27654
(lp27655
S'bool32'
p27656
ag42
aNtp27657
tp27658
tp27659
sS'DAQmxGetSysGlobalChans'
p27660
((lp27661
S'int32'
p27662
ag34
a((S'data'
p27663
(lp27664
S'char'
p27665
ag42
aNtp27666
(S'bufferSize'
p27667
(lp27668
S'uInt32'
p27669
aNtp27670
tp27671
tp27672
sS'DAQmxResetCICustomScaleName'
p27673
((lp27674
S'int32'
p27675
ag34
a((S'taskHandle'
p27676
(lp27677
S'TaskHandle'
p27678
aNtp27679
(S'channel'
p27680
(lp27681
S'char'
p27682
a(lp27683
I-1
aaNtp27684
tp27685
tp27686
sS'DAQmxReadDigitalU32'
p27687
((lp27688
S'int32'
p27689
ag34
a((S'taskHandle'
p27690
(lp27691
S'TaskHandle'
p27692
aNtp27693
(S'numSampsPerChan'
p27694
(lp27695
S'int32'
p27696
aNtp27697
(S'timeout'
p27698
(lp27699
S'float64'
p27700
aNtp27701
(S'fillMode'
p27702
(lp27703
S'bool32'
p27704
aNtp27705
(S'readArray'
p27706
(lp27707
S'uInt32'
p27708
a(lp27709
I-1
aaNtp27710
(S'arraySizeInSamps'
p27711
(lp27712
S'uInt32'
p27713
aNtp27714
(S'sampsPerChanRead'
p27715
(lp27716
S'int32'
p27717
ag42
aNtp27718
(S'reserved'
p27719
(lp27720
S'bool32'
p27721
ag42
aNtp27722
tp27723
tp27724
sS'DAQmxGetPhysicalChanTEDSVersionLetter'
p27725
((lp27726
S'int32'
p27727
ag34
a((S'physicalChannel'
p27728
(lp27729
S'char'
p27730
a(lp27731
I-1
aaNtp27732
(S'data'
p27733
(lp27734
S'char'
p27735
ag42
aNtp27736
(S'bufferSize'
p27737
(lp27738
S'uInt32'
p27739
aNtp27740
tp27741
tp27742
sS'DAQmxGetCIPeriodDigFltrMinPulseWidth'
p27743
((lp27744
S'int32'
p27745
ag34
a((S'taskHandle'
p27746
(lp27747
S'TaskHandle'
p27748
aNtp27749
(S'channel'
p27750
(lp27751
S'char'
p27752
a(lp27753
I-1
aaNtp27754
(S'data'
p27755
(lp27756
S'float64'
p27757
ag42
aNtp27758
tp27759
tp27760
sS'DAQmxGetDODataXferReqCond'
p27761
((lp27762
S'int32'
p27763
ag34
a((S'taskHandle'
p27764
(lp27765
S'TaskHandle'
p27766
aNtp27767
(S'channel'
p27768
(lp27769
S'char'
p27770
a(lp27771
I-1
aaNtp27772
(S'data'
p27773
(lp27774
S'int32'
p27775
ag42
aNtp27776
tp27777
tp27778
sS'DAQmxResetDIDataXferReqCond'
p27779
((lp27780
S'int32'
p27781
ag34
a((S'taskHandle'
p27782
(lp27783
S'TaskHandle'
p27784
aNtp27785
(S'channel'
p27786
(lp27787
S'char'
p27788
a(lp27789
I-1
aaNtp27790
tp27791
tp27792
sS'DAQmxReadCounterScalarF64'
p27793
((lp27794
S'int32'
p27795
ag34
a((S'taskHandle'
p27796
(lp27797
S'TaskHandle'
p27798
aNtp27799
(S'timeout'
p27800
(lp27801
S'float64'
p27802
aNtp27803
(S'value'
p27804
(lp27805
S'float64'
p27806
ag42
aNtp27807
(S'reserved'
p27808
(lp27809
S'bool32'
p27810
ag42
aNtp27811
tp27812
tp27813
sS'DAQmxGetAIDataXferCustomThreshold'
p27814
((lp27815
S'int32'
p27816
ag34
a((S'taskHandle'
p27817
(lp27818
S'TaskHandle'
p27819
aNtp27820
(S'channel'
p27821
(lp27822
S'char'
p27823
a(lp27824
I-1
aaNtp27825
(S'data'
p27826
(lp27827
S'uInt32'
p27828
ag42
aNtp27829
tp27830
tp27831
sS'DAQmxResetCITwoEdgeSepSecondDigFltrTimebaseRate'
p27832
((lp27833
S'int32'
p27834
ag34
a((S'taskHandle'
p27835
(lp27836
S'TaskHandle'
p27837
aNtp27838
(S'channel'
p27839
(lp27840
S'char'
p27841
a(lp27842
I-1
aaNtp27843
tp27844
tp27845
sS'DAQmxSetAIMemMapEnable'
p27846
((lp27847
S'int32'
p27848
ag34
a((S'taskHandle'
p27849
(lp27850
S'TaskHandle'
p27851
aNtp27852
(S'channel'
p27853
(lp27854
S'char'
p27855
a(lp27856
I-1
aaNtp27857
(S'data'
p27858
(lp27859
S'bool32'
p27860
aNtp27861
tp27862
tp27863
sS'DAQmxResetCOCtrTimebaseMasterTimebaseDiv'
p27864
((lp27865
S'int32'
p27866
ag34
a((S'taskHandle'
p27867
(lp27868
S'TaskHandle'
p27869
aNtp27870
(S'channel'
p27871
(lp27872
S'char'
p27873
a(lp27874
I-1
aaNtp27875
tp27876
tp27877
sS'DAQmxGetCOPulseIdleState'
p27878
((lp27879
S'int32'
p27880
ag34
a((S'taskHandle'
p27881
(lp27882
S'TaskHandle'
p27883
aNtp27884
(S'channel'
p27885
(lp27886
S'char'
p27887
a(lp27888
I-1
aaNtp27889
(S'data'
p27890
(lp27891
S'int32'
p27892
ag42
aNtp27893
tp27894
tp27895
sS'DAQmxResetCOPulseIdleState'
p27896
((lp27897
S'int32'
p27898
ag34
a((S'taskHandle'
p27899
(lp27900
S'TaskHandle'
p27901
aNtp27902
(S'channel'
p27903
(lp27904
S'char'
p27905
a(lp27906
I-1
aaNtp27907
tp27908
tp27909
sS'DAQmxResetDigPatternStartTrigPattern'
p27910
((lp27911
S'int32'
p27912
ag34
a((S'taskHandle'
p27913
(lp27914
S'TaskHandle'
p27915
aNtp27916
tp27917
tp27918
sS'DAQmxGetAIFreqUnits'
p27919
((lp27920
S'int32'
p27921
ag34
a((S'taskHandle'
p27922
(lp27923
S'TaskHandle'
p27924
aNtp27925
(S'channel'
p27926
(lp27927
S'char'
p27928
a(lp27929
I-1
aaNtp27930
(S'data'
p27931
(lp27932
S'int32'
p27933
ag42
aNtp27934
tp27935
tp27936
sS'DAQmxGetPhysicalChanTEDSSerialNum'
p27937
((lp27938
S'int32'
p27939
ag34
a((S'physicalChannel'
p27940
(lp27941
S'char'
p27942
a(lp27943
I-1
aaNtp27944
(S'data'
p27945
(lp27946
S'uInt32'
p27947
ag42
aNtp27948
tp27949
tp27950
sS'DAQmxGetDigLvlPauseTrigSrc'
p27951
((lp27952
S'int32'
p27953
ag34
a((S'taskHandle'
p27954
(lp27955
S'TaskHandle'
p27956
aNtp27957
(S'data'
p27958
(lp27959
S'char'
p27960
ag42
aNtp27961
(S'bufferSize'
p27962
(lp27963
S'uInt32'
p27964
aNtp27965
tp27966
tp27967
sS'DAQmxSetDigLvlPauseTrigDigFltrEnable'
p27968
((lp27969
S'int32'
p27970
ag34
a((S'taskHandle'
p27971
(lp27972
S'TaskHandle'
p27973
aNtp27974
(S'data'
p27975
(lp27976
S'bool32'
p27977
aNtp27978
tp27979
tp27980
sS'DAQmxGetExtCalLastDateAndTime'
p27981
((lp27982
S'int32'
p27983
ag34
a((S'deviceName'
p27984
(lp27985
S'char'
p27986
a(lp27987
I-1
aaNtp27988
(S'year'
p27989
(lp27990
S'uInt32'
p27991
ag42
aNtp27992
(S'month'
p27993
(lp27994
S'uInt32'
p27995
ag42
aNtp27996
(S'day'
p27997
(lp27998
S'uInt32'
p27999
ag42
aNtp28000
(S'hour'
p28001
(lp28002
S'uInt32'
p28003
ag42
aNtp28004
(S'minute'
p28005
(lp28006
S'uInt32'
p28007
ag42
aNtp28008
tp28009
tp28010
sS'DAQmxGetAODevScalingCoeff'
p28011
((lp28012
S'int32'
p28013
ag34
a((S'taskHandle'
p28014
(lp28015
S'TaskHandle'
p28016
aNtp28017
(S'channel'
p28018
(lp28019
S'char'
p28020
a(lp28021
I-1
aaNtp28022
(S'data'
p28023
(lp28024
S'float64'
p28025
ag42
aNtp28026
(S'arraySizeInSamples'
p28027
(lp28028
S'uInt32'
p28029
aNtp28030
tp28031
tp28032
sS'DAQmxSetAIStrainGagePoissonRatio'
p28033
((lp28034
S'int32'
p28035
ag34
a((S'taskHandle'
p28036
(lp28037
S'TaskHandle'
p28038
aNtp28039
(S'channel'
p28040
(lp28041
S'char'
p28042
a(lp28043
I-1
aaNtp28044
(S'data'
p28045
(lp28046
S'float64'
p28047
aNtp28048
tp28049
tp28050
sS'DAQmxGetCIPeriodDiv'
p28051
((lp28052
S'int32'
p28053
ag34
a((S'taskHandle'
p28054
(lp28055
S'TaskHandle'
p28056
aNtp28057
(S'channel'
p28058
(lp28059
S'char'
p28060
a(lp28061
I-1
aaNtp28062
(S'data'
p28063
(lp28064
S'uInt32'
p28065
ag42
aNtp28066
tp28067
tp28068
sS'DAQmxGetAnlgWinStartTrigTop'
p28069
((lp28070
S'int32'
p28071
ag34
a((S'taskHandle'
p28072
(lp28073
S'TaskHandle'
p28074
aNtp28075
(S'data'
p28076
(lp28077
S'float64'
p28078
ag42
aNtp28079
tp28080
tp28081
sS'DAQmxGetAOOutputImpedance'
p28082
((lp28083
S'int32'
p28084
ag34
a((S'taskHandle'
p28085
(lp28086
S'TaskHandle'
p28087
aNtp28088
(S'channel'
p28089
(lp28090
S'char'
p28091
a(lp28092
I-1
aaNtp28093
(S'data'
p28094
(lp28095
S'float64'
p28096
ag42
aNtp28097
tp28098
tp28099
ssg10
(dp28100
sg12
(dp28101
sg14
(dp28102
S'DAQmx_Dev_DI_Ports'
p28103
S'0x2321'
p28104
sS'DAQmxErrorChannelNotReservedForRouting'
p28105
S'(-200186)'
p28106
sS'DAQmx_AI_RTD_B'
p28107
S'0x1011'
p28108
sS'DAQmx_AI_RTD_C'
p28109
S'0x1013'
p28110
sS'DAQmx_AI_RTD_A'
p28111
S'0x1010'
p28112
sS'DAQmxErrorCantSetWatchdogExpirationOnDigInChan'
p28113
S'(-200651)'
p28114
sS'DAQmx_AIConv_MaxRate'
p28115
S'0x22C9'
p28116
sS'DAQmxErrorSampToWritePerChanNotMultipleOfIncr'
p28117
S'(-200584)'
p28118
sS'DAQmx_SwitchDev_NumRows'
p28119
S'0x18E9'
p28120
sS'DAQmxWarningPALTransferOverread'
p28121
S'(50411)'
p28122
sS'DAQmxErrorWriteNotCompleteBeforeSampClk'
p28123
S'(-209801)'
p28124
sS'DAQmxErrorSpecifiedAttrNotValid'
p28125
S'(-200233)'
p28126
sS'DAQmx_Val_Switch_Topology_2575_2_Wire_95x1_Mux'
p28127
S'"2575/2-Wire 95x1 Mux"'
p28128
sS'DAQmx_AI_TermCfg'
p28129
S'0x1097'
p28130
sS'DAQmxErrorCounterTimebaseRateNotSpecified'
p28131
S'(-200143)'
p28132
sS'DAQmxErrorHWUnexpectedlyPoweredOffAndOn'
p28133
S'(-200194)'
p28134
sS'DAQmx_AI_Excit_Val'
p28135
S'0x17F5'
p28136
sS'DAQmx_Val_FullBridgeIII'
p28137
S'10185'
p28138
sS'DAQmxErrorDigitalWaveformExpected'
p28139
S'(-200094)'
p28140
sS'DAQmx_DigEdge_AdvTrig_Edge'
p28141
S'0x1360'
p28142
sS'DAQmxErrorCAPISyncEventsTaskStateChangeNotAllowedFromDifferentThread'
p28143
S'(-200979)'
p28144
sS'DAQmxErrorInadequateResolutionForTimebaseCal'
p28145
S'(-200721)'
p28146
sS'DAQmxErrorInterpolationRateNotPossible'
p28147
S'(-200270)'
p28148
sS'DAQmxErrorRequestedSignalInversionForRoutingNotPossible'
p28149
S'(-200042)'
p28150
sS'DAQmx_Val_Bits'
p28151
S'10109'
p28152
sS'DAQmxErrorInvalidIdentifierFollowingSeparatorInList'
p28153
S'(-200051)'
p28154
sS'DAQmx_CI_SemiPeriod_DigFltr_TimebaseRate'
p28155
S'0x221C'
p28156
sS'DAQmx_SwitchDev_SettlingTime'
p28157
S'0x1244'
p28158
sS'DAQmxErrorInvalidAsynOpHandle'
p28159
S'(-200616)'
p28160
sS'DAQmx_CI_SemiPeriod_DigFltr_MinPulseWidth'
p28161
S'0x221A'
p28162
sS'DAQmx_AO_DataXferReqCond'
p28163
S'0x183C'
p28164
sS'DAQmxErrorTimebaseCalFailedToConverge'
p28165
S'(-200722)'
p28166
sS'DAQmx_SwitchDev_RelayList'
p28167
S'0x17DC'
p28168
sS'DAQmxErrorSuitableTimebaseNotFoundFrequencyCombo2'
p28169
S'(-200745)'
p28170
sS'DAQmxErrorInvalidGlobalChan'
p28171
S'(-200882)'
p28172
sS'DAQmxErrorSwitchDifferentTopologyWhenScanning'
p28173
S'(-200191)'
p28174
sS'DAQmxErrorPROMOnTEDSContainsBasicTEDSData'
p28175
S'(-200824)'
p28176
sS'DAQmx_Val_LargeRng2Ctr'
p28177
S'10205'
p28178
sS'DAQmxErrorMeasCalAdjustDirectPathOutputImpedance'
p28179
S'(-200507)'
p28180
sS'DAQmxErrorCantAllowConnectDACToGnd'
p28181
S'(-200669)'
p28182
sS'DAQmxErrorPALPhysicalBufferEmpty'
p28183
S'(-50408)'
p28184
sS'DAQmxErrorResourcesInUseForInversionInTask_Routing'
p28185
S'(-89135)'
p28186
sS'DAQmxErrorSampPerChanNotMultOfXferSize'
p28187
S'(-200837)'
p28188
sS'DAQmxErrorHandshakeEventOutputTermNotSupportedGivenTimingType'
p28189
S'(-200915)'
p28190
sS'DAQmxErrorSwitchScanlistTooBig'
p28191
S'(-200201)'
p28192
sS'DAQmxErrorPALTransferTimedOut'
p28193
S'(-50400)'
p28194
sS'DAQmxErrorSensorInvalidCompletionResistance'
p28195
S'(-200163)'
p28196
sS'DAQmxErrorTEDSSensorPhysicalChannelConflict'
p28197
S'(-201053)'
p28198
sS'DAQmxErrorPALBadMode'
p28199
S'(-50006)'
p28200
sS'DAQmxWarningWriteNotCompleteBeforeSampClk'
p28201
S'(209801)'
p28202
sS'DAQmxErrorNoForwardPolyScaleCoeffs'
p28203
S'(-200405)'
p28204
sS'DAQmxErrorPowerupTristateNotSpecdForEntirePort'
p28205
S'(-200653)'
p28206
sS'DAQmxErrorChannelSizeTooBigForPortReadType'
p28207
S'(-200466)'
p28208
sS'DAQmxErrorInvalidAIAttenuation'
p28209
S'(-200412)'
p28210
sS'DAQmxErrorDeviceShutDownDueToHighTemp'
p28211
S'(-200680)'
p28212
sS'DAQmxErrorBufferWithOnDemandSampTiming'
p28213
S'(-200217)'
p28214
sS'DAQmx_CI_TwoEdgeSep_Second_DigFltr_TimebaseSrc'
p28215
S'0x2216'
p28216
sS'DAQmxErrorChanSizeTooBigForU32PortRead'
p28217
S'(-200564)'
p28218
sS'DAQmx_AI_ChanCal_Desc'
p28219
S'0x22A4'
p28220
sS'DAQmxErrorCantSetPropertyTaskNotRunningCommitted'
p28221
S'(-200971)'
p28222
sS'DAQmx_CO_Pulse_Freq'
p28223
S'0x1178'
p28224
sS'DAQmxErrorDataNotAvailable'
p28225
S'(-200005)'
p28226
sS'DAQmx_SwitchChan_WireMode'
p28227
S'0x18E5'
p28228
sS'DAQmx_RealTime_WaitForNextSampClkWaitMode'
p28229
S'0x22EF'
p28230
sS'DAQmxWarningPALHardwareFault'
p28231
S'(50152)'
p28232
sS'DAQmx_Val_RightJustified'
p28233
S'10279'
p28234
sS'DAQmxErrorCouldNotDownloadFirmwareFileMissingOrDamaged'
p28235
S'(-200961)'
p28236
sS'DAQmxErrorCOWritePulseHighTimeOutOfRange'
p28237
S'(-200686)'
p28238
sS'DAQmxErrorWaveformNotInMem'
p28239
S'(-200312)'
p28240
sS'DAQmxErrorTaskNotInDataNeighborhood'
p28241
S'(-200485)'
p28242
sS'DAQmxErrorInterconnectBridgeRouteNotPossible'
p28243
S'(-54011)'
p28244
sS'DAQmx_CI_Timestamp_Units'
p28245
S'0x22B3'
p28246
sS'DAQmxErrorPropertyNotSupportedWhenRefClkSrcNone'
p28247
S'(-200581)'
p28248
sS'DAQmx_SwitchChan_Usage'
p28249
S'0x18E4'
p28250
sS'DAQmx_AI_Thrmstr_A'
p28251
S'0x18C9'
p28252
sS'DAQmx_AI_Thrmstr_B'
p28253
S'0x18CB'
p28254
sS'DAQmx_AI_Thrmstr_C'
p28255
S'0x18CA'
p28256
sS'DAQmx_Task_NumChans'
p28257
S'0x2181'
p28258
sS'DAQmxErrorAnalogTrigChanNotFirstInScanList'
p28259
S'(-200131)'
p28260
sS'DAQmx_Exported_HshkEvent_Pulse_Width'
p28261
S'0x22C1'
p28262
sS'DAQmx_Val_QuarterBridge'
p28263
S'10270'
p28264
sS'DAQmxErrorInvalidLineGrouping'
p28265
S'(-200528)'
p28266
sS'DAQmx_SampClk_Src'
p28267
S'0x1852'
p28268
sS'DAQmxErrorSampClkTimebaseDCMLock'
p28269
S'(-200237)'
p28270
sS'DAQmxErrorEveryNSampsEventAlreadyRegistered'
p28271
S'(-200881)'
p28272
sS'DAQmxWarningPALBadPointer'
p28273
S'(50004)'
p28274
sS'DAQmxErrorNegativeReadSampleNumber'
p28275
S'(-200277)'
p28276
sS'DAQmxErrorCannotReadWhenAutoStartFalseBufSizeZeroAndTaskNotRunning'
p28277
S'(-200834)'
p28278
sS'DAQmx_Val_Position_LVDT'
p28279
S'10352'
p28280
sS'DAQmxErrorChanCalTablePreScaledValsNotSpecd'
p28281
S'(-200936)'
p28282
sS'DAQmx_Val_FullBridgeI'
p28283
S'10183'
p28284
sS'DAQmxWarningPALOSUnsupported'
p28285
S'(50200)'
p28286
sS'DAQmx_CI_TwoEdgeSep_First_DigFltr_TimebaseRate'
p28287
S'0x2212'
p28288
sS'DAQmxWarningPALResourceOwnedBySystem'
p28289
S'(50100)'
p28290
sS'DAQmxErrorScriptNotInMem'
p28291
S'(-200342)'
p28292
sS'DAQmxErrorPALHardwareFault'
p28293
S'(-50152)'
p28294
sS'DAQmxErrorPhysChanMeasType'
p28295
S'(-200431)'
p28296
sS'DAQmxWarningPALValueConflict'
p28297
S'(50000)'
p28298
sS'DAQmxErrorMarkerPositionOutsideSubsetInScript'
p28299
S'(-200034)'
p28300
sS'DAQmx_Val_PulseWidth'
p28301
S'10359'
p28302
sS'DAQmxErrorPLLLock'
p28303
S'(-200245)'
p28304
sS'DAQmx_Val_WaitForHandshakeTriggerAssert'
p28305
S'12550'
p28306
sS'DAQmxErrorSpecdDeviceIsAlreadyOnRTSIBus'
p28307
S'(-201029)'
p28308
sS'DAQmx_Val_Switch_Topology_2576_2_Wire_64x1_Mux'
p28309
S'"2576/2-Wire 64x1 Mux"'
p28310
sS'DAQmxErrorInvalidRefClkSrc'
p28311
S'(-200415)'
p28312
sS'DAQmx_CO_Pulse_Term'
p28313
S'0x18E1'
p28314
sS'DAQmx_DO_DataXferReqCond'
p28315
S'0x2267'
p28316
sS'DAQmx_CI_Freq_DigFltr_TimebaseRate'
p28317
S'0x21EA'
p28318
sS'DAQmxErrorAcqStoppedToPreventIntermediateBufferOverflow'
p28319
S'(-200283)'
p28320
sS'DAQmxErrorWaitForNextSampClkNotSupported'
p28321
S'(-200863)'
p28322
sS'DAQmxErrorDeviceInfoFailedPXIChassisNotIdentified'
p28323
S'(-201059)'
p28324
sS'DAQmxErrorNoAnalogTrigHW'
p28325
S'(-200214)'
p28326
sS'DAQmx_AI_Lowpass_SwitchCap_ExtClkFreq'
p28327
S'0x1885'
p28328
sS'DAQmx_AI_Resistance_Units'
p28329
S'0x0955'
p28330
sS'DAQmxErrorWriteOffsetNotMultOfIncr'
p28331
S'(-200630)'
p28332
sS'DAQmx_Val_Seconds'
p28333
S'10364'
p28334
sS'DAQmxErrorClockMasterForExternalClockNotLongestPipeline'
p28335
S'(-201018)'
p28336
sS'DAQmx_PersistedScale_Author'
p28337
S'0x22D4'
p28338
sS'DAQmx_Dev_IsSimulated'
p28339
S'0x22CA'
p28340
sS'DAQmx_Exported_HshkEvent_Delay'
p28341
S'0x22BC'
p28342
sS'DAQmx_AnlgWin_PauseTrig_Coupling'
p28343
S'0x2237'
p28344
sS'DAQmx_AnlgWin_PauseTrig_Btm'
p28345
S'0x1375'
p28346
sS'DAQmx_Val_Switch_Topology_2585_1_Wire_10x1_Mux'
p28347
S'"2585/1-Wire 10x1 Mux"'
p28348
sS'DAQmxErrorPhysChanOutputType'
p28349
S'(-200432)'
p28350
sS'DAQmxWarningSampValCoercedToMin'
p28351
S'(200022)'
p28352
sS'DAQmxErrorNoReversePolyScaleCoeffs'
p28353
S'(-200406)'
p28354
sS'DAQmxErrorPALComponentAlreadyLoaded'
p28355
S'(-50260)'
p28356
sS'DAQmxErrorPhysChanNotInTask'
p28357
S'(-200649)'
p28358
sS'CVICDECL'
p28359
S'__cdecl'
p28360
sS'DAQmxErrorRefClkSrcNotSupported'
p28361
S'(-200903)'
p28362
sS'DAQmxErrorPALComponentInitializationFault'
p28363
S'(-50258)'
p28364
sS'DAQmx_Exported_HshkEvent_OutputBehavior'
p28365
S'0x22BB'
p28366
sS'DAQmx_Val_IRIGB'
p28367
S'10070'
p28368
sS'DAQmx_Val_Position_LinEncoder'
p28369
S'10361'
p28370
sS'DAQmxErrorNoPatternMatcherAvailable'
p28371
S'(-200382)'
p28372
sS'DAQmx_Read_WaitMode'
p28373
S'0x2232'
p28374
sS'DAQmxErrorResourcesInUseForRoute'
p28375
S'(-200369)'
p28376
sS'DAQmx_Val_Switch_Topology_1166_32_SPDT'
p28377
S'"1166/32-SPDT"'
p28378
sS'DAQmxErrorPALTransferInProgress'
p28379
S'(-50403)'
p28380
sS'DAQmx_CI_Max'
p28381
S'0x189C'
p28382
sS'DAQmxErrorExtCalDateTimeNotDAQmx'
p28383
S'(-200543)'
p28384
sS'DAQmxErrorLineNumIncompatibleWithVideoSignalFormat'
p28385
S'(-200424)'
p28386
sS'DAQmx_Exported_RdyForXferEvent_Lvl_ActiveLvl'
p28387
S'0x22B6'
p28388
sS'DAQmxErrorPALDeviceNotFound'
p28389
S'(-50300)'
p28390
sS'DAQmxErrorMStudioMultiplePhysChansNotSupported'
p28391
S'(-200792)'
p28392
sS'DAQmxErrorADCOverrun'
p28393
S'(-200019)'
p28394
sS'DAQmxErrorCounterTimebaseRateNotFound'
p28395
S'(-200142)'
p28396
sS'DAQmxErrorPALLogicalBufferFull'
p28397
S'(-50407)'
p28398
sS'DAQmx_CO_CtrTimebaseRate'
p28399
S'0x18C2'
p28400
sS'DAQmx_Val_MapRanges'
p28401
S'10448'
p28402
sS'DAQmx_Val_Switch_Topology_2593_Dual_8x1_Mux'
p28403
S'"2593/Dual 8x1 Mux"'
p28404
sS'DAQmx_CI_Encoder_AInputTerm'
p28405
S'0x219D'
p28406
sS'TRUE'
p28407
S'(1L)'
p28408
sS'DAQmxErrorExpectedNumberOfChannelsVerificationFailed'
p28409
S'(-200464)'
p28410
sS'DAQmxErrorInvalidSCCSlotNumberSpecd'
p28411
S'(-201079)'
p28412
sS'DAQmxErrorTrigLineNotFound'
p28413
S'(-200224)'
p28414
sS'DAQmx_SwitchDev_AutoConnAnlgBus'
p28415
S'0x17DA'
p28416
sS'DAQmxErrorExternalTimebaseRateNotknownForRate'
p28417
S'(-200132)'
p28418
sS'DAQmx_Val_CO'
p28419
S'10132'
p28420
sS'DAQmxErrorReadChanTypeMismatch'
p28421
S'(-200525)'
p28422
sS'DAQmx_Val_CI'
p28423
S'10131'
p28424
sS'DAQmx_Val_Switch_Topology_2532_1_Wire_Dual_4x64_Matrix'
p28425
S'"2532/1-Wire Dual 4x64 Matrix"'
p28426
sS'DAQmx_CO_Pulse_DutyCyc'
p28427
S'0x1176'
p28428
sS'DAQmxErrorPALThreadCouldNotRun'
p28429
S'(-50600)'
p28430
sS'DAQmxErrorAddressAlreadyInUse'
p28431
S'(-201031)'
p28432
sS'DAQmxErrorCannotWriteAfterStartWithOnboardMemory'
p28433
S'(-200295)'
p28434
sS'DAQmx_Val_Radians'
p28435
S'10273'
p28436
sS'DAQmxErrorDrivePhaseShiftDCMBecameUnlocked'
p28437
S'(-200390)'
p28438
sS'DAQmxWarningPALLogicalBufferFull'
p28439
S'(50407)'
p28440
sS'DAQmx_DigEdge_ArmStartTrig_DigFltr_MinPulseWidth'
p28441
S'0x222E'
p28442
sS'DAQmxErrorTEDSSensorDataError'
p28443
S'(-200826)'
p28444
sS'DAQmx_Val_Switch_Topology_2584_1_Wire_15x1_Mux'
p28445
S'"2584/1-Wire 15x1 Mux"'
p28446
sS'DAQmxErrorSampleTimebaseDivisorNotSupportedGivenTimingType'
p28447
S'(-200916)'
p28448
sS'DAQmxErrorFewerThan2ScaledValues'
p28449
S'(-200433)'
p28450
sS'DAQmx_SampQuant_SampMode'
p28451
S'0x1300'
p28452
sS'DAQmxErrorResourcesInUseForExportSignalPolarity'
p28453
S'(-200367)'
p28454
sS'DAQmx_CI_CountEdges_Term'
p28455
S'0x18C7'
p28456
sS'DAQmxErrorProductTypeAndProductNumberConflict'
p28457
S'(-201041)'
p28458
sS'DAQmxErrorAnalogTrigChanNotExternal'
p28459
S'(-200711)'
p28460
sS'DAQmxErrorInvalidAIOffsetCalConst'
p28461
S'(-200717)'
p28462
sS'DAQmxErrorCouldNotReserveRequestedTrigLine'
p28463
S'(-200225)'
p28464
sS'DAQmxErrorTimingSrcDoesNotExist'
p28465
S'(-200738)'
p28466
sS'DAQmx_AI_ChanCal_Verif_AcqVals'
p28467
S'0x22A2'
p28468
sS'DAQmx_CI_CtrTimebase_DigFltr_TimebaseRate'
p28469
S'0x2274'
p28470
sS'DAQmx_Val_Switch_Topology_2595_4x1_Mux'
p28471
S'"2595/4x1 Mux"'
p28472
sS'DAQmx_Val_Switch_Topology_1193_32x1_Mux'
p28473
S'"1193/32x1 Mux"'
p28474
sS'DAQmxErrorSendAdvCmpltAfterWaitForTrigInScanlist'
p28475
S'(-200640)'
p28476
sS'DAQmxErrorInvalidTriggerLineInList'
p28477
S'(-200048)'
p28478
sS'DAQmx_CI_AngEncoder_Units'
p28479
S'0x18A6'
p28480
sS'DAQmxErrorLocalRemoteDriverVersionMismatch_Routing'
p28481
S'(-88716)'
p28482
sS'DAQmx_Val_ProgrammedIO'
p28483
S'10264'
p28484
sS'DAQmxErrorTableScaleScaledValsNotSpecd'
p28485
S'(-200348)'
p28486
sS'DAQmx_DI_InvertLines'
p28487
S'0x0793'
p28488
sS'DAQmxErrorLinesReservedForSCXIControl'
p28489
S'(-200159)'
p28490
sS'DAQmx_Exported_SampClk_OutputBehavior'
p28491
S'0x186B'
p28492
sS'DAQmx_Scale_Type'
p28493
S'0x1929'
p28494
sS'CVICALLBACK'
p28495
S'__cdecl'
p28496
sS'DAQmxErrorMStudioCppRemoveEventsBeforeStop'
p28497
S'(-200991)'
p28498
sS'DAQmxWarningPALTransferStopped'
p28499
S'(50404)'
p28500
sS'DAQmx_Val_Switch_Topology_2576_2_Wire_Octal_8x1_Mux'
p28501
S'"2576/2-Wire Octal 8x1 Mux"'
p28502
sS'DAQmx_CO_OutputType'
p28503
S'0x18B5'
p28504
sS'DAQmx_CI_Encoder_BInput_DigFltr_MinPulseWidth'
p28505
S'0x2201'
p28506
sS'DAQmxErrorInvalidCalGain'
p28507
S'(-200749)'
p28508
sS'DAQmxErrorScriptHasInvalidIdentifier'
p28509
S'(-200024)'
p28510
sS'DAQmxErrorCfgTEDSNotSupportedOnRT'
p28511
S'(-200808)'
p28512
sS'DAQmxErrorPALDeviceUnknown'
p28513
S'(-50301)'
p28514
sS'DAQmxErrorInternalAIInputSrcInMultipleChanGroups'
p28515
S'(-200571)'
p28516
sS'DAQmxErrorAcqStoppedToPreventInputBufferOverwrite'
p28517
S'(-200222)'
p28518
sS'DAQmxErrorSpecdSlotAlreadyOccupied'
p28519
S'(-201033)'
p28520
sS'DAQmxErrorInvalidVoltageReadingDuringExtCal'
p28521
S'(-200446)'
p28522
sS'DAQmxErrorWaveformWriteOutOfBounds'
p28523
S'(-200311)'
p28524
sS'DAQmx_CI_CountEdges_DigSync_Enable'
p28525
S'0x21FA'
p28526
sS'DAQmxErrorInvalidRoutingDestinationTerminalName_Routing'
p28527
S'(-89121)'
p28528
sS'DAQmxWarningUserDefinedInfoTooLong'
p28529
S'(200025)'
p28530
sS'DAQmxErrorDuplicatedChannel'
p28531
S'(-200003)'
p28532
sS'DAQmxErrorTooManyInstructionsInLoopInScript'
p28533
S'(-201016)'
p28534
sS'DAQmx_Val_Pulse'
p28535
S'10265'
p28536
sS'DAQmx_CI_Encoder_BInput_DigFltr_TimebaseSrc'
p28537
S'0x2202'
p28538
sS'DAQmx_DI_DataXferMech'
p28539
S'0x2263'
p28540
sS'DAQmx_Read_ReadAllAvailSamp'
p28541
S'0x1215'
p28542
sS'DAQmxErrorDAQmxCantUseStringDueToUnknownChar'
p28543
S'(-200811)'
p28544
sS'DAQmxErrorOddTotalNumSampsToWrite'
p28545
S'(-200692)'
p28546
sS'DAQmxErrorSampTbRateSampTbSrcMismatch'
p28547
S'(-200308)'
p28548
sS'DAQmxErrorCIHWTimedSinglePointNotSupportedForMeasType'
p28549
S'(-200998)'
p28550
sS'DAQmxErrorInvalidChanName'
p28551
S'(-200461)'
p28552
sS'DAQmx_DO_NumLines'
p28553
S'0x2179'
p28554
sS'DAQmx_Val_TEDS_Sensor'
p28555
S'12531'
p28556
sS'DAQmxErrorCppCantRemoveEventHandlerTwice'
p28557
S'(-200589)'
p28558
sS'DAQmxErrorPALFileSeekFault'
p28559
S'(-50206)'
p28560
sS'DAQmx_Val_ALowBHigh'
p28561
S'10042'
p28562
sS'DAQmx_Task_Name'
p28563
S'0x1276'
p28564
sS'DAQmx_DigLvl_PauseTrig_DigFltr_TimebaseRate'
p28565
S'0x222B'
p28566
sS'DAQmxErrorWriteFailedMultipleCOOutputTypes'
p28567
S'(-200829)'
p28568
sS'DAQmx_CI_Period_MeasTime'
p28569
S'0x192D'
p28570
sS'DAQmx_Exported_HshkEvent_Interlocked_AssertedLvl'
p28571
S'0x22BD'
p28572
sS'DAQmxErrorConnectionInScanlistMustWaitForTrig'
p28573
S'(-200636)'
p28574
sS'DAQmxErrorPALResourceInitialized'
p28575
S'(-50105)'
p28576
sS'DAQmxErrorPALBadToken'
p28577
S'(-50020)'
p28578
sS'DAQmxErrorCannotTristateBusyTerm_Routing'
p28579
S'(-89127)'
p28580
sS'DAQmx_DigEdge_ArmStartTrig_DigFltr_Enable'
p28581
S'0x222D'
p28582
sS'DAQmxErrorDevInUnidentifiedPXIChassis'
p28583
S'(-200862)'
p28584
sS'DAQmxErrorDDCClkOutDCMBecameUnlocked'
p28585
S'(-200244)'
p28586
sS'DAQmx_SwitchDev_NumRelays'
p28587
S'0x18E6'
p28588
sS'DAQmxErrorInvalidAttentuationBasedOnMinMax'
p28589
S'(-200321)'
p28590
sS'DAQmxErrorPALThreadStackSizeNotSupported'
p28591
S'(-50603)'
p28592
sS'DAQmxErrorCannotTristateTerm'
p28593
S'(-200253)'
p28594
sS'DAQmxWarningPALResourceReserved'
p28595
S'(50103)'
p28596
sS'DAQmxErrorChanNamesNotSpecdInCfgFile'
p28597
S'(-201083)'
p28598
sS'DAQmx_CI_TwoEdgeSep_Second_DigFltr_Enable'
p28599
S'0x2214'
p28600
sS'DAQmx_Scale_Map_ScaledMin'
p28601
S'0x1230'
p28602
sS'DAQmxErrorSampClkRateAndDivCombo'
p28603
S'(-200273)'
p28604
sS'DAQmxErrorCannotWriteWhenAutoStartFalseAndTaskNotRunningOrCommitted'
p28605
S'(-200472)'
p28606
sS'DAQmxErrorChanVersionNew'
p28607
S'(-200469)'
p28608
sS'DAQmxWarningPALResourceBusy'
p28609
S'(50106)'
p28610
sS'FALSE'
p28611
S'(0L)'
p28612
sS'DAQmxErrorCounterInputPauseTriggerAndSampleClockInvalid'
p28613
S'(-200145)'
p28614
sS'DAQmxErrorInvalidAttributeName'
p28615
S'(-201086)'
p28616
sS'DAQmxErrorCannotHaveTimedLoopAndDAQmxSignalEventsInSameTask'
p28617
S'(-200948)'
p28618
sS'DAQmx_MasterTimebase_Rate'
p28619
S'0x1495'
p28620
sS'DAQmx_Val_WriteToEEPROM'
p28621
S'12538'
p28622
sS'DAQmx_Val_Pt3851'
p28623
S'10071'
p28624
sS'DAQmxErrorInvalidLocalChanName'
p28625
S'(-201069)'
p28626
sS'DAQmx_AI_ACExcit_Freq'
p28627
S'0x0101'
p28628
sS'DAQmxErrorClkDoublerDCMBecameUnlocked'
p28629
S'(-200242)'
p28630
sS'DAQmxErrorDeviceIsNotAValidSwitch'
p28631
S'(-200069)'
p28632
sS'DAQmxErrorInvalidSectionIdentifier'
p28633
S'(-201078)'
p28634
sS'DAQmx_Read_OverWrite'
p28635
S'0x1211'
p28636
sS'DAQmxErrorTimingSrcTaskStartedBeforeTimedLoop'
p28637
S'(-200740)'
p28638
sS'DAQmxErrorDLLBecameUnlocked'
p28639
S'(-200551)'
p28640
sS'DAQmx_PhysicalChanName'
p28641
S'0x18F5'
p28642
sS'DAQmx_Val_Switch_Topology_2532_2_Wire_16x16_Matrix'
p28643
S'"2532/2-Wire 16x16 Matrix"'
p28644
sS'DAQmxErrorStreamDCMBecameUnlocked'
p28645
S'(-200314)'
p28646
sS'DAQmxErrorDifferentRawDataCompression'
p28647
S'(-200959)'
p28648
sS'DAQmx_Val_StartTrigger'
p28649
S'12491'
p28650
sS'DAQmx_AnlgWin_PauseTrig_Src'
p28651
S'0x1373'
p28652
sS'DAQmx_Val_S_Type_TC'
p28653
S'10085'
p28654
sS'DAQmxErrorMeasCalAdjustDirectPathGain'
p28655
S'(-200505)'
p28656
sS'DAQmxErrorProductOfAOMinAndGainTooSmall'
p28657
S'(-200271)'
p28658
sS'DAQmxErrorChanCalExpirationDateNotSet'
p28659
S'(-200933)'
p28660
sS'DAQmxErrorExternalSampClkAndRefClkThruSameTerm'
p28661
S'(-200276)'
p28662
sS'DAQmxErrorPortConfiguredForStaticDigitalOps'
p28663
S'(-200119)'
p28664
sS'DAQmx_Val_R_Type_TC'
p28665
S'10082'
p28666
sS'DAQmx_Read_OverloadedChansExist'
p28667
S'0x2174'
p28668
sS'DAQmxErrorRepeatLoopNestingTooDeepInScript'
p28669
S'(-200035)'
p28670
sS'DAQmxErrorOutputCantStartChangedRegenerationMode'
p28671
S'(-200568)'
p28672
sS'DAQmxErrorInvalidNumSampsToWrite'
p28673
S'(-200622)'
p28674
sS'DAQmxErrorRecordNotAvailable'
p28675
S'(-200007)'
p28676
sS'_NI_uInt8_DEFINED_'
p28677
S''
p28678
sS'DAQmx_Scale_Map_PreScaledMax'
p28679
S'0x1231'
p28680
sS'DAQmxErrorCantSaveChanWithoutReplace'
p28681
S'(-200483)'
p28682
sS'DAQmxErrorPALBadReadCount'
p28683
S'(-50011)'
p28684
sS'DAQmx_CI_Period_DigFltr_MinPulseWidth'
p28685
S'0x21ED'
p28686
sS'DAQmx_Val_Switch_Topology_1127_Independent'
p28687
S'"1127/Independent"'
p28688
sS'DAQmxErrorInputBoardClkDCMBecameUnlocked'
p28689
S'(-200387)'
p28690
sS'DAQmxErrorHiddenChanMissingInChansPropertyInCfgFile'
p28691
S'(-201084)'
p28692
sS'DAQmx_PersistedScale_AllowInteractiveEditing'
p28693
S'0x22D5'
p28694
sS'DAQmxErrorCannotConnectSrcChans'
p28695
S'(-200188)'
p28696
sS'DAQmx_Val_CurrWritePos'
p28697
S'10430'
p28698
sS'DAQmx_Val_WaitInfinitely'
p28699
S'-1.0'
p28700
sS'DAQmxErrorSelfCalTemperatureNotDAQmx'
p28701
S'(-200542)'
p28702
sS'DAQmxErrorInvalidSectionName'
p28703
S'(-201077)'
p28704
sS'DAQmxErrorChanIndexInvalid'
p28705
S'(-200606)'
p28706
sS'DAQmx_Val_ActiveHigh'
p28707
S'10095'
p28708
sS'DAQmxErrorWatchdogExpirationTristateNotSpecdForEntirePort'
p28709
S'(-200654)'
p28710
sS'DAQmx_AI_ACExcit_WireMode'
p28711
S'0x18CD'
p28712
sS'DAQmxErrorMeasCalAdjustCalADC'
p28713
S'(-200509)'
p28714
sS'DAQmxErrorStrobePhaseShiftDCMBecameUnlocked'
p28715
S'(-200391)'
p28716
sS'DAQmx_DigLvl_PauseTrig_When'
p28717
S'0x1380'
p28718
sS'DAQmx_CI_Encoder_BInput_DigFltr_Enable'
p28719
S'0x2200'
p28720
sS'DAQmx_Val_AIConvertClock'
p28721
S'12484'
p28722
sS'DAQmx_Read_OverloadedChans'
p28723
S'0x2175'
p28724
sS'DAQmxErrorCollectionDoesNotMatchChanType'
p28725
S'(-200569)'
p28726
sS'DAQmxErrorInvalidRoutingSourceTerminalName_Routing'
p28727
S'(-89120)'
p28728
sS'DAQmx_SyncPulse_SyncTime'
p28729
S'0x223E'
p28730
sS'DAQmxErrorActiveChanTooManyLinesSpecdWhenGettingPrpty'
p28731
S'(-200643)'
p28732
sS'DAQmxErrorReferenceVoltageInvalid'
p28733
S'(-200153)'
p28734
sS'DAQmx_ChanIsGlobal'
p28735
S'0x2304'
p28736
sS'DAQmxErrorWriteFailedBecauseWatchdogExpired'
p28737
S'(-200678)'
p28738
sS'DAQmx_Scale_Lin_Slope'
p28739
S'0x1227'
p28740
sS'DAQmx_Val_OverwriteUnreadSamps'
p28741
S'10252'
p28742
sS'DAQmxErrorCalTempNotSupported'
p28743
S'(-200338)'
p28744
sS'DAQmxErrorUnsupportedTrigTypeSendsSWTrig'
p28745
S'(-200373)'
p28746
sS'DAQmxErrorInvalidLoopIterationsInScript'
p28747
S'(-200036)'
p28748
sS'DAQmxErrorSelfCalConstsInvalid'
p28749
S'(-200549)'
p28750
sS'DAQmxWarningTimestampCounterRolledOver'
p28751
S'(200003)'
p28752
sS'DAQmxErrorInversionNotSupportedByHW'
p28753
S'(-200363)'
p28754
sS'DAQmxErrorSCXISerialCommunication'
p28755
S'(-200015)'
p28756
sS'DAQmx_Val_Yield'
p28757
S'12525'
p28758
sS'DAQmxErrorCabledModuleCannotRouteSSH'
p28759
S'(-200320)'
p28760
sS'___nidaqmx_h___'
p28761
g28678
sS'DAQmx_Val_Switch_Topology_2530_1_Wire_Quad_32x1_Mux'
p28762
S'"2530/1-Wire Quad 32x1 Mux"'
p28763
sS'DAQmxErrorNoInputOnPortCfgdForWatchdogOutput'
p28764
S'(-200666)'
p28765
sS'DAQmxErrorSampClkTimingTypeWhenTristateIsFalse'
p28766
S'(-200839)'
p28767
sS'DAQmxErrorInvalidSignalTypeExportSignal'
p28768
S'(-200374)'
p28769
sS'DAQmxErrorOneChanReadForMultiChanTask'
p28770
S'(-200523)'
p28771
sS'DAQmxErrorNoAcqStarted'
p28772
S'(-200286)'
p28773
sS'DAQmxErrorDuplicatePropertyInObject'
p28774
S'(-201055)'
p28775
sS'DAQmx_Val_PathStatus_ChannelReservedForRouting'
p28776
S'10436'
p28777
sS'DAQmx_Val_DoNotInvertPolarity'
p28778
S'0'
p28779
sS'DAQmxErrorInvalidSwitchChan'
p28780
S'(-200181)'
p28781
sS'DAQmxErrorSampleValueOutOfRange'
p28782
S'(-200490)'
p28783
sS'DAQmx_Val_Switch_Topology_2530_1_Wire_128x1_Mux'
p28784
S'"2530/1-Wire 128x1 Mux"'
p28785
sS'DAQmx_Val_Ohms'
p28786
S'10384'
p28787
sS'DAQmxErrorActiveChanNotSpecdWhenGetting1LinePrpty'
p28788
S'(-200642)'
p28789
sS'DAQmxErrorDigFilterIntervalAlreadyCfgd'
p28790
S'(-200645)'
p28791
sS'DAQmx_Val_Switch_Topology_1128_Independent'
p28792
S'"1128/Independent"'
p28793
sS'DAQmxErrorMultipleDevIDsPerChassisSpecifiedInList'
p28794
S'(-200210)'
p28795
sS'DAQmxErrorWriteNoOutputChansInTask'
p28796
S'(-200459)'
p28797
sS'DAQmxErrorUnexpectedIDFollowingSwitchChanName'
p28798
S'(-200532)'
p28799
sS'DAQmxErrorSessionCorruptedByDLLReload'
p28800
S'(-201095)'
p28801
sS'DAQmxWarningPossiblyInvalidCTRSampsInFiniteDMAAcq'
p28802
S'(200028)'
p28803
sS'DAQmx_Val_Pulse_Time'
p28804
S'10269'
p28805
sS'DAQmx_Dev_ProductType'
p28806
S'0x0631'
p28807
sS'DAQmxErrorTEDSMultipleCalTemplatesNotSupported'
p28808
S'(-200755)'
p28809
sS'DAQmx_SampClk_DigFltr_TimebaseRate'
p28810
S'0x2221'
p28811
sS'DAQmxErrorDigFilterEnabledMinPulseWidthNotCfg'
p28812
S'(-200771)'
p28813
sS'DAQmx_Val_20MHzTimebase'
p28814
S'12537'
p28815
sS'DAQmx_AI_DataXferMech'
p28816
S'0x1821'
p28817
sS'DAQmxWarningPALPhysicalBufferFull'
p28818
S'(50409)'
p28819
sS'DAQmx_Write_NumChans'
p28820
S'0x217E'
p28821
sS'DAQmx_Val_DC'
p28822
S'10050'
p28823
sS'DAQmx_Val_DI'
p28824
S'10151'
p28825
sS'DAQmx_Val_FromTEDS'
p28826
S'12516'
p28827
sS'DAQmx_AI_Freq_ThreshVoltage'
p28828
S'0x0815'
p28829
sS'DAQmx_AI_InputSrc'
p28830
S'0x2198'
p28831
sS'DAQmx_Val_DO'
p28832
S'10153'
p28833
sS'DAQmxErrorSampRateTooLow'
p28834
S'(-200331)'
p28835
sS'DAQmxErrorPFI0UsedForAnalogAndDigitalSrc'
p28836
S'(-200330)'
p28837
sS'DAQmxErrorBufferedOperationsNotSupportedOnSelectedLines'
p28838
S'(-201062)'
p28839
sS'DAQmx_CI_Encoder_DecodingType'
p28840
S'0x21E6'
p28841
sS'DAQmxErrorInvalidTimeoutVal'
p28842
S'(-200453)'
p28843
sS'DAQmxErrorMeasuredBridgeOffsetTooHigh'
p28844
S'(-200788)'
p28845
sS'DAQmxErrorInvalidNumberInRepeatStatementInList'
p28846
S'(-200049)'
p28847
sS'DAQmxErrorMStudioNoForwardPolyScaleCoeffs'
p28848
S'(-200783)'
p28849
sS'DAQmxErrorValueNotInSet'
p28850
S'(-54022)'
p28851
sS'DAQmx_Val_Switch_Topology_2564_16_SPST'
p28852
S'"2564/16-SPST"'
p28853
sS'DAQmx_RealTime_WriteRecoveryMode'
p28854
S'0x231A'
p28855
sS'DAQmxErrorPALPhysicalBufferFull'
p28856
S'(-50409)'
p28857
sS'DAQmxWarningInvalidCalConstValueForAO'
p28858
S'(200042)'
p28859
sS'DAQmxErrorPropertyNotSupportedNotInputTask'
p28860
S'(-200457)'
p28861
sS'DAQmxWarningInvalidCalConstValueForAI'
p28862
S'(200041)'
p28863
sS'DAQmxErrorPropertyValNotSupportedByHW'
p28864
S'(-200355)'
p28865
sS'DAQmx_AI_Resolution'
p28866
S'0x1765'
p28867
sS'DAQmxErrorInvalidSCCModuleForSlotSpecd'
p28868
S'(-201080)'
p28869
sS'DAQmxErrorInvalidChannelNameInList'
p28870
S'(-200050)'
p28871
sS'DAQmx_Val_InvertPolarity'
p28872
S'1'
p28873
sS'DAQmxErrorDifferentPrptyValsNotSupportedOnDev'
p28874
S'(-200629)'
p28875
sS'DAQmx_CI_Freq_Units'
p28876
S'0x18A1'
p28877
sS'DAQmxErrorInvalidDeviceIDInList'
p28878
S'(-200207)'
p28879
sS'DAQmxErrorIncorrectReadFunction'
p28880
S'(-200100)'
p28881
sS'DAQmxWarningPALBadCount'
p28882
S'(50008)'
p28883
sS'DAQmxErrorPROMOnTEDSAlreadyWritten'
p28884
S'(-200823)'
p28885
sS'DAQmxErrorPALThreadAlreadyDead'
p28886
S'(-50604)'
p28887
sS'DAQmx_AI_RTD_Type'
p28888
S'0x1032'
p28889
sS'DAQmxErrorWfmNameSameAsScriptName'
p28890
S'(-200634)'
p28891
sS'DAQmx_Val_Position_RVDT'
p28892
S'10353'
p28893
sS'DAQmx_Exported_ChangeDetectEvent_OutputTerm'
p28894
S'0x2197'
p28895
sS'DAQmx_Val_AnlgWin'
p28896
S'10103'
p28897
sS'DAQmx_Val_PatternDoesNotMatch'
p28898
S'10253'
p28899
sS'DAQmxErrorInvalidTEDSPhysChanNotAI'
p28900
S'(-200969)'
p28901
sS'DAQmx_Val_HWTimedSinglePoint'
p28902
S'12522'
p28903
sS'DAQmxErrorOperationNotPermittedWhileScanning'
p28904
S'(-200176)'
p28905
sS'DAQmx_Val_AIHoldCmpltEvent'
p28906
S'12493'
p28907
sS'DAQmxErrorAIMinTooLarge'
p28908
S'(-200577)'
p28909
sS'DAQmxErrorSampClkRateMustBeSpecd'
p28910
S'(-201087)'
p28911
sS'DAQmx_DigPattern_StartTrig_When'
p28912
S'0x1411'
p28913
sS'DAQmxErrorRoutingHardwareBusy_Routing'
p28914
S'(-89123)'
p28915
sS'DAQmxWarningSampClkRateTooLow'
p28916
S'(200027)'
p28917
sS'DAQmx_AO_Voltage_Units'
p28918
S'0x1184'
p28919
sS'DAQmx_Val_Switch_Topology_2530_4_Wire_32x1_Mux'
p28920
S'"2530/4-Wire 32x1 Mux"'
p28921
sS'DAQmxErrorLabVIEWEmptyTaskOrChans'
p28922
S'(-200429)'
p28923
sS'DAQmxErrorExportTwoSignalsOnSameTerminal'
p28924
S'(-200607)'
p28925
sS'DAQmx_SampClk_Timebase_Src'
p28926
S'0x1308'
p28927
sS'DAQmx_Val_Switch_Topology_2527_4_Wire_16x1_Mux'
p28928
S'"2527/4-Wire 16x1 Mux"'
p28929
sS'DAQmxErrorCabledModuleNotCapableOfRoutingAI'
p28930
S'(-200151)'
p28931
sS'DAQmx_SampClk_ActiveEdge'
p28932
S'0x1301'
p28933
sS'DAQmxErrorRoutingSrcTermPXIStarInSlot2'
p28934
S'(-200700)'
p28935
sS'DAQmxWarningPropertyVersionNew'
p28936
S'(200024)'
p28937
sS'DAQmxErrorMaxSoundPressureMicSensitivitRelatedAIPropertiesNotSupportedByDev'
p28938
S'(-200861)'
p28939
sS'DAQmxErrorInvalidAOOffsetCalConst'
p28940
S'(-200719)'
p28941
sS'DAQmx_PhysicalChan_TEDS_SerialNum'
p28942
S'0x21DC'
p28943
sS'DAQmx_Val_Switch_Topology_1130_2_Wire_128x1_Mux'
p28944
S'"1130/2-Wire 128x1 Mux"'
p28945
sS'DAQmx_Buf_Input_OnbrdBufSize'
p28946
S'0x230A'
p28947
sS'DAQmx_Val_External'
p28948
S'10167'
p28949
sS'DAQmx_CI_Period_StartingEdge'
p28950
S'0x0852'
p28951
sS'DAQmxErrorResourcesInUseForRouteInTask_Routing'
p28952
S'(-89138)'
p28953
sS'DAQmxErrorPhysicalChannelNotSpecified'
p28954
S'(-200099)'
p28955
sS'DAQmxErrorWriteDataTypeTooSmall'
p28956
S'(-200790)'
p28957
sS'DAQmx_Val_Switch_Topology_2576_2_Wire_Dual_32x1_Mux'
p28958
S'"2576/2-Wire Dual 32x1 Mux"'
p28959
sS'DAQmxErrorAOMinMaxNotInGainRange'
p28960
S'(-200760)'
p28961
sS'DAQmxErrorEmptyStringTermNameNotSupported'
p28962
S'(-200797)'
p28963
sS'DAQmxErrorIfElseBlockNotAllowedInFiniteRepeatLoopInScript'
p28964
S'(-201014)'
p28965
sS'DAQmxErrorWriteWhenTaskNotRunningCOTime'
p28966
S'(-200874)'
p28967
sS'DAQmx_ReadWaitMode'
p28968
S'0x2232'
p28969
sS'DAQmx_Sys_Scales'
p28970
S'0x1266'
p28971
sS'DAQmxErrorPALTransferStopped'
p28972
S'(-50404)'
p28973
sS'DAQmx_AnlgLvl_PauseTrig_When'
p28974
S'0x1371'
p28975
sS'DAQmx_Val_BurstHandshake'
p28976
S'12548'
p28977
sS'_NI_int8_DEFINED_'
p28978
g28678
sS'DAQmx_CI_Encoder_AInput_DigFltr_MinPulseWidth'
p28979
S'0x21FC'
p28980
sS'DAQmxErrorDSFStopClock'
p28981
S'(-200632)'
p28982
sS'DAQmxErrorDevAbsentOrUnavailable_Routing'
p28983
S'(-89130)'
p28984
sS'DAQmx_Read_NumChans'
p28985
S'0x217B'
p28986
sS'DAQmx_Val_Switch_Topology_1192_8_SPDT'
p28987
S'"1192/8-SPDT"'
p28988
sS'DAQmx_Val_Software'
p28989
S'10292'
p28990
sS'DAQmx_DigEdge_StartTrig_DigFltr_TimebaseRate'
p28991
S'0x2226'
p28992
sS'DAQmxErrorInvalidEscapeCharacterInString'
p28993
S'(-201068)'
p28994
sS'DAQmxErrorCOWriteFreqOutOfRange'
p28995
S'(-200685)'
p28996
sS'DAQmxErrorWriteToTEDSNotSupportedOnRT'
p28997
S'(-200828)'
p28998
sS'DAQmxErrorAutoStartReadNotAllowedEventRegistered'
p28999
S'(-200984)'
p29000
sS'DAQmx_Val_Linear'
p29001
S'10447'
p29002
sS'DAQmx_CI_Period_Units'
p29003
S'0x18A3'
p29004
sS'DAQmxErrorPALComponentNeverLoaded'
p29005
S'(-50261)'
p29006
sS'DAQmx_Dev_CO_PhysicalChans'
p29007
S'0x2325'
p29008
sS'DAQmx_AI_Lowpass_CutoffFreq'
p29009
S'0x1803'
p29010
sS'DAQmx_Val_CurrReadPos'
p29011
S'10425'
p29012
sS'DAQmx_CI_Period_Term'
p29013
S'0x18A4'
p29014
sS'DAQmx_AO_DevScalingCoeff'
p29015
S'0x1931'
p29016
sS'DAQmxErrorIncapableSCCDigitizingDeviceSpecd'
p29017
S'(-201049)'
p29018
sS'DAQmxErrorRoutingDestTermPXIStarInSlot16AndAbove_Routing'
p29019
S'(-89145)'
p29020
sS'DAQmx_CI_PulseWidth_DigFltr_TimebaseSrc'
p29021
S'0x220C'
p29022
sS'DAQmx_Val_Switch_Topology_2530_2_Wire_Quad_16x1_Mux'
p29023
S'"2530/2-Wire Quad 16x1 Mux"'
p29024
sS'DAQmx_Val_Switch_Topology_1128_1_Wire_64x1_Mux'
p29025
S'"1128/1-Wire 64x1 Mux"'
p29026
sS'DAQmxErrorAIMaxNotSpecified'
p29027
S'(-200695)'
p29028
sS'DAQmxErrorNoSyncPulseAnotherTaskRunning'
p29029
S'(-200761)'
p29030
sS'DAQmx_SwitchChan_MaxDCCarryPwr'
p29031
S'0x0643'
p29032
sS'DAQmxErrorRequestedSignalInversionForRoutingNotPossible_Routing'
p29033
S'(-89122)'
p29034
sS'DAQmxErrorInvalidSubsetLengthBeforeIfElseBlockInScript'
p29035
S'(-201009)'
p29036
sS'DAQmx_AI_Rng_Low'
p29037
S'0x1816'
p29038
sS'DAQmx_Val_Switch_Topology_1129_2_Wire_16x16_Matrix'
p29039
S'"1129/2-Wire 16x16 Matrix"'
p29040
sS'DAQmx_CI_Count'
p29041
S'0x0148'
p29042
sS'DAQmx_Val_NoBridge'
p29043
S'10228'
p29044
sS'DAQmx_CI_TwoEdgeSep_First_DigFltr_TimebaseSrc'
p29045
S'0x2211'
p29046
sS'DAQmx_Val_Save_Overwrite'
p29047
S'(1<<0)'
p29048
sS'DAQmx_Val_USBbulk'
p29049
S'12590'
p29050
sS'DAQmx_AnlgEdge_StartTrig_Slope'
p29051
S'0x1397'
p29052
sS'DAQmxErrorEveryNSampsAcqIntoBufferNotForOutput'
p29053
S'(-200964)'
p29054
sS'DAQmx_Val_Switch_Topology_1193_Quad_4x1_Terminated_Mux'
p29055
S'"1193/Quad 4x1 Terminated Mux"'
p29056
sS'DAQmxErrorCouldNotReserveLinesForSCXIControl'
p29057
S'(-200158)'
p29058
sS'DAQmx_Exported_CtrOutEvent_OutputTerm'
p29059
S'0x1717'
p29060
sS'DAQmx_Exported_SyncPulseEvent_OutputTerm'
p29061
S'0x223C'
p29062
sS'DAQmxErrorRangeSyntaxNumberTooBig'
p29063
S'(-200605)'
p29064
sS'DAQmx_AI_Excit_VoltageOrCurrent'
p29065
S'0x17F6'
p29066
sS'DAQmx_Val_USB'
p29067
S'12586'
p29068
sS'DAQmx_DigEdge_RefTrig_Src'
p29069
S'0x1434'
p29070
sS'DAQmxErrorCantGetPropertyTaskNotRunning'
p29071
S'(-200973)'
p29072
sS'DAQmxErrorCannotSelfCalDuringExtCal'
p29073
S'(-200522)'
p29074
sS'DAQmxErrorPropertyConflictsWithScale'
p29075
S'(-201061)'
p29076
sS'DAQmxErrorInvalidIdentifierInListFollowingDeviceID'
p29077
S'(-200047)'
p29078
sS'DAQmxErrorPALTransferOverwritten'
p29079
S'(-50410)'
p29080
sS'DAQmx_AO_Max'
p29081
S'0x1186'
p29082
sS'DAQmx_DigLvl_PauseTrig_DigFltr_Enable'
p29083
S'0x2228'
p29084
sS'DAQmxErrorCalibrationFailed'
p29085
S'(-200157)'
p29086
sS'DAQmxErrorInvalidAOChanOrder'
p29087
S'(-200219)'
p29088
sS'DAQmxErrorInvalidCalLowPassCutoffFreq'
p29089
S'(-200857)'
p29090
sS'DAQmxErrorInvalidGainBasedOnMinMax'
p29091
S'(-200258)'
p29092
sS'DAQmxErrorInvalidAIChanOrder'
p29093
S'(-200618)'
p29094
sS'DAQmx_Val_Switch_Topology_2501_2_Wire_4x6_Matrix'
p29095
S'"2501/2-Wire 4x6 Matrix"'
p29096
sS'DAQmx_Val_RisingSlope'
p29097
S'10280'
p29098
sS'DAQmxErrorPALComponentCircularDependency'
p29099
S'(-50259)'
p29100
sS'DAQmxErrorDigFilterIntervalNotEqualForLines'
p29101
S'(-200646)'
p29102
sS'DAQmx_DO_InvertLines'
p29103
S'0x1133'
p29104
sS'DAQmxErrorMultipleActivePhysChansNotSupported'
p29105
S'(-200752)'
p29106
sS'DAQmxErrorInvalidRangeOfObjectsSyntaxInString'
p29107
S'(-200498)'
p29108
sS'DAQmxWarningCOPrevDAQmxWriteSettingsOverwrittenForHWTimedSinglePoint'
p29109
S'(200037)'
p29110
sS'DAQmxErrorNoPathToDisconnect'
p29111
S'(-200182)'
p29112
sS'DAQmxErrorEEPROMDataInvalid'
p29113
S'(-200152)'
p29114
sS'DAQmx_Val_Switch_Topology_1191_Quad_4x1_Mux'
p29115
S'"1191/Quad 4x1 Mux"'
p29116
sS'DAQmx_Dev_PXI_SlotNum'
p29117
S'0x232A'
p29118
sS'DAQmx_AO_DAC_Offset_ExtSrc'
p29119
S'0x2254'
p29120
sS'DAQmx_Val_Temp_RTD'
p29121
S'10301'
p29122
sS'DAQmx_AnlgWin_PauseTrig_When'
p29123
S'0x1374'
p29124
sS'DAQmxErrorAIMinTooSmall'
p29125
S'(-200578)'
p29126
sS'DAQmx_AIConv_Timebase_Src'
p29127
S'0x1339'
p29128
sS'DAQmxErrorInvalidWaveformLengthBeforeIfElseBlockInScript'
p29129
S'(-201008)'
p29130
sS'DAQmx_AI_Thrmstr_R1'
p29131
S'0x1061'
p29132
sS'DAQmx_Val_ActiveLow'
p29133
S'10096'
p29134
sS'DAQmx_SampQuant_SampPerChan'
p29135
S'0x1310'
p29136
sS'DAQmx_Val_Task_Abort'
p29137
S'6'
p29138
sS'DAQmx_AI_MeasType'
p29139
S'0x0695'
p29140
sS'DAQmxErrorInvalidExtClockFreqAndDivCombo'
p29141
S'(-200379)'
p29142
sS'DAQmxErrorFREQOUTCannotProduceDesiredFrequency'
p29143
S'(-200148)'
p29144
sS'DAQmxErrorNoRegenWhenUsingBrdMem'
p29145
S'(-200656)'
p29146
sS'DAQmx_Val_Switch_Topology_1130_4_Wire_64x1_Mux'
p29147
S'"1130/4-Wire 64x1 Mux"'
p29148
sS'DAQmxErrorWaitUntilDoneDoesNotIndicateDone'
p29149
S'(-200560)'
p29150
sS'DAQmxErrorTEDSIncompatibleSensorAndMeasType'
p29151
S'(-200756)'
p29152
sS'DAQmx_Val_Switch_Topology_2599_2_SPDT'
p29153
S'"2599/2-SPDT"'
p29154
sS'DAQmx_RealTime_NumOfWarmupIters'
p29155
S'0x22ED'
p29156
sS'DAQmx_AI_RawDataCompressionType'
p29157
S'0x22D8'
p29158
sS'DAQmx_AI_SoundPressure_Units'
p29159
S'0x1528'
p29160
sS'_NI_uInt16_DEFINED_'
p29161
g28678
sS'DAQmxWarningInputTerminationOverloaded'
p29162
S'(200004)'
p29163
sS'DAQmx_Val_DegC'
p29164
S'10143'
p29165
sS'DAQmxErrorEmptyPhysChanInPowerUpStatesArray'
p29166
S'(-200626)'
p29167
sS'DAQmx_Val_DegF'
p29168
S'10144'
p29169
sS'DAQmxErrorSampRateTooHigh'
p29170
S'(-200332)'
p29171
sS'DAQmx_Val_DegR'
p29172
S'10145'
p29173
sS'DAQmx_Val_Internal'
p29174
S'10200'
p29175
sS'DAQmx_CI_TwoEdgeSep_Units'
p29176
S'0x18AC'
p29177
sS'DAQmx_SwitchScan_BreakMode'
p29178
S'0x1247'
p29179
sS'DAQmxErrorHWTimedSinglePointAOAndDataXferNotProgIO'
p29180
S'(-200769)'
p29181
sS'DAQmxErrorPALRetryLimitExceeded'
p29182
S'(-50412)'
p29183
sS'DAQmxErrorDACRngLowNotMinusRefValNorZero'
p29184
S'(-200449)'
p29185
sS'DAQmxErrorMasterTbRateMasterTbSrcMismatch'
p29186
S'(-200307)'
p29187
sS'DAQmx_Write_SpaceAvail'
p29188
S'0x1460'
p29189
sS'DAQmx_SwitchChan_MaxACSwitchCurrent'
p29190
S'0x0646'
p29191
sS'DAQmx_Val_Strain_Gage'
p29192
S'10300'
p29193
sS'DAQmxErrorCannotCreateChannelAfterTaskVerified'
p29194
S'(-200160)'
p29195
sS'DAQmx_Val_E_Type_TC'
p29196
S'10055'
p29197
sS'DAQmx_Val_Switch_Topology_2530_1_Wire_4x32_Matrix'
p29198
S'"2530/1-Wire 4x32 Matrix"'
p29199
sS'DAQmx_Val_T_Type_TC'
p29200
S'10086'
p29201
sS'DAQmx_AI_Impedance'
p29202
S'0x0062'
p29203
sS'DAQmx_SwitchDev_SwitchChanList'
p29204
S'0x18E7'
p29205
sS'DAQmx_Val_MostRecentSamp'
p29206
S'10428'
p29207
sS'DAQmxErrorInvalidSampAndMasterTimebaseRateCombo'
p29208
S'(-200173)'
p29209
sS'DAQmxErrorFinitePulseTrainNotPossible'
p29210
S'(-200305)'
p29211
sS'DAQmxErrorExpectedConnectOperatorInList'
p29212
S'(-200062)'
p29213
sS'DAQmx_Read_AvailSampPerChan'
p29214
S'0x1223'
p29215
sS'DAQmxErrorInvalidCalConstCalADCAdjustment'
p29216
S'(-200520)'
p29217
sS'DAQmxErrorInvalidSampRateConsiderRIS'
p29218
S'(-200420)'
p29219
sS'DAQmx_Val_Switch_Topology_2566_16_SPDT'
p29220
S'"2566/16-SPDT"'
p29221
sS'DAQmxErrorIncapableTEDSInterfaceControllingDeviceSpecd'
p29222
S'(-201051)'
p29223
sS'DAQmx_Val_Switch_Topology_1130_4_Wire_Quad_16x1_Mux'
p29224
S'"1130/4-Wire Quad 16x1 Mux"'
p29225
sS'DAQmx_ChangeDetect_DI_RisingEdgePhysicalChans'
p29226
S'0x2195'
p29227
sS'DAQmx_Dev_SerialNum'
p29228
S'0x0632'
p29229
sS'DAQmx_AnlgEdge_StartTrig_Hyst'
p29230
S'0x1395'
p29231
sS'DAQmx_Val_AHighBHigh'
p29232
S'10040'
p29233
sS'DAQmxErrorGlobalTaskNameAlreadyChanName'
p29234
S'(-200919)'
p29235
sS'DAQmxErrorTableScalePreScaledValsNotSpecd'
p29236
S'(-200349)'
p29237
sS'DAQmxErrorPALBadReadOffset'
p29238
S'(-50010)'
p29239
sS'DAQmxErrorZeroBasedChanIndexInvalid'
p29240
S'(-200612)'
p29241
sS'DAQmxErrorNonBufferedAOAndDataXferNotProgIO'
p29242
S'(-200768)'
p29243
sS'DAQmx_AI_ACExcit_SyncEnable'
p29244
S'0x0102'
p29245
sS'DAQmxErrorNoChansOfGivenTypeInTask'
p29246
S'(-200611)'
p29247
sS'DAQmxErrorChanNotInTask'
p29248
S'(-200486)'
p29249
sS'DAQmxErrorDuplicateDeviceIDInListWhenSettling'
p29250
S'(-200057)'
p29251
sS'DAQmx_Val_OpenCollector'
p29252
S'12574'
p29253
sS'DAQmxErrorSelfCalDateTimeNotDAQmx'
p29254
S'(-200541)'
p29255
sS'__CFUNCPTRVAR'
p29256
S'__cdecl'
p29257
sS'DAQmx_Val_Switch_Topology_2530_2_Wire_Dual_32x1_Mux'
p29258
S'"2530/2-Wire Dual 32x1 Mux"'
p29259
sS'DAQmx_CI_Freq_DigFltr_TimebaseSrc'
p29260
S'0x21E9'
p29261
sS'DAQmxErrorNoSyncPulseExtSampClkTimebase'
p29262
S'(-200762)'
p29263
sS'DAQmxErrorValueOutOfRange'
p29264
S'(-54021)'
p29265
sS'DAQmxErrorDeviceDoesNotSupportDMADataXferForNonBufferedAcq'
p29266
S'(-200734)'
p29267
sS'DAQmxWarningPALTransferNotInProgress'
p29268
S'(50402)'
p29269
sS'DAQmxErrorBufferWithHWTimedSinglePointSampMode'
p29270
S'(-200690)'
p29271
sS'DAQmxErrorWaveformPreviouslyAllocated'
p29272
S'(-200310)'
p29273
sS'DAQmxErrorAnalogWaveformExpected'
p29274
S'(-200095)'
p29275
sS'DAQmx_DigLvl_PauseTrig_Src'
p29276
S'0x1379'
p29277
sS'DAQmx_Val_Task_Commit'
p29278
S'3'
p29279
sS'DAQmx_AnlgEdge_StartTrig_Src'
p29280
S'0x1398'
p29281
sS'DAQmxErrorRoutingDestTermPXIStarInSlot16AndAbove'
p29282
S'(-200702)'
p29283
sS'DAQmxErrorTaskVersionNew'
p29284
S'(-200470)'
p29285
sS'DAQmx_AI_Rng_High'
p29286
S'0x1815'
p29287
sS'DAQmxErrorPALSyncTimedOut'
p29288
S'(-50550)'
p29289
sS'DAQmxErrorTrigLineNotFoundSingleDevRoute'
p29290
S'(-200574)'
p29291
sS'DAQmx_Dev_AO_PhysicalChans'
p29292
S'0x231F'
p29293
sS'DAQmxErrorFullySpecifiedPathInListContainsRange'
p29294
S'(-200060)'
p29295
sS'DAQmxWarningValueNotInSet'
p29296
S'(54022)'
p29297
sS'DAQmx_Val_Switch_Topology_2575_2_Wire_98x1_Mux'
p29298
S'"2575/2-Wire 98x1 Mux"'
p29299
sS'DAQmx_CI_Freq_StartingEdge'
p29300
S'0x0799'
p29301
sS'DAQmxErrorCOCannotKeepUpInHWTimedSinglePointPolled'
p29302
S'(-201022)'
p29303
sS'DAQmxErrorPALMemoryFull'
p29304
S'(-50352)'
p29305
sS'DAQmxErrorDSFFailedToResetStream'
p29306
S'(-200586)'
p29307
sS'DAQmxErrorInvalidActionInControlTask'
p29308
S'(-200538)'
p29309
sS'DAQmxErrorMarkerPositionNotAlignedInScript'
p29310
S'(-200031)'
p29311
sS'DAQmx_Val_None'
p29312
S'10230'
p29313
sS'DAQmxErrorDAQmxSignalEventTypeNotSupportedByChanTypesOrDevicesInTask'
p29314
S'(-200987)'
p29315
sS'DAQmxWarningPALBadWriteMode'
p29316
S'(50012)'
p29317
sS'DAQmxErrorWriteFailedMultipleCtrsWithFREQOUT'
p29318
S'(-200844)'
p29319
sS'DAQmxErrorPortConfiguredForOutput'
p29320
S'(-200121)'
p29321
sS'DAQmxErrorParsingTEDSData'
p29322
S'(-200753)'
p29323
sS'DAQmxWarningPALOSFault'
p29324
S'(50202)'
p29325
sS'DAQmx_Val_ReferenceTrigger'
p29326
S'12490'
p29327
sS'DAQmx_Write_RegenMode'
p29328
S'0x1453'
p29329
sS'DAQmx_Val_Switch_Topology_2527_2_Wire_32x1_Mux'
p29330
S'"2527/2-Wire 32x1 Mux"'
p29331
sS'DAQmxErrorInvalidTimingType'
p29332
S'(-200300)'
p29333
sS'DAQmxErrorBufferNameExpectedInScript'
p29334
S'(-200026)'
p29335
sS'DAQmxErrorConfiguredTEDSInterfaceDevNotDetected'
p29336
S'(-200958)'
p29337
sS'DAQmx_AO_ReglitchEnable'
p29338
S'0x0133'
p29339
sS'DAQmx_SwitchDev_Topology'
p29340
S'0x193D'
p29341
sS'DAQmxErrorRoutingSrcTermPXIStarInSlot2_Routing'
p29342
S'(-89143)'
p29343
sS'DAQmx_AI_Strain_Units'
p29344
S'0x0981'
p29345
sS'DAQmxErrorTaskMissingChannelProperty'
p29346
S'(-201070)'
p29347
sS'DAQmxErrorSCCCarrierSpecdIsMissing'
p29348
S'(-201050)'
p29349
sS'DAQmx_Scale_Poly_ForwardCoeff'
p29350
S'0x1234'
p29351
sS'DAQmxErrorNoChansSpecdForChangeDetect'
p29352
S'(-200751)'
p29353
sS'DAQmxErrorAOMinMaxNotSupportedGivenDACRange'
p29354
S'(-200872)'
p29355
sS'DAQmx_SwitchChan_Impedance'
p29356
S'0x0641'
p29357
sS'DAQmxErrorEventDelayOutOfRange'
p29358
S'(-200345)'
p29359
sS'DAQmxErrorPALResourceBusy'
p29360
S'(-50106)'
p29361
sS'DAQmx_DigEdge_WatchdogExpirTrig_Edge'
p29362
S'0x21A5'
p29363
sS'DAQmx_AnlgWin_StartTrig_Top'
p29364
S'0x1403'
p29365
sS'DAQmx_Val_Low'
p29366
S'10214'
p29367
sS'DAQmxErrorChannelNameGenerationNumberTooBig'
p29368
S'(-200600)'
p29369
sS'DAQmx_Val_FirstSample'
p29370
S'10424'
p29371
sS'DAQmxErrorExtSampClkSrcNotSpecified'
p29372
S'(-200303)'
p29373
sS'DAQmxErrorPortConfiguredForInput'
p29374
S'(-200120)'
p29375
sS'DAQmx_DigEdge_RefTrig_Edge'
p29376
S'0x1430'
p29377
sS'DAQmx_Exported_HshkEvent_OutputTerm'
p29378
S'0x22BA'
p29379
sS'DAQmx_Read_AutoStart'
p29380
S'0x1826'
p29381
sS'DAQmx_ExtCal_LastTemp'
p29382
S'0x1867'
p29383
sS'DAQmxErrorPALSoftwareFault'
p29384
S'(-50150)'
p29385
sS'DAQmxErrorInterconnectBridgeRouteReserved'
p29386
S'(-54012)'
p29387
sS'DAQmx_Val_ChanForAllLines'
p29388
g28873
sS'DAQmx_Val_HandshakeTriggerAsserts'
p29389
S'12552'
p29390
sS'DAQmxErrorExtSampClkRateTooHighForBackplane'
p29391
S'(-200274)'
p29392
sS'DAQmx_CI_SemiPeriod_Units'
p29393
S'0x18AF'
p29394
sS'DAQmxErrorHWTimedAndDataXferPIO'
p29395
S'(-201026)'
p29396
sS'DAQmx_Read_RelativeTo'
p29397
S'0x190A'
p29398
sS'DAQmxErrorCAPICannotPerformTaskOperationInAsyncCallback'
p29399
S'(-200968)'
p29400
sS'DAQmxErrorNotEnoughSampsWrittenForInitialXferRqstCondition'
p29401
S'(-200294)'
p29402
sS'DAQmxErrorAIDuringCounter0DMAConflict'
p29403
S'(-200078)'
p29404
sS'DAQmx_DigEdge_ArmStartTrig_DigSync_Enable'
p29405
S'0x2231'
p29406
sS'DAQmxWarningPotentialGlitchDuringWrite'
p29407
S'(200015)'
p29408
sS'DAQmx_AI_Bridge_InitialVoltage'
p29409
S'0x17ED'
p29410
sS'DAQmx_CI_PulseWidth_DigFltr_MinPulseWidth'
p29411
S'0x220B'
p29412
sS'DAQmxErrorRefTrigDigPatternSizeDoesNotMatchSourceSize'
p29413
S'(-200895)'
p29414
sS'DAQmx_Val_Switch_Topology_2569_100_SPST'
p29415
S'"2569/100-SPST"'
p29416
sS'DAQmx_AI_RVDT_Units'
p29417
S'0x0877'
p29418
sS'DAQmx_Val_Current'
p29419
S'10134'
p29420
sS'DAQmxErrorIncompatibleSensorOutputAndDeviceInputRanges'
p29421
S'(-200357)'
p29422
sS'DAQmx_Val_N_Type_TC'
p29423
S'10077'
p29424
sS'DAQmxErrorTermWithoutDevInMultiDevTask'
p29425
S'(-200853)'
p29426
sS'DAQmxErrorNoHWTimingWithOnDemand'
p29427
S'(-200731)'
p29428
sS'DAQmx_SampClk_Rate'
p29429
S'0x1344'
p29430
sS'DAQmx_Val_Task_Unreserve'
p29431
S'5'
p29432
sS'DAQmxErrorRefTrigOutputTermNotSupportedGivenTimingType'
p29433
S'(-200912)'
p29434
sS'DAQmxErrorExtSampClkRateTooLowForClkIn'
p29435
S'(-200275)'
p29436
sS'DAQmxErrorInvalidReadPosDuringRIS'
p29437
S'(-200419)'
p29438
sS'DAQmxErrorUnexpectedIDFollowingRelayNameInList'
p29439
S'(-200530)'
p29440
sS'DAQmxErrorTEDSNotSupported'
p29441
S'(-200741)'
p29442
sS'DAQmxErrorWriteBufferTooSmall'
p29443
S'(-200234)'
p29444
sS'DAQmxErrorCTROutSampClkPeriodShorterThanGenPulseTrainPeriod'
p29445
S'(-200993)'
p29446
sS'DAQmx_CI_Encoder_ZInput_DigFltr_MinPulseWidth'
p29447
S'0x2206'
p29448
sS'DAQmxError3InputPortCombinationGivenSampTimingType653x'
p29449
S'(-200931)'
p29450
sS'DAQmxErrorReadNotCompleteBefore3SampClkEdges'
p29451
S'(-200843)'
p29452
sS'DAQmxErrorRefTrigMasterSessionUnavailable'
p29453
S'(-200682)'
p29454
sS'DAQmx_CI_Encoder_AInput_DigFltr_TimebaseSrc'
p29455
S'0x21FD'
p29456
sS'DAQmxErrorSwitchDifferentSettlingTimeWhenScanning'
p29457
S'(-200178)'
p29458
sS'DAQmx_Val_Once'
p29459
S'10244'
p29460
sS'DAQmxErrorRefTrigDigPatternChanNotTristated'
p29461
S'(-200888)'
p29462
sS'DAQmx_AnlgWin_RefTrig_When'
p29463
S'0x1427'
p29464
sS'DAQmxErrorCanNotPerformOpWhileTaskRunning'
p29465
S'(-200479)'
p29466
sS'DAQmxErrorRangeWithTooManyObjects'
p29467
S'(-200592)'
p29468
sS'DAQmxErrorDevAlreadyInTask'
p29469
S'(-200481)'
p29470
sS'DAQmx_Val_OnbrdMemCustomThreshold'
p29471
S'12577'
p29472
sS'DAQmxErrorInterruptsInsufficientDataXferMech'
p29473
S'(-200322)'
p29474
sS'DAQmx_AI_Thrmcpl_CJCVal'
p29475
S'0x1036'
p29476
sS'DAQmxErrorCAPIReservedParamNotZero'
p29477
S'(-200491)'
p29478
sS'DAQmx_Val_CounterOutputEvent'
p29479
S'12494'
p29480
sS'DAQmx_Scale_Descr'
p29481
S'0x1226'
p29482
sS'DAQmx_Val_Switch_Topology_1190_Quad_4x1_Mux'
p29483
S'"1190/Quad 4x1 Mux"'
p29484
sS'DAQmxErrorSCXI1126ThreshHystCombination'
p29485
S'(-200223)'
p29486
sS'DAQmx_CI_Encoder_AInput_DigFltr_TimebaseRate'
p29487
S'0x21FE'
p29488
sS'DAQmx_AIConv_TimebaseDiv'
p29489
S'0x1335'
p29490
sS'DAQmxErrorSMIOPauseTriggersNotSupportedWithChannelExpansion'
p29491
S'(-201019)'
p29492
sS'DAQmxErrorMemMapOnlyForProgIOXfer'
p29493
S'(-200169)'
p29494
sS'DAQmxErrorVirtualTEDSDataFileError'
p29495
S'(-200827)'
p29496
sS'DAQmx_Val_Switch_Topology_1193_Quad_8x1_Mux'
p29497
S'"1193/Quad 8x1 Mux"'
p29498
sS'DAQmxErrorWhenAcqCompAndNoRefTrig'
p29499
S'(-200864)'
p29500
sS'DAQmxErrorTrigWindowAIMinAIMaxCombo'
p29501
S'(-200423)'
p29502
sS'DAQmxErrorPauseTrigTypeNotSupportedGivenTimingType'
p29503
S'(-200906)'
p29504
sS'DAQmx_AI_Thrmcpl_CJCChan'
p29505
S'0x1034'
p29506
sS'DAQmxErrorReadAllAvailableDataWithoutBuffer'
p29507
S'(-200340)'
p29508
sS'DAQmx_CI_CountEdges_DigFltr_Enable'
p29509
S'0x21F6'
p29510
sS'DAQmx_Val_Switch_Topology_2503_1_Wire_48x1_Mux'
p29511
S'"2503/1-Wire 48x1 Mux"'
p29512
sS'DAQmxErrorIncorrectNumChannelsToWrite'
p29513
S'(-200101)'
p29514
sS'DAQmxWarningPALBadThreadMultitask'
p29515
S'(50019)'
p29516
sS'DAQmx_Write_CurrWritePos'
p29517
S'0x1458'
p29518
sS'DAQmxErrorRoutingDestTermPXIStarXNotInSlot2'
p29519
S'(-200705)'
p29520
sS'DAQmx_CI_Encoder_ZInput_DigFltr_TimebaseRate'
p29521
S'0x2208'
p29522
sS'DAQmx_Val_Rising'
p29523
S'10280'
p29524
sS'DAQmx_Val_2Wire'
p29525
S'2'
p29526
sS'DAQmxErrorDigFilterAndSyncBothEnabled'
p29527
S'(-200770)'
p29528
sS'DAQmxErrorPALBadWriteMode'
p29529
S'(-50012)'
p29530
sS'DAQmxErrorMinAndMaxNotSymmetric'
p29531
S'(-200266)'
p29532
sS'DAQmx_Val_Task_Verify'
p29533
g29526
sS'DAQmxErrorCannotWriteNotStartedAutoStartFalseNotOnDemandHWTimedSglPt'
p29534
S'(-200803)'
p29535
sS'DAQmx_Val_Switch_Topology_2598_Dual_Transfer'
p29536
S'"2598/Dual Transfer"'
p29537
sS'DAQmx_CI_PulseWidth_Units'
p29538
S'0x0823'
p29539
sS'DAQmxErrorPALFileFault'
p29540
S'(-50209)'
p29541
sS'DAQmx_Val_Switch_Topology_1169_100_SPST'
p29542
S'"1169/100-SPST"'
p29543
sS'DAQmxErrorGetPropertyNotInputBufferedTask'
p29544
S'(-200455)'
p29545
sS'DAQmx_AO_DAC_Offset_Val'
p29546
S'0x2255'
p29547
sS'DAQmx_Val_Switch_Topology_2532_2_Wire_4x64_Matrix'
p29548
S'"2532/2-Wire 4x64 Matrix"'
p29549
sS'DAQmx_Val_X4'
p29550
S'10092'
p29551
sS'DAQmx_Val_X1'
p29552
S'10090'
p29553
sS'DAQmx_Val_X2'
p29554
S'10091'
p29555
sS'DAQmx_RefClk_Src'
p29556
S'0x1316'
p29557
sS'DAQmxErrorWaitForNextSampClkDetected3OrMoreSampClks'
p29558
S'(-209803)'
p29559
sS'DAQmxErrorPALComponentBusy'
p29560
S'(-50264)'
p29561
sS'DAQmxErrorProgFilterClkCfgdToDifferentMinPulseWidthByAnotherTask1PerDev'
p29562
S'(-200806)'
p29563
sS'DAQmxWarningChanCalExpired'
p29564
S'(200043)'
p29565
sS'DAQmxErrorLinesUsedForHandshakingInputNotForStaticInput'
p29566
S'(-200725)'
p29567
sS'DAQmx_Val_Pulse_Ticks'
p29568
S'10268'
p29569
sS'DAQmxErrorEmptyString'
p29570
S'(-200467)'
p29571
sS'DAQmxErrorOpNotSupportedWhenRefClkSrcNone'
p29572
S'(-200661)'
p29573
sS'DAQmxErrorBufferSizeNotMultipleOfEveryNSampsEventIntervalNoIrqOnDev'
p29574
S'(-200920)'
p29575
sS'_NI_int16_DEFINED_'
p29576
g28678
sS'DAQmxErrorInputFIFOOverflow'
p29577
S'(-200010)'
p29578
sS'DAQmx_CI_LinEncoder_InitialPos'
p29579
S'0x0915'
p29580
sS'DAQmxErrorCTROutSampClkPeriodShorterThanGenPulseTrainPeriodPolled'
p29581
S'(-201024)'
p29582
sS'DAQmxErrorSamplesNoLongerAvailable'
p29583
S'(-200279)'
p29584
sS'DAQmx_Val_J_Type_TC'
p29585
S'10072'
p29586
sS'DAQmx_Val_Switch_Topology_1160_16_SPDT'
p29587
S'"1160/16-SPDT"'
p29588
sS'DAQmx_CI_CountEdges_CountDir_DigFltr_TimebaseSrc'
p29589
S'0x21F3'
p29590
sS'DAQmxErrorDigDevChansSpecdInModeOtherThanParallel'
p29591
S'(-201035)'
p29592
sS'DAQmxErrorChanCalExpired'
p29593
S'(-200934)'
p29594
sS'DAQmxWarningAIConvRateTooLow'
p29595
S'(200018)'
p29596
sS'DAQmx_AI_Microphone_Sensitivity'
p29597
S'0x1536'
p29598
sS'DAQmxErrorSuitableTimebaseNotFoundTimeCombo2'
p29599
S'(-200746)'
p29600
sS'DAQmx_CI_TwoEdgeSep_SecondEdge'
p29601
S'0x0834'
p29602
sS'DAQmx_Val_Temp_TC'
p29603
S'10303'
p29604
sS'DAQmx_Val_Voltage_CustomWithExcitation'
p29605
S'10323'
p29606
sS'DAQmxErrorExtCalFunctionOutsideExtCalSession'
p29607
S'(-200439)'
p29608
sS'DAQmx_Val_Switch_Topology_1129_2_Wire_Quad_4x16_Matrix'
p29609
S'"1129/2-Wire Quad 4x16 Matrix"'
p29610
sS'DAQmxErrorCannotRegisterDAQmxSoftwareEventWhileTaskIsRunning'
p29611
S'(-200960)'
p29612
sS'DAQmxErrorDAQmxSWEventsWithDifferentCallMechanisms'
p29613
S'(-200978)'
p29614
sS'DAQmxErrorRoutingPathNotAvailable'
p29615
S'(-200044)'
p29616
sS'DAQmxErrorCantMaintainExistingValueAOSync'
p29617
S'(-200793)'
p29618
sS'DAQmx_AI_ChanCal_ScaleType'
p29619
S'0x229C'
p29620
sS'DAQmxErrorDevCannotBeAccessed'
p29621
S'(-201003)'
p29622
sS'DAQmx_CO_CtrTimebase_DigFltr_MinPulseWidth'
p29623
S'0x2277'
p29624
sS'DAQmx_SampClk_Timebase_ActiveEdge'
p29625
S'0x18EC'
p29626
sS'DAQmxErrorMultiDevsInTask'
p29627
S'(-200558)'
p29628
sS'DAQmxErrorCVIFailedToLoadDAQmxDLL'
p29629
S'(-200397)'
p29630
sS'DAQmxErrorInvalidCfgCalAdjustDirectPathOutputImpedance'
p29631
S'(-200514)'
p29632
sS'DAQmxErrorInvalidDateTimeInEEPROM'
p29633
S'(-200501)'
p29634
sS'DAQmx_Val_Switch_Topology_2527_Independent'
p29635
S'"2527/Independent"'
p29636
sS'DAQmxErrorNoDevMemForWaveform'
p29637
S'(-200315)'
p29638
sS'DAQmxErrorCannotSetPropertyWhenHWTimedSinglePointTaskIsRunning'
p29639
S'(-200994)'
p29640
sS'DAQmx_Val_Toggle'
p29641
S'10307'
p29642
sS'DAQmxErrorRoutingSrcTermPXIStarXNotInSlot2'
p29643
S'(-200704)'
p29644
sS'DAQmx_AI_Dither_Enable'
p29645
S'0x0068'
p29646
sS'DAQmxWarningPALBadWriteCount'
p29647
S'(50014)'
p29648
sS'DAQmx_AnlgWin_StartTrig_Btm'
p29649
S'0x1402'
p29650
sS'DAQmxErrorPALValueConflict'
p29651
S'(-50000)'
p29652
sS'DAQmxErrorInvalidRelayName'
p29653
S'(-200202)'
p29654
sS'DAQmx_ChangeDetect_DI_FallingEdgePhysicalChans'
p29655
S'0x2196'
p29656
sS'DAQmxErrorAOMinMaxNotSupportedGivenDACOffsetVal'
p29657
S'(-200869)'
p29658
sS'DAQmx_Scale_Table_ScaledVals'
p29659
S'0x1236'
p29660
sS'DAQmxErrorScriptNameSameAsWfmName'
p29661
S'(-200633)'
p29662
sS'DAQmxErrorPALBusResetOccurred'
p29663
S'(-50800)'
p29664
sS'DAQmx_CI_Freq_Div'
p29665
S'0x0147'
p29666
sS'DAQmxErrorPropertyUnavailWhenUsingOnboardMemory'
p29667
S'(-200297)'
p29668
sS'DAQmxErrorCppCantRemoveInvalidEventHandler'
p29669
S'(-200590)'
p29670
sS'DAQmx_AI_ResistanceCfg'
p29671
S'0x1881'
p29672
sS'DAQmx_Cal_DevTemp'
p29673
S'0x223B'
p29674
sS'DAQmxErrorInputCfgFailedBecauseWatchdogExpired'
p29675
S'(-200712)'
p29676
sS'DAQmx_Val_Voltage'
p29677
S'10322'
p29678
sS'DAQmx_Exported_RefTrig_OutputTerm'
p29679
S'0x0590'
p29680
sS'DAQmxErrorPALBadCount'
p29681
S'(-50008)'
p29682
sS'DAQmx_Val_Switch_Topology_2503_2_Wire_Dual_12x1_Mux'
p29683
S'"2503/2-Wire Dual 12x1 Mux"'
p29684
sS'DAQmx_Val_Table'
p29685
S'10450'
p29686
sS'DAQmxErrorRoutingSrcTermPXIStarInSlot16AndAbove'
p29687
S'(-200703)'
p29688
sS'DAQmxErrorNoAvailTrigLinesOnDevice'
p29689
S'(-200227)'
p29690
sS'DAQmx_AnlgEdge_RefTrig_Lvl'
p29691
S'0x1422'
p29692
sS'DAQmxErrorCalFunctionNotSupported'
p29693
S'(-200445)'
p29694
sS'DAQmx_Val_PCIe'
p29695
S'13612'
p29696
sS'DAQmxErrorMemMapDataXferModeSampTimingCombo'
p29697
S'(-200260)'
p29698
sS'DAQmx_Val_Pt3750'
p29699
S'12481'
p29700
sS'DAQmxErrorSampClkRateUnavailable'
p29701
S'(-200660)'
p29702
sS'DAQmx_Exported_AIHoldCmpltEvent_PulsePolarity'
p29703
S'0x18EE'
p29704
sS'DAQmxErrorReadDataTypeTooSmall'
p29705
S'(-200789)'
p29706
sS'DAQmxErrorAcqStoppedToPreventInputBufferOverwriteOneDataXferMech'
p29707
S'(-200613)'
p29708
sS'DAQmx_Val_Open'
p29709
S'10437'
p29710
sS'DAQmx_DigEdge_StartTrig_DigFltr_MinPulseWidth'
p29711
S'0x2224'
p29712
sS'DAQmx_Task_Channels'
p29713
S'0x1273'
p29714
sS'DAQmxErrorPatternMatcherMayBeUsedByOneTrigOnly'
p29715
S'(-200928)'
p29716
sS'DAQmx_Val_Pt3916'
p29717
S'10069'
p29718
sS'DAQmx_Exported_SampClkTimebase_OutputTerm'
p29719
S'0x18F9'
p29720
sS'DAQmxErrorInvalidAttributeValue'
p29721
S'(-200077)'
p29722
sS'DAQmx_Val_Pt3911'
p29723
S'12482'
p29724
sS'DAQmxErrorGlobalChanNameAlreadyTaskName'
p29725
S'(-200918)'
p29726
sS'DAQmxErrorInversionNotSupportedByHW_Routing'
p29727
S'(-89133)'
p29728
sS'DAQmxErrorCannotHaveCJTempWithOtherChans'
p29729
S'(-200167)'
p29730
sS'DAQmxErrorMissingStartOfTable'
p29731
S'(-201065)'
p29732
sS'DAQmx_AI_DevScalingCoeff'
p29733
S'0x1930'
p29734
sS'DAQmx_Val_LosslessPacking'
p29735
S'12555'
p29736
sS'DAQmx_AI_Excit_DCorAC'
p29737
S'0x17FB'
p29738
sS'DAQmxErrorDigSyncNotAvailableOnTerm'
p29739
S'(-200773)'
p29740
sS'DAQmxWarningLowpassFilterSettlingTimeExceedsUserTimeBetween2ADCConversions'
p29741
S'(200038)'
p29742
sS'DAQmx_Val_Switch_Topology_1193_Independent'
p29743
S'"1193/Independent"'
p29744
sS'DAQmx_AIConv_Src'
p29745
S'0x1502'
p29746
sS'DAQmx_SampTimingType'
p29747
S'0x1347'
p29748
sS'DAQmxWarningPALDispatcherAlreadyExported'
p29749
S'(50500)'
p29750
sS'DAQmx_Exported_AdvTrig_OutputTerm'
p29751
S'0x1645'
p29752
sS'DAQmxWarningPALBadDataSize'
p29753
S'(50005)'
p29754
sS'DAQmxErrorPALBadWindowType'
p29755
S'(-50016)'
p29756
sS'DAQmxErrorInvalidHWProductType'
p29757
S'(-201057)'
p29758
sS'DAQmxErrorUnsupportedSignalTypeExportSignal'
p29759
S'(-200375)'
p29760
sS'DAQmxErrorCannotWriteNotStartedAutoStartFalseNotOnDemandBufSizeZero'
p29761
S'(-200802)'
p29762
sS'DAQmxErrorTimeoutExceeded'
p29763
S'(-200221)'
p29764
sS'DAQmxErrorOnboardMemTooSmall'
p29765
S'(-200341)'
p29766
sS'DAQmx_Val_Switch_Topology_1167_Independent'
p29767
S'"1167/Independent"'
p29768
sS'DAQmxErrorMStudioPropertyGetWhileTaskNotVerified'
p29769
S'(-200593)'
p29770
sS'DAQmxErrorCounterNoTimebaseEdgesBetweenGates'
p29771
S'(-200140)'
p29772
sS'DAQmxErrorHWTimedSinglePointOddNumChansInAITask'
p29773
S'(-200820)'
p29774
sS'DAQmxErrorRangeWithoutAConnectActionInList'
p29775
S'(-200052)'
p29776
sS'DAQmxErrorPALMessageQueueFull'
p29777
S'(-50108)'
p29778
sS'DAQmx_CI_Encoder_BInputTerm'
p29779
S'0x219E'
p29780
sS'DAQmx_AnlgLvl_PauseTrig_Hyst'
p29781
S'0x1368'
p29782
sS'DAQmxErrorCOInvalidTimingSrcDueToSignal'
p29783
S'(-200801)'
p29784
sS'DAQmx_AI_Temp_Units'
p29785
S'0x1033'
p29786
sS'DAQmxErrorChanDoesNotSupportCJC'
p29787
S'(-200976)'
p29788
sS'DAQmxErrorCustomScaleNameUsed'
p29789
S'(-200356)'
p29790
sS'DAQmxErrorTrigLineNotFoundSingleDevRoute_Routing'
p29791
S'(-89140)'
p29792
sS'DAQmx_PhysicalChan_TEDS_BitStream'
p29793
S'0x21DF'
p29794
sS'DAQmx_AI_EnhancedAliasRejectionEnable'
p29795
S'0x2294'
p29796
sS'DAQmxErrorPALMemoryAlignmentFault'
p29797
S'(-50351)'
p29798
sS'DAQmxErrorAttributeNotSupportedInTaskContext'
p29799
S'(-200452)'
p29800
sS'DAQmxErrorInvalidRefClkRate'
p29801
S'(-200427)'
p29802
sS'DAQmxErrorDeviceDoesNotSupportScanning'
p29803
S'(-200068)'
p29804
sS'DAQmxWarningRateViolatesMaxADCRate'
p29805
S'(200012)'
p29806
sS'DAQmxErrorWhenAcqCompAndNumSampsPerChanExceedsOnBrdBufSize'
p29807
S'(-200865)'
p29808
sS'DAQmx_Val_CountUp'
p29809
S'10128'
p29810
sS'DAQmxErrorPALResourceAmbiguous'
p29811
S'(-50107)'
p29812
sS'DAQmxErrorIncorrectDigitalPattern'
p29813
S'(-200102)'
p29814
sS'DAQmxErrorDCMLock'
p29815
S'(-200385)'
p29816
sS'DAQmxErrorTwoWaitForTrigsAfterConnectionInScanlist'
p29817
S'(-200638)'
p29818
sS'DAQmx_Val_WriteToPROM'
p29819
S'12539'
p29820
sS'DAQmx_CI_Encoder_AInput_DigSync_Enable'
p29821
S'0x21FF'
p29822
sS'DAQmxErrorMeasCalAdjustMainPathPostAmpGainAndOffset'
p29823
S'(-200504)'
p29824
sS'DAQmx_Val_Switch_Topology_1193_Dual_16x1_Mux'
p29825
S'"1193/Dual 16x1 Mux"'
p29826
sS'DAQmx_Hshk_StartCond'
p29827
S'0x22C3'
p29828
sS'DAQmx_CI_CountEdges_CountDir_DigSync_Enable'
p29829
S'0x21F5'
p29830
sS'DAQmx_SwitchChan_MaxDCVoltage'
p29831
S'0x0650'
p29832
sS'DAQmxErrorInvalidSampClkSrc'
p29833
S'(-200414)'
p29834
sS'DAQmx_SampClk_Timebase_Rate'
p29835
S'0x1303'
p29836
sS'DAQmxErrorCtrMinMax'
p29837
S'(-200527)'
p29838
sS'DAQmx_Val_OnBrdMemEmpty'
p29839
S'10235'
p29840
sS'DAQmx_Task_Devices'
p29841
S'0x230E'
p29842
sS'DAQmxErrorCannotGetPropertyWhenTaskNotCommittedOrRunning'
p29843
S'(-200556)'
p29844
sS'DAQmxErrorCantSaveNonPortMultiLineDigChanSoInteractiveEditsAllowed'
p29845
S'(-200921)'
p29846
sS'DAQmxErrorInputFIFOUnderflow'
p29847
S'(-200017)'
p29848
sS'DAQmxErrorLinesUsedForStaticInputNotForHandshakingControl'
p29849
S'(-200728)'
p29850
sS'DAQmx_CI_CtrTimebase_DigFltr_Enable'
p29851
S'0x2271'
p29852
sS'DAQmxErrorDSFReadyForOutputNotAsserted'
p29853
S'(-200585)'
p29854
sS'DAQmxErrorInternalSampClkNotRisingEdge'
p29855
S'(-200890)'
p29856
sS'DAQmx_SwitchChan_MaxDCCarryCurrent'
p29857
S'0x0647'
p29858
sS'DAQmxErrorConnectionNotPermittedOnChanReservedForRouting'
p29859
S'(-200189)'
p29860
sS'DAQmx_CI_TwoEdgeSep_First_DigFltr_MinPulseWidth'
p29861
S'0x2210'
p29862
sS'DAQmxErrorBracketPairingMismatchInList'
p29863
S'(-200104)'
p29864
sS'DAQmxErrorInconsistentChannelDirections'
p29865
S'(-200011)'
p29866
sS'DAQmxErrorExplanationNotFound'
p29867
S'(-200235)'
p29868
sS'DAQmx_Val_MaintainExistingValue'
p29869
S'12528'
p29870
sS'DAQmx_Read_TotalSampPerChanAcquired'
p29871
S'0x192A'
p29872
sS'DAQmx_SampClk_DigFltr_MinPulseWidth'
p29873
S'0x221F'
p29874
sS'DAQmx_Dev_PCI_DevNum'
p29875
S'0x2328'
p29876
sS'DAQmx_Dev_DI_Lines'
p29877
S'0x2320'
p29878
sS'DAQmxWarningPALResourceAmbiguous'
p29879
S'(50107)'
p29880
sS'DAQmxErrorPALReceiverSocketInvalid'
p29881
S'(-50503)'
p29882
sS'DAQmxErrorNoCommonTrigLineForImmedRoute'
p29883
S'(-200396)'
p29884
sS'DAQmx_SwitchChan_MaxACVoltage'
p29885
S'0x0651'
p29886
sS'DAQmxWarningPALBadReadMode'
p29887
S'(50009)'
p29888
sS'DAQmxErrorPALResourceReserved'
p29889
S'(-50103)'
p29890
sS'DAQmxErrorSampClkTimebaseRateInvalid'
p29891
S'(-201089)'
p29892
sS'DAQmx_AI_ChanCal_HasValidCalInfo'
p29893
S'0x2297'
p29894
sS'DAQmxErrorRefTrigTypeNotSupportedGivenTimingType'
p29895
S'(-200907)'
p29896
sS'DAQmx_Val_Transferred_From_Buffer'
p29897
g29526
sS'DAQmx_CO_Pulse_Freq_Units'
p29898
S'0x18D5'
p29899
sS'DAQmxErrorInvalidRoutingDestinationTerminalName'
p29900
S'(-200041)'
p29901
sS'DAQmx_Val_ClearExpiration'
p29902
g28873
sS'DAQmx_Val_Task_Start'
p29903
g28779
sS'DAQmxErrorCouldNotDownloadFirmwareHWDamaged'
p29904
S'(-200962)'
p29905
sS'DAQmxErrorWaitForNextSampleClockOrReadDetected3OrMoreMissedSampClks'
p29906
S'(-201027)'
p29907
sS'DAQmxErrorWriteNumChansMismatch'
p29908
S'(-200524)'
p29909
sS'DAQmxErrorNoAdvTrigForMultiDevScan'
p29910
S'(-200323)'
p29911
sS'DAQmxErrorTooManyChansForAnalogPauseTrig'
p29912
S'(-200263)'
p29913
sS'DAQmx_AI_TEDS_Units'
p29914
S'0x21E0'
p29915
sS'DAQmxErrorCannotStoreCalConst'
p29916
S'(-200074)'
p29917
sS'DAQmx_CO_Pulse_Time_Units'
p29918
S'0x18D6'
p29919
sS'DAQmx_Val_Switch_Topology_1175_2_Wire_98x1_Mux'
p29920
S'"1175/2-Wire 98x1 Mux"'
p29921
sS'DAQmxErrorTooManyPhysicalChansForTEDSInterfaceSpecd'
p29922
S'(-201052)'
p29923
sS'DAQmxErrorCannotTristateTerm_Routing'
p29924
S'(-89128)'
p29925
sS'DAQmxErrorPALDeviceNotSupported'
p29926
S'(-50302)'
p29927
sS'DAQmx_Val_GND'
p29928
S'10066'
p29929
sS'DAQmxErrorSwitchNotResetBeforeScan'
p29930
S'(-200199)'
p29931
sS'DAQmxErrorNoDivisorForExternalSignal'
p29932
S'(-200130)'
p29933
sS'DAQmx_SwitchChan_MaxDCSwitchCurrent'
p29934
S'0x0645'
p29935
sS'DAQmxErrorRepeatedAIPhysicalChan'
p29936
S'(-200620)'
p29937
sS'DAQmxErrorInvalidTimeValue'
p29938
S'(-201037)'
p29939
sS'DAQmx_AnlgWin_RefTrig_Coupling'
p29940
S'0x1857'
p29941
sS'DAQmxErrorDigInputNotSupported'
p29942
S'(-200647)'
p29943
sS'DAQmxErrorSampClkOutputTermIncludesStartTrigSrc'
p29944
S'(-200954)'
p29945
sS'DAQmx_AI_SoundPressure_MaxSoundPressureLvl'
p29946
S'0x223A'
p29947
sS'DAQmxErrorCantResetExpiredWatchdog'
p29948
S'(-200644)'
p29949
sS'DAQmxErrorInvalidSyntaxForPhysicalChannelRange'
p29950
S'(-200086)'
p29951
sS'DAQmxErrorNonZeroBufferSizeInProgIOXfer'
p29952
S'(-200172)'
p29953
sS'DAQmx_Val_QuarterBridgeII'
p29954
S'10272'
p29955
sS'DAQmxErrorInputBufSizeTooSmallToStartAcq'
p29956
S'(-200608)'
p29957
sS'DAQmx_AdvTrig_Type'
p29958
S'0x1365'
p29959
sS'DAQmx_PhysicalChan_TEDS_VersionLetter'
p29960
S'0x21DE'
p29961
sS'DAQmxErrorDataSizeMoreThanSizeOfEEPROMOnTEDS'
p29962
S'(-200825)'
p29963
sS'DAQmx_Val_K_Type_TC'
p29964
S'10073'
p29965
sS'DAQmxErrorTEDSLegacyTemplateIDInvalidOrUnsupported'
p29966
S'(-200766)'
p29967
sS'DAQmx_CI_CountEdges_ActiveEdge'
p29968
S'0x0697'
p29969
sS'DAQmxErrorRepeatedNumberInScaledValues'
p29970
S'(-200599)'
p29971
sS'DAQmx_Exported_AdvTrig_Pulse_WidthUnits'
p29972
S'0x1647'
p29973
sS'DAQmxErrorInvalidWaitDurationBeforeIfElseBlockInScript'
p29974
S'(-201011)'
p29975
sS'DAQmx_CI_SemiPeriod_Term'
p29976
S'0x18B0'
p29977
sS'DAQmx_AI_LossyLSBRemoval_CompressedSampSize'
p29978
S'0x22D9'
p29979
sS'DAQmxErrorSuppliedCurrentDataOutsideSpecifiedRange'
p29980
S'(-200076)'
p29981
sS'DAQmxErrorSampPerChanNotMultipleOfIncr'
p29982
S'(-200344)'
p29983
sS'DAQmx_Val_Chan'
p29984
S'10113'
p29985
sS'DAQmxErrorRoutingNotSupportedForDevice'
p29986
S'(-200039)'
p29987
sS'DAQmxErrorCOSampModeSampTimingTypeSampClkConflict'
p29988
S'(-200778)'
p29989
sS'DAQmxErrorCannotWriteWhenAutoStartFalseAndTaskNotRunning'
p29990
S'(-200846)'
p29991
sS'DAQmx_CI_LinEncoder_Units'
p29992
S'0x18A9'
p29993
sS'DAQmx_Val_Switch_Topology_1130_2_Wire_Octal_16x1_Mux'
p29994
S'"1130/2-Wire Octal 16x1 Mux"'
p29995
sS'DAQmx_Exported_HshkEvent_Interlocked_DeassertDelay'
p29996
S'0x22BF'
p29997
sS'DAQmx_CI_CountEdges_DigFltr_TimebaseSrc'
p29998
S'0x21F8'
p29999
sS'DAQmxErrorLines4To7ConfiguredForOutput'
p30000
S'(-200125)'
p30001
sS'DAQmx_Val_SampleCompleteEvent'
p30002
S'12530'
p30003
sS'DAQmxErrorStrainGageCalibration'
p30004
S'(-200380)'
p30005
sS'DAQmxWarningPALIrrelevantAttribute'
p30006
S'(50001)'
p30007
sS'DAQmxErrorNumSampsToWaitNotGreaterThanZeroInScript'
p30008
S'(-200850)'
p30009
sS'DAQmx_CI_Prescaler'
p30010
S'0x2239'
p30011
sS'DAQmxErrorReversePolynomialCoefNotSpecd'
p30012
S'(-200325)'
p30013
sS'DAQmx_Val_OnBrdMemHalfFullOrLess'
p30014
S'10239'
p30015
sS'DAQmxErrorOnDemandNotSupportedWithHWTimedSinglePoint'
p30016
S'(-200997)'
p30017
sS'DAQmxErrorSimulationCannotBeDisabledForDevCreatedAsSimulatedDev'
p30018
S'(-200856)'
p30019
sS'DAQmx_AI_Lowpass_SwitchCap_ExtClkDiv'
p30020
S'0x1886'
p30021
sS'DAQmx_PhysicalChan_TEDS_VersionNum'
p30022
S'0x21DD'
p30023
sS'DAQmx_Scale_Lin_YIntercept'
p30024
S'0x1228'
p30025
sS'DAQmxErrorCannotTristateBusyTerm'
p30026
S'(-200252)'
p30027
sS'DAQmxErrorRoutingDestTermPXIStarInSlot2_Routing'
p30028
S'(-89144)'
p30029
sS'DAQmxErrorRepeatedNumberInPreScaledValues'
p30030
S'(-200598)'
p30031
sS'DAQmx_Val_Pt3928'
p30032
S'12483'
p30033
sS'DAQmx_Val_PathStatus_AlreadyExists'
p30034
S'10432'
p30035
sS'DAQmxErrorWaitModeValueNotSupportedNonBuffered'
p30036
S'(-200924)'
p30037
sS'DAQmx_Val_Pt3920'
p30038
S'10053'
p30039
sS'DAQmx_Val_Polynomial'
p30040
S'10449'
p30041
sS'DAQmx_Val_Implicit'
p30042
S'10451'
p30043
sS'DAQmxErrorPLLBecameUnlocked'
p30044
S'(-200246)'
p30045
sS'DAQmxErrorCAPICannotRegisterSyncEventsFromMultipleThreads'
p30046
S'(-200990)'
p30047
sS'DAQmxErrorPrptyGetSpecdActiveChanFailedDueToDifftVals'
p30048
S'(-200657)'
p30049
sS'DAQmxErrorTimebaseCalFreqVarianceTooLarge'
p30050
S'(-200723)'
p30051
sS'DAQmx_DigLvl_PauseTrig_DigFltr_MinPulseWidth'
p30052
S'0x2229'
p30053
sS'DAQmxErrorDelayFromSampClkTooShort'
p30054
S'(-200336)'
p30055
sS'DAQmxErrorNoRefTrigConfigured'
p30056
S'(-200282)'
p30057
sS'DAQmx_Val_Switch_Topology_2501_4_Wire_12x1_Mux'
p30058
S'"2501/4-Wire 12x1 Mux"'
p30059
sS'DAQmxError3OutputPortCombinationGivenSampTimingType653x'
p30060
S'(-200932)'
p30061
sS'DAQmx_CO_Prescaler'
p30062
S'0x226D'
p30063
sS'DAQmxErrorAIEveryNSampsEventIntervalNotMultipleOf2'
p30064
S'(-200970)'
p30065
sS'DAQmxErrorReferenceCurrentInvalid'
p30066
S'(-200154)'
p30067
sS'DAQmx_AI_LVDT_Units'
p30068
S'0x0910'
p30069
sS'DAQmxErrorLines0To3ConfiguredForInput'
p30070
S'(-200122)'
p30071
sS'DAQmx_Val_DMA'
p30072
S'10054'
p30073
sS'DAQmx_DigPattern_RefTrig_When'
p30074
S'0x1438'
p30075
sS'DAQmxErrorCalChanReversePolyCoefNotSpecd'
p30076
S'(-200941)'
p30077
sS'DAQmxErrorTopologyNotSupportedByCfgTermBlock'
p30078
S'(-200256)'
p30079
sS'DAQmx_Val_Accelerometer'
p30080
S'10356'
p30081
sS'DAQmx_CI_Period_Div'
p30082
S'0x192E'
p30083
sS'DAQmxErrorRegisterNotWritable'
p30084
S'(-200393)'
p30085
sS'DAQmx_DO_DataXferMech'
p30086
S'0x2266'
p30087
sS'DAQmxErrorPALComponentTooOld'
p30088
S'(-50252)'
p30089
sS'DAQmx_Write_SleepTime'
p30090
S'0x22B2'
p30091
sS'DAQmxErrorCOReadyForNewValNotSupportedWithOnDemand'
p30092
S'(-200999)'
p30093
sS'DAQmxErrorRoutingDestTermPXIClk10InNotInSlot2_Routing'
p30094
S'(-89149)'
p30095
sS'DAQmxErrorDevNotInTask'
p30096
S'(-200482)'
p30097
sS'DAQmx_Val_Switch_Topology_2501_1_Wire_48x1_Mux'
p30098
S'"2501/1-Wire 48x1 Mux"'
p30099
sS'DAQmx_Val_NoChange'
p30100
S'10160'
p30101
sS'DAQmxErrorAIMaxTooLarge'
p30102
S'(-200579)'
p30103
sS'DAQmxErrorPALCalculationOverflow'
p30104
S'(-50175)'
p30105
sS'DAQmx_DigEdge_StartTrig_Src'
p30106
S'0x1407'
p30107
sS'DAQmx_CI_CtrTimebaseSrc'
p30108
S'0x0143'
p30109
sS'DAQmxErrorUnsupportedUnicodeByteOrderMarker'
p30110
S'(-201017)'
p30111
sS'DAQmxErrorDevOnlySupportsSampClkTimingAI'
p30112
S'(-200757)'
p30113
sS'DAQmx_DI_DataXferReqCond'
p30114
S'0x2264'
p30115
sS'DAQmxErrorPhysicalChanNotSupportedGivenSampTimingType653x'
p30116
S'(-200897)'
p30117
sS'DAQmxErrorDevOnlySupportsSampClkTimingAO'
p30118
S'(-200758)'
p30119
sS'DAQmx_PhysicalChan_TEDS_TemplateIDs'
p30120
S'0x228F'
p30121
sS'DAQmxErrorInvalidExcitValForScaling'
p30122
S'(-200318)'
p30123
sS'DAQmxErrorNoLastExtCalDateTimeLastExtCalNotDAQmx'
p30124
S'(-200804)'
p30125
sS'DAQmxErrorRoutingSrcTermPXIStarXNotInSlot2_Routing'
p30126
S'(-89147)'
p30127
sS'DAQmxErrorDisconnectionRequiredInScanlist'
p30128
S'(-200639)'
p30129
sS'DAQmxErrorMultiChanTypesInTask'
p30130
S'(-200559)'
p30131
sS'DAQmx_Val_Hz'
p30132
S'10373'
p30133
sS'DAQmxErrorOperationOnlyPermittedWhileScanning'
p30134
S'(-200177)'
p30135
sS'DAQmxErrorCannotCalculateNumSampsTaskNotStarted'
p30136
S'(-200343)'
p30137
sS'DAQmxErrorMemMapAndHWTimedSinglePoint'
p30138
S'(-200995)'
p30139
sS'DAQmxErrorValueInvalid'
p30140
S'(-54023)'
p30141
sS'DAQmxErrorSetupCalNeededBeforeAdjustCal'
p30142
S'(-201005)'
p30143
sS'DAQmxWarningPALResourceNotAvailable'
p30144
S'(50101)'
p30145
sS'DAQmxErrorCAPIReservedParamNotNULL'
p30146
S'(-200492)'
p30147
sS'DAQmx_Val_PXI'
p30148
S'12583'
p30149
sS'DAQmxErrorInvalidIdentifierInListAtEndOfSwitchAction'
p30150
S'(-200046)'
p30151
sS'DAQmxErrorExternalTimebaseRateNotKnownForDelay'
p30152
S'(-200149)'
p30153
sS'DAQmx_CO_CtrTimebase_DigSync_Enable'
p30154
S'0x227A'
p30155
sS'DAQmx_Val_SoundPressure_Microphone'
p30156
S'10354'
p30157
sS'DAQmxErrorCalChanForwardPolyCoefNotSpecd'
p30158
S'(-200940)'
p30159
sS'DAQmx_CI_CountEdges_InitialCnt'
p30160
S'0x0698'
p30161
sS'DAQmxErrorProgIODataXferForBufferedAO'
p30162
S'(-200767)'
p30163
sS'DAQmxErrorPALBadLibrarySpecifier'
p30164
S'(-50018)'
p30165
sS'DAQmxErrorFREQOUTCannotProduceDesiredFrequency2'
p30166
S'(-200736)'
p30167
sS'DAQmxErrorTooManyPretrigPlusMinPostTrigSamps'
p30168
S'(-200213)'
p30169
sS'DAQmx_Val_PatternMatches'
p30170
S'10254'
p30171
sS'DAQmx_Val_Switch_Topology_2532_1_Wire_Dual_8x32_Matrix'
p30172
S'"2532/1-Wire Dual 8x32 Matrix"'
p30173
sS'DAQmxErrorDriverDeviceGUIDNotFound_Routing'
p30174
S'(-88705)'
p30175
sS'DAQmxErrorTooManyPostTrigSampsPerChan'
p30176
S'(-200575)'
p30177
sS'DAQmxErrorBufferSizeNotMultipleOfEveryNSampsEventIntervalWhenDMA'
p30178
S'(-200877)'
p30179
sS'DAQmxErrorAIConvRateTooHigh'
p30180
S'(-200335)'
p30181
sS'DAQmx_AI_Bridge_ShuntCal_Select'
p30182
S'0x21D5'
p30183
sS'DAQmx_Val_ReservedForRouting'
p30184
S'10441'
p30185
sS'DAQmx_AI_AutoZeroMode'
p30186
S'0x1760'
p30187
sS'DAQmxError2InputPortCombinationGivenSampTimingType653x'
p30188
S'(-200929)'
p30189
sS'DAQmx_AO_DAC_Rng_Low'
p30190
S'0x182D'
p30191
sS'DAQmxErrorLinesAlreadyReservedForOutput'
p30192
S'(-200597)'
p30193
sS'DAQmxErrorDigPrptyCannotBeSetPerLine'
p30194
S'(-200641)'
p30195
sS'DAQmx_AnlgLvl_PauseTrig_Src'
p30196
S'0x1370'
p30197
sS'DAQmxErrorStartTrigTypeNotSupportedGivenTimingType'
p30198
S'(-200904)'
p30199
sS'DAQmxErrorPALLogicalBufferEmpty'
p30200
S'(-50406)'
p30201
sS'DAQmx_Sys_NIDAQMajorVersion'
p30202
S'0x1272'
p30203
sS'DAQmxErrorSwitchOpFailedDueToPrevError'
p30204
S'(-200674)'
p30205
sS'DAQmxErrorAOMinMaxNotSupportedDACRangeTooSmall'
p30206
S'(-200873)'
p30207
sS'DAQmx_CI_CtrTimebaseRate'
p30208
S'0x18B2'
p30209
sS'DAQmx_Exported_AdvCmpltEvent_Pulse_Width'
p30210
S'0x1654'
p30211
sS'DAQmxErrorClearIsLastInstructionInIfElseBlockInScript'
p30212
S'(-201012)'
p30213
sS'DAQmxWarningPALBadOffset'
p30214
S'(50007)'
p30215
sS'DAQmxErrorPXIStarAndClock10Sync'
p30216
S'(-200885)'
p30217
sS'DAQmx_Val_SameAsMasterTimebase'
p30218
S'10282'
p30219
sS'DAQmxErrorInternalTimebaseSourceRateCombo'
p30220
S'(-200134)'
p30221
sS'DAQmxErrorCAPIChanIndexInvalid'
p30222
S'(-200570)'
p30223
sS'DAQmx_DI_DigFltr_MinPulseWidth'
p30224
S'0x21D7'
p30225
sS'DAQmx_Read_DigitalLines_BytesPerChan'
p30226
S'0x217C'
p30227
sS'DAQmx_CO_Pulse_Ticks_InitialDelay'
p30228
S'0x0298'
p30229
sS'DAQmxErrorNoPathAvailableBetween2SwitchChans'
p30230
S'(-200180)'
p30231
sS'DAQmxErrorCounterMaxMinRangeTime'
p30232
S'(-200138)'
p30233
sS'DAQmxErrorAOBufferSizeZeroForSampClkTimingType'
p30234
S'(-200859)'
p30235
sS'DAQmxErrorCIInvalidTimingSrcForEventCntDueToSampMode'
p30236
S'(-200799)'
p30237
sS'DAQmxErrorPALSocketListenerInvalid'
p30238
S'(-50502)'
p30239
sS'DAQmxErrorReadyForTransferOutputTermNotSupportedGivenTimingType'
p30240
S'(-200913)'
p30241
sS'DAQmxErrorSampClockOutputTermNotSupportedGivenTimingType'
p30242
S'(-200910)'
p30243
sS'DAQmxErrorPALCommunicationsFault'
p30244
S'(-50401)'
p30245
sS'DAQmx_AI_ChanCal_Poly_ReverseCoeff'
p30246
S'0x22A0'
p30247
sS'DAQmxErrorMeasCalAdjustMainPathOutputImpedance'
p30248
S'(-200506)'
p30249
sS'DAQmx_CI_DataXferMech'
p30250
S'0x0200'
p30251
sS'DAQmxErrorVirtualTEDSFileNotFound'
p30252
S'(-200784)'
p30253
sS'DAQmxErrorInvalidCalConstOscillatorPhaseDACValue'
p30254
S'(-200518)'
p30255
sS'DAQmx_AI_Thrmcpl_Type'
p30256
S'0x1050'
p30257
sS'DAQmx_Sys_Tasks'
p30258
S'0x1267'
p30259
sS'DAQmxErrorInvalidEnumValueSpecd'
p30260
S'(-201054)'
p30261
sS'DAQmxErrorStopTriggerHasNotOccurred'
p30262
S'(-200008)'
p30263
sS'DAQmxWarningPALFirmwareFault'
p30264
S'(50151)'
p30265
sS'DAQmx_AI_CurrentShunt_Resistance'
p30266
S'0x17F3'
p30267
sS'DAQmx_Val_Interlocked'
p30268
S'12549'
p30269
sS'DAQmxErrorTermCfgdToDifferentMinPulseWidthByAnotherProperty'
p30270
S'(-200774)'
p30271
sS'DAQmx_Val_Switch_Topology_2532_1_Wire_16x32_Matrix'
p30272
S'"2532/1-Wire 16x32 Matrix"'
p30273
sS'DAQmxErrorCascadeDigitizationModeNotSupported'
p30274
S'(-201034)'
p30275
sS'DAQmxErrorMeasCalAdjustOscillatorPhaseDAC'
p30276
S'(-200521)'
p30277
sS'DAQmx_Read_ChangeDetect_HasOverflowed'
p30278
S'0x2194'
p30279
sS'DAQmx_Val_Switch_Topology_2527_1_Wire_64x1_Mux'
p30280
S'"2527/1-Wire 64x1 Mux"'
p30281
sS'DAQmxErrorDeviceNameNotFound_Routing'
p30282
S'(-88717)'
p30283
sS'DAQmxErrorDataXferCustomThresholdNotSpecified'
p30284
S'(-200943)'
p30285
sS'DAQmx_CI_TwoEdgeSep_First_DigSync_Enable'
p30286
S'0x2213'
p30287
sS'DAQmxErrorSelfCalFailedExtNoiseOrRefVoltageOutOfCal'
p30288
S'(-200545)'
p30289
sS'DAQmx_Cal_UserDefinedInfo_MaxSize'
p30290
S'0x191C'
p30291
sS'DAQmxErrorActiveDevNotSupportedWithChanExpansion'
p30292
S'(-201094)'
p30293
sS'DAQmx_Val_Switch_Topology_1127_4_Wire_16x1_Mux'
p30294
S'"1127/4-Wire 16x1 Mux"'
p30295
sS'DAQmxErrorTrailingSpaceInString'
p30296
S'(-200554)'
p30297
sS'DAQmxErrorDigitalTerminalSpecifiedMoreThanOnce'
p30298
S'(-200014)'
p30299
sS'DAQmx_CI_Encoder_ZIndexEnable'
p30300
S'0x0890'
p30301
sS'DAQmx_AI_DataXferCustomThreshold'
p30302
S'0x230C'
p30303
sS'DAQmxErrorCanNotPerformOpWhenNoDevInTask'
p30304
S'(-200477)'
p30305
sS'DAQmxWarningPLLUnlocked'
p30306
S'(200007)'
p30307
sS'DAQmxErrorEveryNSampsTransferredFromBufferNotForInput'
p30308
S'(-200965)'
p30309
sS'DAQmx_Buf_Output_BufSize'
p30310
S'0x186D'
p30311
sS'DAQmxErrorRefTrigDigPatternChanNotInTask'
p30312
S'(-200889)'
p30313
sS'DAQmx_Val_mVoltsPerVoltPerMilliInch'
p30314
S'12505'
p30315
sS'DAQmx_AI_ChanCal_Poly_ForwardCoeff'
p30316
S'0x229F'
p30317
sS'DAQmxErrorSamplesNoLongerWriteable'
p30318
S'(-200289)'
p30319
sS'DAQmxErrorClearTEDSNotSupportedOnRT'
p30320
S'(-200809)'
p30321
sS'DAQmx_Val_Switch_Topology_1194_Quad_4x1_Mux'
p30322
S'"1194/Quad 4x1 Mux"'
p30323
sS'DAQmxErrorCOWritePulseHighTicksNotSupported'
p30324
S'(-200688)'
p30325
sS'DAQmxWarningLowpassFilterSettlingTimeExceedsDriverTimeBetween2ADCConversions'
p30326
S'(200039)'
p30327
sS'DAQmxErrorClearIsLastInstructionOfLoopInScript'
p30328
S'(-200037)'
p30329
sS'DAQmx_CO_CtrTimebaseSrc'
p30330
S'0x0339'
p30331
sS'DAQmxErrorPrptyGetSpecdSingleActiveChanFailedDueToDifftVals'
p30332
S'(-200659)'
p30333
sS'DAQmxErrorInvalidCfgCalAdjustMainPreAmpOffset'
p30334
S'(-200510)'
p30335
sS'DAQmxErrorWriteChanTypeMismatch'
p30336
S'(-200526)'
p30337
sS'DAQmxErrorPALFileCloseFault'
p30338
S'(-50205)'
p30339
sS'DAQmxErrorCantConfigureTEDSForChan'
p30340
S'(-200791)'
p30341
sS'DAQmx_CI_CountEdges_DirTerm'
p30342
S'0x21E1'
p30343
sS'DAQmx_DigLvl_PauseTrig_DigFltr_TimebaseSrc'
p30344
S'0x222A'
p30345
sS'DAQmx_CI_CtrTimebaseActiveEdge'
p30346
S'0x0142'
p30347
sS'DAQmxWarningSampClkRateViolatesSettlingTimeForGen'
p30348
S'(200040)'
p30349
sS'DAQmxErrorMeasCalAdjustMainPathPreAmpOffset'
p30350
S'(-200502)'
p30351
sS'DAQmx_Val_Switch_Topology_2501_2_Wire_24x1_Mux'
p30352
S'"2501/2-Wire 24x1 Mux"'
p30353
sS'DAQmx_CO_Count'
p30354
S'0x0293'
p30355
sS'DAQmx_DO_UseOnlyOnBrdMem'
p30356
S'0x2265'
p30357
sS'DAQmx_Val_Switch_Topology_2503_4_Wire_12x1_Mux'
p30358
S'"2503/4-Wire 12x1 Mux"'
p30359
sS'DAQmxErrorDevOnboardMemOverflowDuringHWTimedNonBufferedGen'
p30360
S'(-200795)'
p30361
sS'DAQmxErrorDigFilterMinPulseWidthSetWhenTristateIsFalse'
p30362
S'(-200733)'
p30363
sS'DAQmxWarningPALResourceNotReserved'
p30364
S'(50102)'
p30365
sS'DAQmx_PersistedTask_AllowInteractiveEditing'
p30366
S'0x22CD'
p30367
sS'DAQmxErrorPALBadWriteOffset'
p30368
S'(-50013)'
p30369
sS'DAQmxErrorCannotConnectChannelToItself'
p30370
S'(-200187)'
p30371
sS'DAQmxErrorKeywordExpectedInScript'
p30372
S'(-200027)'
p30373
sS'DAQmx_DO_Tristate'
p30374
S'0x18F3'
p30375
sS'DAQmx_Val_4Wire'
p30376
S'4'
p30377
sS'DAQmxErrorSamplesCanNotYetBeWritten'
p30378
S'(-200292)'
p30379
sS'DAQmx_CO_Pulse_HighTime'
p30380
S'0x18BA'
p30381
sS'DAQmx_Val_Switch_Topology_2567_Independent'
p30382
S'"2567/Independent"'
p30383
sS'DAQmx_SwitchChan_MaxACSwitchPwr'
p30384
S'0x0644'
p30385
sS'DAQmxErrorCantSyncToExtStimulusFreqDuringCal'
p30386
S'(-200442)'
p30387
sS'DAQmx_SelfCal_LastTemp'
p30388
S'0x1864'
p30389
sS'DAQmx_MasterTimebase_Src'
p30390
S'0x1343'
p30391
sS'DAQmx_Exported_WatchdogExpiredEvent_OutputTerm'
p30392
S'0x21AA'
p30393
sS'DAQmx_Val_SCXI'
p30394
S'12584'
p30395
sS'DAQmxErrorDevCannotProduceMinPulseWidth'
p30396
S'(-200777)'
p30397
sS'DAQmx_ChanType'
p30398
S'0x187F'
p30399
sS'DAQmxErrorZeroSlopeLinearScale'
p30400
S'(-200409)'
p30401
sS'DAQmx_CI_CtrTimebase_DigSync_Enable'
p30402
S'0x2275'
p30403
sS'DAQmxWarningSampValCoercedToMax'
p30404
S'(200021)'
p30405
sS'DAQmxErrorInvalidTrigCouplingExceptForExtTrigChan'
p30406
S'(-200548)'
p30407
sS'DAQmx_DigEdge_StartTrig_Edge'
p30408
S'0x1404'
p30409
sS'DAQmxErrorMarkerOutsideWaveformInScript'
p30410
S'(-200029)'
p30411
sS'DAQmxErrorPALMemoryPageLockFailed'
p30412
S'(-50353)'
p30413
sS'DAQmxErrorAOMinMaxNotSupportedDACRefValTooSmall'
p30414
S'(-200868)'
p30415
sS'DAQmx_HshkTrig_Type'
p30416
S'0x22B7'
p30417
sS'DAQmxErrorNoChangeDetectionOnSelectedLineForDevice'
p30418
S'(-201020)'
p30419
sS'DAQmx_AI_RVDT_Sensitivity'
p30420
S'0x0903'
p30421
sS'DAQmxErrorPALThreadControllerIsNotThreadCreator'
p30422
S'(-50602)'
p30423
sS'DAQmx_AO_DataXferMech'
p30424
S'0x0134'
p30425
sS'DAQmxWarningRateViolatesSettlingTime'
p30426
S'(200011)'
p30427
sS'DAQmxErrorDotNetAPINotUnsigned32BitNumber'
p30428
S'(-200499)'
p30429
sS'DAQmx_DO_OutputDriveType'
p30430
S'0x1137'
p30431
sS'DAQmxErrorACCouplingNotAllowedWith50OhmImpedance'
p30432
S'(-200411)'
p30433
sS'DAQmxErrorInvalidSignalModifier_Routing'
p30434
S'(-89150)'
p30435
sS'DAQmxErrorPALMemoryConfigurationFault'
p30436
S'(-50350)'
p30437
sS'DAQmxErrorDuplicatePhysicalChansNotSupported'
p30438
S'(-200072)'
p30439
sS'DAQmxErrorCantSavePerLineConfigDigChanSoInteractiveEditsAllowed'
p30440
S'(-200922)'
p30441
sS'DAQmx_AI_Thrmcpl_CJCSrc'
p30442
S'0x1035'
p30443
sS'DAQmx_AI_ResolutionUnits'
p30444
S'0x1764'
p30445
sS'DAQmxErrorInvalidJumperedAttr'
p30446
S'(-200259)'
p30447
sS'DAQmxErrorPrptyGetSpecdActiveItemFailedDueToDifftValues'
p30448
S'(-200708)'
p30449
sS'DAQmx_Val_ZeroVolts'
p30450
S'12526'
p30451
sS'DAQmxErrorSuppliedVoltageDataOutsideSpecifiedRange'
p30452
S'(-200075)'
p30453
sS'DAQmxErrorReversePolyOrderNotPositive'
p30454
S'(-200402)'
p30455
sS'_NI_uInt32_DEFINED_'
p30456
g28678
sS'DAQmxWarningPALFunctionNotFound'
p30457
S'(50255)'
p30458
sS'DAQmx_AnlgWin_RefTrig_Top'
p30459
S'0x1429'
p30460
sS'DAQmxErrorInvalidCalConstOffsetDACValue'
p30461
S'(-200517)'
p30462
sS'DAQmxErrorPropertyValNotValidTermName'
p30463
S'(-200354)'
p30464
sS'DAQmx_CI_GPS_SyncMethod'
p30465
S'0x1092'
p30466
sS'DAQmx_Val_Lvl'
p30467
S'10210'
p30468
sS'DAQmxErrorExpectedTerminatorInList'
p30469
S'(-200063)'
p30470
sS'DAQmxErrorInvalidSampModeForPositionMeas'
p30471
S'(-200813)'
p30472
sS'DAQmx_Exported_SampClk_Pulse_Polarity'
p30473
S'0x1664'
p30474
sS'DAQmx_AI_MemMapEnable'
p30475
S'0x188C'
p30476
sS'DAQmx_Val_AboveLvl'
p30477
S'10093'
p30478
sS'DAQmxErrorTEDSDoesNotContainPROM'
p30479
S'(-200822)'
p30480
sS'DAQmx_Val_OnBrdMemNotFull'
p30481
S'10242'
p30482
sS'DAQmxErrorRoutingDestTermPXIChassisNotIdentified'
p30483
S'(-200699)'
p30484
sS'DAQmxErrorIncorrectPassword'
p30485
S'(-200110)'
p30486
sS'DAQmxErrorGenStoppedToPreventIntermediateBufferRegenOfOldSamples'
p30487
S'(-200291)'
p30488
sS'DAQmxErrorWriteFailsBufferSizeAutoConfigured'
p30489
S'(-200547)'
p30490
sS'DAQmx_AI_StrainGage_Cfg'
p30491
S'0x0982'
p30492
sS'DAQmx_Exported_CtrOutEvent_Pulse_Polarity'
p30493
S'0x1718'
p30494
sS'DAQmxErrorResourceNotInPool_Routing'
p30495
S'(-88708)'
p30496
sS'DAQmx_Val_AccelUnit_g'
p30497
S'10186'
p30498
sS'DAQmx_Val_CountEdges'
p30499
S'10125'
p30500
sS'DAQmx_CI_Encoder_BInput_DigSync_Enable'
p30501
S'0x2204'
p30502
sS'DAQmx_Val_Switch_Topology_1161_8_SPDT'
p30503
S'"1161/8-SPDT"'
p30504
sS'DAQmxErrorSwitchChanInUse'
p30505
S'(-200200)'
p30506
sS'DAQmxErrorPALDispatcherAlreadyExported'
p30507
S'(-50500)'
p30508
sS'DAQmx_CI_AngEncoder_InitialAngle'
p30509
S'0x0881'
p30510
sS'DAQmxErrorChanSizeTooBigForU32PortWrite'
p30511
S'(-200566)'
p30512
sS'DAQmx_Val_Switch_Topology_1163R_Octal_4x1_Mux'
p30513
S'"1163R/Octal 4x1 Mux"'
p30514
sS'DAQmx_CI_Encoder_AInput_DigFltr_Enable'
p30515
S'0x21FB'
p30516
sS'DAQmxErrorBuiltInCJCSrcNotSupported'
p30517
S'(-200576)'
p30518
sS'DAQmxErrorCouldNotConnectToServer_Routing'
p30519
S'(-88900)'
p30520
sS'DAQmxErrorPALBadDataSize'
p30521
S'(-50005)'
p30522
sS'DAQmx_AnlgEdge_RefTrig_Src'
p30523
S'0x1424'
p30524
sS'DAQmxWarningReadOffsetCoercion'
p30525
S'(200019)'
p30526
sS'DAQmxErrorSelfTestFailed'
p30527
S'(-200020)'
p30528
sS'DAQmx_AI_LVDT_SensitivityUnits'
p30529
S'0x219A'
p30530
sS'DAQmx_Val_TwoPulseCounting'
p30531
S'10313'
p30532
sS'DAQmxErrorUnableToLocateErrorResources'
p30533
S'(-200500)'
p30534
sS'DAQmxErrorPALBadWriteCount'
p30535
S'(-50014)'
p30536
sS'DAQmxErrorPasswordRequired'
p30537
S'(-200111)'
p30538
sS'DAQmxErrorSensorValTooLow'
p30539
S'(-200536)'
p30540
sS'DAQmx_Val_Freq_Voltage'
p30541
S'10181'
p30542
sS'DAQmxErrorStartTrigDigPatternChanNotTristated'
p30543
S'(-200886)'
p30544
sS'DAQmxErrorScaledMinEqualMax'
p30545
S'(-200603)'
p30546
sS'DAQmx_Val_InsideWin'
p30547
S'10199'
p30548
sS'DAQmxErrorDACUnderflow'
p30549
S'(-200018)'
p30550
sS'DAQmxErrorCannotDetectChangesWhenTristateIsFalse'
p30551
S'(-200730)'
p30552
sS'DAQmx_Val_Switch_Topology_1127_2_Wire_4x8_Matrix'
p30553
S'"1127/2-Wire 4x8 Matrix"'
p30554
sS'DAQmx_Val_LeavingWin'
p30555
S'10208'
p30556
sS'DAQmxErrorIdentifierInUse'
p30557
S'(-201028)'
p30558
sS'DAQmx_Val_LeftJustified'
p30559
S'10209'
p30560
sS'DAQmx_Val_AnlgEdge'
p30561
S'10099'
p30562
sS'DAQmxErrorCalibrationSessionAlreadyOpen'
p30563
S'(-200108)'
p30564
sS'DAQmx_Val_Switch_Topology_1129_2_Wire_4x64_Matrix'
p30565
S'"1129/2-Wire 4x64 Matrix"'
p30566
sS'DAQmx_DelayFromSampClk_DelayUnits'
p30567
S'0x1304'
p30568
sS'DAQmxErrorPALFunctionObsolete'
p30569
S'(-50254)'
p30570
sS'DAQmx_Val_Switch_Topology_2501_1_Wire_48x1_Amplified_Mux'
p30571
S'"2501/1-Wire 48x1 Amplified Mux"'
p30572
sS'DAQmxErrorDifftInternalAIInputSrcs'
p30573
S'(-200677)'
p30574
sS'DAQmx_AI_Accel_Units'
p30575
S'0x0673'
p30576
sS'DAQmxErrorPALMemoryBlockCheckFailed'
p30577
S'(-50354)'
p30578
sS'DAQmxErrorDeviceIDNotSpecifiedInList'
p30579
S'(-200055)'
p30580
sS'DAQmxErrorBufferedAndDataXferPIO'
p30581
S'(-200847)'
p30582
sS'DAQmx_Val_GroupByChannel'
p30583
g28779
sS'DAQmxErrorUnexpectedIDFollowingSwitchOpInList'
p30584
S'(-200529)'
p30585
sS'DAQmxErrorCAPISyncCallbackNotSupportedOnThisPlatform'
p30586
S'(-200942)'
p30587
sS'DAQmx_Exported_RdyForXferEvent_OutputTerm'
p30588
S'0x22B5'
p30589
sS'DAQmxErrorDACAllowConnToGndNotSupportedByDevWhenRefSrcExt'
p30590
S'(-200974)'
p30591
sS'DAQmx_Val_GroupByScanNumber'
p30592
g28873
sS'DAQmxErrorAnalogMultiSampWriteNotSupported'
p30593
S'(-200539)'
p30594
sS'DAQmxErrorOffsetTooSmall'
p30595
S'(-200268)'
p30596
sS'DAQmx_Val_AdvCmpltEvent'
p30597
S'12492'
p30598
sS'DAQmxErrorScriptHasInvalidCharacter'
p30599
S'(-200023)'
p30600
sS'DAQmx_Val_10MHzRefClock'
p30601
S'12536'
p30602
sS'DAQmxErrorPALSocketListenerAlreadyRegistered'
p30603
S'(-50501)'
p30604
sS'DAQmxErrorChangeDetectionOutputTermNotSupportedGivenTimingType'
p30605
S'(-200914)'
p30606
sS'DAQmxErrorInvalidSubsetLengthWithinLoopInScript'
p30607
S'(-200249)'
p30608
sS'DAQmxErrorSwitchOperationNotSupported'
p30609
S'(-200193)'
p30610
sS'DAQmxWarningPALResourceNotInitialized'
p30611
S'(50104)'
p30612
sS'DAQmxErrorActivePhysChanNotSpecdWhenGetting1LinePrpty'
p30613
S'(-200624)'
p30614
sS'DAQmxErrorGetPropertyNotOutputBufferedTask'
p30615
S'(-200454)'
p30616
sS'DAQmxErrorPrimingCfgFIFO'
p30617
S'(-200329)'
p30618
sS'DAQmx_Val_Switch_Topology_2576_Independent'
p30619
S'"2576/Independent"'
p30620
sS'DAQmx_AO_Gain'
p30621
S'0x0118'
p30622
sS'DAQmxErrorDataVoltageLowAndHighIncompatible'
p30623
S'(-200902)'
p30624
sS'DAQmxErrorTooManyEventsGenerated'
p30625
S'(-200992)'
p30626
sS'DAQmxError2OutputPortCombinationGivenSampTimingType653x'
p30627
S'(-200930)'
p30628
sS'DAQmx_Val_Switch_Topology_1130_1_Wire_8x32_Matrix'
p30629
S'"1130/1-Wire 8x32 Matrix"'
p30630
sS'DAQmxErrorVirtualChanDoesNotExist'
p30631
S'(-200488)'
p30632
sS'DAQmx_Val_SampleClock'
p30633
S'12487'
p30634
sS'DAQmxErrorProcedureNameExpectedInScript'
p30635
S'(-200025)'
p30636
sS'DAQmx_Val_Period'
p30637
S'10256'
p30638
sS'DAQmxErrorTrigBusLineNotAvail'
p30639
S'(-200226)'
p30640
sS'DAQmx_AI_Accel_Sensitivity'
p30641
S'0x0692'
p30642
sS'DAQmxErrorReferenceFrequencyInvalid'
p30643
S'(-200156)'
p30644
sS'DAQmxErrorPrescalerNot1ForInputTerminal'
p30645
S'(-200841)'
p30646
sS'DAQmxErrorTEDSTemplateParametersNotSupported'
p30647
S'(-200754)'
p30648
sS'DAQmxErrorActivePhysChanTooManyLinesSpecdWhenGettingPrpty'
p30649
S'(-200625)'
p30650
sS'DAQmxErrorMoreThanOneMatchForSpecdDevice'
p30651
S'(-201043)'
p30652
sS'DAQmxErrorLocalChannelSpecdWithNoParentTask'
p30653
S'(-201073)'
p30654
sS'DAQmxErrorReversePowerProtectionActivated'
p30655
S'(-200617)'
p30656
sS'DAQmx_Val_Switch_Topology_2593_Independent'
p30657
S'"2593/Independent"'
p30658
sS'DAQmxErrorHWTimedSinglePointAndDataXferNotProgIO'
p30659
S'(-200996)'
p30660
sS'DAQmxErrorOnlyFrontEndChanOpsDuringScan'
p30661
S'(-200377)'
p30662
sS'DAQmxErrorMultScanOpsInOneChassis'
p30663
S'(-200619)'
p30664
sS'DAQmx_Scale_Map_ScaledMax'
p30665
S'0x1229'
p30666
sS'DAQmxErrorPreScaledMinEqualMax'
p30667
S'(-200602)'
p30668
sS'DAQmx_Val_Switch_Topology_1130_1_Wire_4x64_Matrix'
p30669
S'"1130/1-Wire 4x64 Matrix"'
p30670
sS'DAQmx_PauseTrig_Type'
p30671
S'0x1366'
p30672
sS'DAQmx_SwitchDev_Settled'
p30673
S'0x1243'
p30674
sS'DAQmx_AnlgWin_PauseTrig_Top'
p30675
S'0x1376'
p30676
sS'DAQmx_Val_FiniteSamps'
p30677
S'10178'
p30678
sS'DAQmxErrorInvalidTimeFormat'
p30679
S'(-201036)'
p30680
sS'DAQmxErrorPALFeatureDisabled'
p30681
S'(-50265)'
p30682
sS'DAQmx_SyncPulse_MinDelayToStart'
p30683
S'0x223F'
p30684
sS'DAQmx_DelayFromSampClk_Delay'
p30685
S'0x1317'
p30686
sS'DAQmxErrorZeroForwardPolyScaleCoeffs'
p30687
S'(-200407)'
p30688
sS'DAQmx_Val_LossyLSBRemoval'
p30689
S'12556'
p30690
sS'DAQmxErrorInvalidAIGainCalConst'
p30691
S'(-200718)'
p30692
sS'DAQmx_CI_AngEncoder_PulsesPerRev'
p30693
S'0x0875'
p30694
sS'DAQmxErrorChanCalTableNumScaledNotEqualNumPrescaledVals'
p30695
S'(-200938)'
p30696
sS'DAQmxErrorInterconnectLineReserved'
p30697
S'(-54010)'
p30698
sS'DAQmxErrorChanCalTableScaledValsNotSpecd'
p30699
S'(-200937)'
p30700
sS'DAQmx_Val_Switch_Topology_1130_2_Wire_Quad_32x1_Mux'
p30701
S'"1130/2-Wire Quad 32x1 Mux"'
p30702
sS'DAQmx_ExtCal_RecommendedInterval'
p30703
S'0x1868'
p30704
sS'DAQmx_Val_Diff'
p30705
S'10106'
p30706
sS'DAQmx_ArmStartTrig_Type'
p30707
S'0x1414'
p30708
sS'DAQmx_Val_AnlgLvl'
p30709
S'10101'
p30710
sS'DAQmx_Val_OnDemand'
p30711
S'10390'
p30712
sS'DAQmx_AI_SampAndHold_Enable'
p30713
S'0x181A'
p30714
sS'DAQmx_PersistedChan_Author'
p30715
S'0x22D0'
p30716
sS'DAQmxErrorNULLPtr'
p30717
S'(-200604)'
p30718
sS'DAQmxWarningRateViolatesMinADCRate'
p30719
S'(200035)'
p30720
sS'DAQmx_Exported_StartTrig_OutputTerm'
p30721
S'0x0584'
p30722
sS'DAQmxErrorInvalidCloseAction'
p30723
S'(-200440)'
p30724
sS'DAQmxErrorInvalidDigDataWrite'
p30725
S'(-200562)'
p30726
sS'DAQmxErrorCannotPerformOpWhenTaskNotRunning'
p30727
S'(-200475)'
p30728
sS'DAQmxErrorChangeDetectionChanNotTristated'
p30729
S'(-200925)'
p30730
sS'DAQmxErrorVirtualChanNameUsed'
p30731
S'(-200171)'
p30732
sS'DAQmx_Val_Switch_Topology_1195_Quad_4x1_Mux'
p30733
S'"1195/Quad 4x1 Mux"'
p30734
sS'DAQmxErrorFailedToEnableHighSpeedInputClock'
p30735
S'(-200627)'
p30736
sS'DAQmx_AO_IdleOutputBehavior'
p30737
S'0x2240'
p30738
sS'DAQmx_Val_Volts'
p30739
S'10348'
p30740
sS'DAQmx_Dev_PCI_BusNum'
p30741
S'0x2327'
p30742
sS'DAQmxErrorCantSaveChanWithPolyCalScaleAndAllowInteractiveEdit'
p30743
S'(-200977)'
p30744
sS'DAQmx_WatchdogExpirTrig_Type'
p30745
S'0x21A3'
p30746
sS'DAQmxErrorRoutingDestTermPXIStarInSlot2'
p30747
S'(-200701)'
p30748
sS'DAQmxErrorValueFoundInInvalidColumn'
p30749
S'(-201066)'
p30750
sS'DAQmxErrorPALBadReadMode'
p30751
S'(-50009)'
p30752
sS'DAQmxErrorRouteSrcAndDestSame'
p30753
S'(-200326)'
p30754
sS'DAQmxErrorInvalidCalVoltageForGivenGain'
p30755
S'(-200750)'
p30756
sS'DAQmxErrorExtCalAdjustExtRefVoltageFailed'
p30757
S'(-200546)'
p30758
sS'DAQmxErrorCantUsePort1AloneGivenSampTimingTypeOn653x'
p30759
S'(-200899)'
p30760
sS'DAQmx_Scale_Map_PreScaledMin'
p30761
S'0x1232'
p30762
sS'DAQmxErrorSyncNoDevSampClkTimebaseOrSyncPulseInPXISlot2'
p30763
S'(-200852)'
p30764
sS'DAQmx_Val_Switch_Topology_1128_2_Wire_32x1_Mux'
p30765
S'"1128/2-Wire 32x1 Mux"'
p30766
sS'DAQmx_Val_5Wire'
p30767
g29432
sS'DAQmx_Val_Switch_Topology_1128_4_Wire_16x1_Mux'
p30768
S'"1128/4-Wire 16x1 Mux"'
p30769
sS'DAQmx_AI_RTD_R0'
p30770
S'0x1030'
p30771
sS'DAQmx_Val_Switch_Topology_1130_1_Wire_Quad_64x1_Mux'
p30772
S'"1130/1-Wire Quad 64x1 Mux"'
p30773
sS'DAQmxErrorPALMessageUnderflow'
p30774
S'(-50651)'
p30775
sS'DAQmxErrorPALBusError'
p30776
S'(-50413)'
p30777
sS'DAQmx_Val_AandB'
p30778
S'12515'
p30779
sS'DAQmxErrorInvalidCharInPattern'
p30780
S'(-200496)'
p30781
sS'DAQmxErrorWaveformInScriptNotInMem'
p30782
S'(-200028)'
p30783
sS'DAQmx_AO_DAC_Ref_Val'
p30784
S'0x1832'
p30785
sS'DAQmxErrorCOWritePulseLowTicksNotSupported'
p30786
S'(-200689)'
p30787
sS'DAQmx_CI_GPS_SyncSrc'
p30788
S'0x1093'
p30789
sS'DAQmxErrorRepeatedPhysicalChan'
p30790
S'(-200371)'
p30791
sS'DAQmx_CO_CtrTimebase_DigFltr_TimebaseSrc'
p30792
S'0x2278'
p30793
sS'DAQmx_Watchdog_HasExpired'
p30794
S'0x21A8'
p30795
sS'DAQmxErrorEveryNSamplesAcqIntoBufferEventNotSupportedByDevice'
p30796
S'(-200981)'
p30797
sS'DAQmx_Val_CountDown'
p30798
S'10124'
p30799
sS'DAQmx_Val_Falling'
p30800
S'10171'
p30801
sS'DAQmxErrorChangeDetectionChanNotInTask'
p30802
S'(-200926)'
p30803
sS'DAQmxErrorLabVIEWInvalidTaskOrChans'
p30804
S'(-200428)'
p30805
sS'DAQmx_Hshk_DelayAfterXfer'
p30806
S'0x22C2'
p30807
sS'DAQmxErrorWatchdogExpirationStateNotEqualForLinesInPort'
p30808
S'(-200665)'
p30809
sS'DAQmx_PersistedChan_AllowInteractiveEditing'
p30810
S'0x22D1'
p30811
sS'DAQmx_Val_Switch_Topology_2532_1_Wire_8x64_Matrix'
p30812
S'"2532/1-Wire 8x64 Matrix"'
p30813
sS'DAQmxErrorReferenceResistanceInvalid'
p30814
S'(-200155)'
p30815
sS'DAQmx_Val_Save_AllowInteractiveDeletion'
p30816
S'(1<<2)'
p30817
sS'DAQmx_DigEdge_StartTrig_DigFltr_Enable'
p30818
S'0x2223'
p30819
sS'DAQmxErrorPALTransferOverread'
p30820
S'(-50411)'
p30821
sS'DAQmx_CO_Pulse_LowTicks'
p30822
S'0x1171'
p30823
sS'DAQmx_RefTrig_Type'
p30824
S'0x1419'
p30825
sS'DAQmx_AO_OutputImpedance'
p30826
S'0x1490'
p30827
sS'DAQmx_CI_LinEncoder_DistPerPulse'
p30828
S'0x0911'
p30829
sS'DAQmx_Val_Switch_Topology_2565_16_SPST'
p30830
S'"2565/16-SPST"'
p30831
sS'DAQmx_CO_CtrTimebase_DigFltr_TimebaseRate'
p30832
S'0x2279'
p30833
sS'DAQmxErrorUnexpectedSwitchActionInList'
p30834
S'(-200065)'
p30835
sS'DAQmxErrorNoTEDSTerminalBlock'
p30836
S'(-200743)'
p30837
sS'DAQmxErrorUnexpectedIdentifierInFullySpecifiedPathInList'
p30838
S'(-200204)'
p30839
sS'DAQmx_Val_WaitForHandshakeTriggerDeassert'
p30840
S'12551'
p30841
sS'DAQmx_PersistedChan_AllowInteractiveDeletion'
p30842
S'0x22D2'
p30843
sS'DAQmxErrorResourceAlreadyReserved'
p30844
S'(-200022)'
p30845
sS'DAQmx_Val_SameAsSampTimebase'
p30846
S'10284'
p30847
sS'DAQmx_StartTrig_Delay'
p30848
S'0x1856'
p30849
sS'DAQmx_AO_Resolution'
p30850
S'0x182C'
p30851
sS'DAQmx_Val_Amps'
p30852
S'10342'
p30853
sS'DAQmx_Val_DoNotWrite'
p30854
S'12540'
p30855
sS'DAQmxErrorOddTotalBufferSizeToWrite'
p30856
S'(-200693)'
p30857
sS'DAQmxErrorActionSeparatorRequiredAfterBreakingConnectionInScanlist'
p30858
S'(-200637)'
p30859
sS'DAQmx_Val_B'
p30860
S'12514'
p30861
sS'DAQmx_Val_A'
p30862
S'12513'
p30863
sS'DAQmx_AI_Bridge_ShuntCal_GainAdjust'
p30864
S'0x193F'
p30865
sS'DAQmx_Val_Switch_Topology_2529_2_Wire_8x16_Matrix'
p30866
S'"2529/2-Wire 8x16 Matrix"'
p30867
sS'DAQmxErrorInvalidAOGainCalConst'
p30868
S'(-200720)'
p30869
sS'DAQmx_Val_High'
p30870
S'10192'
p30871
sS'DAQmxErrorWriteWhenTaskNotRunningCOTicks'
p30872
S'(-200876)'
p30873
sS'DAQmxErrorWriteRecoveryCannotKeepUpInHWTimedSinglePoint'
p30874
S'(-201021)'
p30875
sS'DAQmx_AI_Excit_UseMultiplexed'
p30876
S'0x2180'
p30877
sS'DAQmxErrorAOCallWriteBeforeStartForSampClkTimingType'
p30878
S'(-200858)'
p30879
sS'DAQmx_Val_g'
p30880
S'10186'
p30881
sS'DAQmxWarningPXIDevTempExceedsMaxOpTemp'
p30882
S'(200030)'
p30883
sS'DAQmxErrorSyncPulseMinDelayToStartNeededForExtSyncPulseSrc'
p30884
S'(-201091)'
p30885
sS'DAQmxErrorSignalEventAlreadyRegistered'
p30886
S'(-200949)'
p30887
sS'DAQmx_AnlgLvl_PauseTrig_Coupling'
p30888
S'0x2236'
p30889
sS'DAQmx_Val_Switch_Topology_2532_1_Wire_4x128_Matrix'
p30890
S'"2532/1-Wire 4x128 Matrix"'
p30891
sS'DAQmxErrorLeadingSpaceInString'
p30892
S'(-200553)'
p30893
sS'DAQmxErrorInvalidRecordNum'
p30894
S'(-200410)'
p30895
sS'DAQmx_Interlocked_HshkTrig_AssertedLvl'
p30896
S'0x22B9'
p30897
sS'DAQmx_AI_ChanCal_OperatorName'
p30898
S'0x22A3'
p30899
sS'DAQmxErrorUnitsNotFromCustomScale'
p30900
S'(-200447)'
p30901
sS'DAQmx_Val_Task_Stop'
p30902
g28873
sS'DAQmx_Val_DigPattern'
p30903
S'10398'
p30904
sS'DAQmxErrorTEDSLinearMappingSlopeZero'
p30905
S'(-200764)'
p30906
sS'DAQmxErrorCtrExportSignalNotPossible'
p30907
S'(-200359)'
p30908
sS'DAQmxErrorSuitableTimebaseNotFoundFrequencyCombo'
p30909
S'(-200136)'
p30910
sS'DAQmxErrorAttrCannotBeSet'
p30911
S'(-200231)'
p30912
sS'DAQmx_SampClk_DigFltr_Enable'
p30913
S'0x221E'
p30914
sS'DAQmxErrorSubsetOutsideWaveformInScript'
p30915
S'(-200030)'
p30916
sS'DAQmx_Val_BreakBeforeMake'
p30917
S'10110'
p30918
sS'DAQmx_DigEdge_ArmStartTrig_DigFltr_TimebaseSrc'
p30919
S'0x222F'
p30920
sS'DAQmx_Val_NRSE'
p30921
S'10078'
p30922
sS'DAQmxErrorNoPolyScaleCoeffs'
p30923
S'(-200404)'
p30924
sS'DAQmx_Val_Temp_BuiltInSensor'
p30925
S'10311'
p30926
sS'DAQmx_Val_Handshake'
p30927
S'10389'
p30928
sS'DAQmx_Val_Switch_Topology_2529_2_Wire_Dual_4x16_Matrix'
p30929
S'"2529/2-Wire Dual 4x16 Matrix"'
p30930
sS'DAQmx_DI_NumLines'
p30931
S'0x2178'
p30932
sS'DAQmxErrorChansAlreadyConnected'
p30933
S'(-200184)'
p30934
sS'DAQmxErrorOutputBoardClkDCMBecameUnlocked'
p30935
S'(-200388)'
p30936
sS'DAQmxErrorDelayFromStartTrigTooLong'
p30937
S'(-200334)'
p30938
sS'DAQmxErrorInvalidCharInDigPatternString'
p30939
S'(-200901)'
p30940
sS'DAQmxErrorTrigAIMinAIMax'
p30941
S'(-200422)'
p30942
sS'DAQmx_CI_CtrTimebase_DigFltr_TimebaseSrc'
p30943
S'0x2273'
p30944
sS'DAQmx_PhysicalChan_TEDS_MfgID'
p30945
S'0x21DA'
p30946
sS'DAQmx_Buf_Input_BufSize'
p30947
S'0x186C'
p30948
sS'DAQmx_Val_ContSamps'
p30949
S'10123'
p30950
sS'DAQmx_Val_AHighBLow'
p30951
S'10041'
p30952
sS'DAQmx_CI_Freq_Term'
p30953
S'0x18A2'
p30954
sS'DAQmx_CI_SemiPeriod_DigFltr_Enable'
p30955
S'0x2219'
p30956
sS'DAQmx_Dev_DO_Lines'
p30957
S'0x2322'
p30958
sS'DAQmxErrorTooManyChans'
p30959
S'(-200168)'
p30960
sS'DAQmxErrorMultiRecWithRIS'
p30961
S'(-200416)'
p30962
sS'DAQmxErrorPrescalerNot1ForTimebaseSrc'
p30963
S'(-200840)'
p30964
sS'DAQmx_Val_Switch_Topology_2591_4x1_Mux'
p30965
S'"2591/4x1 Mux"'
p30966
sS'DAQmx_Val_FullBridge'
p30967
S'10182'
p30968
sS'DAQmxErrorMoreThanOneActiveChannelSpecified'
p30969
S'(-200097)'
p30970
sS'DAQmxErrorPALTransferAborted'
p30971
S'(-50405)'
p30972
sS'DAQmxErrorChanDuplicatedInPath'
p30973
S'(-200183)'
p30974
sS'DAQmxErrorInvalidCharInString'
p30975
S'(-200552)'
p30976
sS'DAQmxErrorChannelNameNotSpecifiedInList'
p30977
S'(-200056)'
p30978
sS'DAQmx_CO_Pulse_Time_InitialDelay'
p30979
S'0x18BC'
p30980
sS'DAQmx_Val_Switch_Topology_2593_16x1_Mux'
p30981
S'"2593/16x1 Mux"'
p30982
sS'DAQmxErrorSampClkTimebaseSrcInvalid'
p30983
S'(-201088)'
p30984
sS'DAQmx_Val_Switch_Topology_2570_40_SPDT'
p30985
S'"2570/40-SPDT"'
p30986
sS'DAQmxErrorMemMapEnabledForHWTimedNonBufferedAO'
p30987
S'(-200796)'
p30988
sS'DAQmx_AI_LVDT_Sensitivity'
p30989
S'0x0939'
p30990
sS'DAQmxErrorSensorValTooHigh'
p30991
S'(-200535)'
p30992
sS'DAQmxWarningPALBadWindowType'
p30993
S'(50016)'
p30994
sS'DAQmx_DigPattern_StartTrig_Src'
p30995
S'0x1410'
p30996
sS'DAQmxErrorPALComponentImageCorrupt'
p30997
S'(-50257)'
p30998
sS'DAQmxErrorTooManyPhysicalChansInList'
p30999
S'(-200071)'
p31000
sS'DAQmx_CI_PulseWidth_StartingEdge'
p31001
S'0x0825'
p31002
sS'DAQmxErrorGenerateOrFiniteWaitInstructionExpectedBeforeIfElseBlockInScript'
p31003
S'(-201007)'
p31004
sS'DAQmxErrorSampClkRateTooLowForDivDown'
p31005
S'(-200272)'
p31006
sS'DAQmx_Val_Sleep'
p31007
S'12547'
p31008
sS'DAQmxErrorFailedToAcquireCalData'
p31009
S'(-200697)'
p31010
sS'DAQmx_Dev_BusType'
p31011
S'0x2326'
p31012
sS'DAQmxErrorHystTrigLevelAIMin'
p31013
S'(-200421)'
p31014
sS'_NI_int32_DEFINED_'
p31015
g28678
sS'DAQmxErrorInconsistentUnitsSpecified'
p31016
S'(-200212)'
p31017
sS'DAQmxErrorSampClkRateDoesntMatchSampClkSrc'
p31018
S'(-201002)'
p31019
sS'DAQmx_Val_Inches'
p31020
S'10379'
p31021
sS'DAQmxSuccess'
p31022
S'(0)'
p31023
sS'DAQmxErrorInvalidRoutingSourceTerminalName'
p31024
S'(-200040)'
p31025
sS'DAQmx_Exported_20MHzTimebase_OutputTerm'
p31026
S'0x1657'
p31027
sS'DAQmx_Val_GPS_Timestamp'
p31028
S'10362'
p31029
sS'DAQmx_AI_ForceReadFromChan'
p31030
S'0x18F8'
p31031
sS'DAQmx_AI_ChanCal_Table_ScaledVals'
p31032
S'0x229E'
p31033
sS'DAQmxErrorGenStoppedToPreventRegenOfOldSamples'
p31034
S'(-200290)'
p31035
sS'DAQmxErrorCannotReadWhenAutoStartFalseOnDemandAndTaskNotRunning'
p31036
S'(-200832)'
p31037
sS'DAQmxErrorInvalidInstallation'
p31038
S'(-200683)'
p31039
sS'DAQmxErrorExtMasterTimebaseRateNotSpecified'
p31040
S'(-200304)'
p31041
sS'DAQmxErrorAccessorySettingNotApplicable'
p31042
S'(-201048)'
p31043
sS'DAQmx_Val_BelowLvl'
p31044
S'10107'
p31045
sS'DAQmx_AnlgEdge_RefTrig_Coupling'
p31046
S'0x2235'
p31047
sS'DAQmxErrorInputBufferSizeNotEqualSampsPerChanForFiniteSampMode'
p31048
S'(-200737)'
p31049
sS'DAQmx_AnlgEdge_RefTrig_Hyst'
p31050
S'0x1421'
p31051
sS'DAQmxErrorEventOutputTermIncludesTrigSrc'
p31052
S'(-200952)'
p31053
sS'DAQmxErrorInvalidSubsetLengthInScript'
p31054
S'(-200032)'
p31055
sS'DAQmxWarningDevNotSelfCalibratedWithDAQmx'
p31056
S'(200016)'
p31057
sS'DAQmxErrorExcitationNotSupportedWhenTermCfgDiff'
p31058
S'(-200817)'
p31059
sS'DAQmxErrorChanSizeTooBigForU16PortWrite'
p31060
S'(-200879)'
p31061
sS'DAQmx_Val_FallingSlope'
p31062
S'10171'
p31063
sS'DAQmxErrorInvalidCfgCalAdjustMainPathPostAmpGainAndOffset'
p31064
S'(-200512)'
p31065
sS'DAQmxErrorCouldNotReserveRequestedTrigLine_Routing'
p31066
S'(-89126)'
p31067
sS'DAQmxErrorInvalidAccessoryName'
p31068
S'(-201044)'
p31069
sS'DAQmx_Val_ResetTimer'
p31070
g28779
sS'DAQmxErrorNoChangeDetectOnNonInputDigLineForDev'
p31071
S'(-200798)'
p31072
sS'DAQmx_Val_Switch_Topology_1130_1_Wire_Octal_32x1_Mux'
p31073
S'"1130/1-Wire Octal 32x1 Mux"'
p31074
sS'DAQmx_DI_Tristate'
p31075
S'0x1890'
p31076
sS'DAQmxErrorPALDiskFull'
p31077
S'(-50203)'
p31078
sS'DAQmxErrorExtCalNotComplete'
p31079
S'(-200443)'
p31080
sS'DAQmxErrorTaskReferencesMissingLocalChannel'
p31081
S'(-201072)'
p31082
sS'DAQmx_AO_ResolutionUnits'
p31083
S'0x182B'
p31084
sS'DAQmxErrorOutputBufferEmpty'
p31085
S'(-200462)'
p31086
sS'DAQmxErrorInvalidHWProductNumber'
p31087
S'(-201058)'
p31088
sS'DAQmx_Val_Switch_Topology_2594_4x1_Mux'
p31089
S'"2594/4x1 Mux"'
p31090
sS'DAQmxErrorTermCfgdToDifferentMinPulseWidthByAnotherTask'
p31091
S'(-200775)'
p31092
sS'DAQmxErrorOutputCantStartChangedBufferSize'
p31093
S'(-200567)'
p31094
sS'DAQmxErrorFunctionNotInLibrary'
p31095
S'(-200091)'
p31096
sS'DAQmxErrorPALFileOpenFault'
p31097
S'(-50204)'
p31098
sS'DAQmxErrorCannotUnregisterDAQmxSoftwareEventWhileTaskIsRunning'
p31099
S'(-200986)'
p31100
sS'DAQmxWarningPALComponentInitializationFault'
p31101
S'(50258)'
p31102
sS'DAQmxErrorNonbufferedReadMoreThanSampsPerChan'
p31103
S'(-200655)'
p31104
sS'DAQmx_Val_Action_Commit'
p31105
g28779
sS'DAQmxErrorInvalidExtTrigImpedance'
p31106
S'(-200426)'
p31107
sS'DAQmxErrorResourcesInUseForRoute_Routing'
p31108
S'(-89137)'
p31109
sS'DAQmxErrorDifferentDITristateValsForChansInTask'
p31110
S'(-200724)'
p31111
sS'DAQmx_Val_Pascals'
p31112
S'10081'
p31113
sS'DAQmxErrorStartFailedDueToWriteFailure'
p31114
S'(-200946)'
p31115
sS'DAQmxErrorTooManyChansForAnalogRefTrig'
p31116
S'(-200264)'
p31117
sS'DAQmxErrorChangeDetectionRisingAndFallingEdgeChanDontMatch'
p31118
S'(-200893)'
p31119
sS'DAQmxWarningAISampRateTooLow'
p31120
S'(200017)'
p31121
sS'DAQmx_CI_Period_DigFltr_TimebaseRate'
p31122
S'0x21EF'
p31123
sS'DAQmxErrorStartTrigConflictWithCOHWTimedSinglePt'
p31124
S'(-200787)'
p31125
sS'DAQmxErrorDigOutputOverrun'
p31126
S'(-200716)'
p31127
sS'DAQmx_RealTime_ConvLateErrorsToWarnings'
p31128
S'0x22EE'
p31129
sS'DAQmx_Val_RSE'
p31130
S'10083'
p31131
sS'DAQmx_Val_PathStatus_Unsupported'
p31132
S'10433'
p31133
sS'DAQmxWarningPALFeatureNotSupported'
p31134
S'(50256)'
p31135
sS'DAQmxErrorCannotHandshakeWhenTristateIsFalse'
p31136
S'(-200729)'
p31137
sS'DAQmx_Dev_ProductNum'
p31138
S'0x231D'
p31139
sS'DAQmxErrorFunctionNotSupportedForDeviceTasks'
p31140
S'(-200092)'
p31141
sS'DAQmxErrorTrigWhenOnDemandSampTiming'
p31142
S'(-200262)'
p31143
sS'DAQmxErrorPALBadAddressSpace'
p31144
S'(-50017)'
p31145
sS'DAQmx_Exported_AIConvClk_OutputTerm'
p31146
S'0x1687'
p31147
sS'DAQmx_Val_PCCard'
p31148
S'12585'
p31149
sS'DAQmxErrorDACRngHighNotEqualRefVal'
p31150
S'(-200448)'
p31151
sS'DAQmxErrorCJCChanNotSpecd'
p31152
S'(-200360)'
p31153
sS'DAQmx_Val_Switch_Topology_1130_Independent'
p31154
S'"1130/Independent"'
p31155
sS'DAQmx_Val_ALowBLow'
p31156
S'10043'
p31157
sS'__CFUNC'
p31158
S'__stdcall'
p31159
sS'DAQmxErrorPLLNotLocked'
p31160
S'(-201015)'
p31161
sS'DAQmxErrorSCXIModuleNotFound'
p31162
S'(-200073)'
p31163
sS'DAQmx_Val_Switch_Topology_2530_2_Wire_4x16_Matrix'
p31164
S'"2530/2-Wire 4x16 Matrix"'
p31165
sS'DAQmx_CI_OutputState'
p31166
S'0x0149'
p31167
sS'DAQmxErrorRoutingHardwareBusy'
p31168
S'(-200043)'
p31169
sS'DAQmx_Val_ChangeDetectionEvent'
p31170
S'12511'
p31171
sS'DAQmxErrorInvalidTimingSrcDueToSampTimingType'
p31172
S'(-200785)'
p31173
sS'DAQmx_AO_Current_Units'
p31174
S'0x1109'
p31175
sS'DAQmxWarningPALSyncAbandoned'
p31176
S'(50551)'
p31177
sS'DAQmx_AI_Min'
p31178
S'0x17DE'
p31179
sS'DAQmxErrorDuplicateChanNameInCfgFile'
p31180
S'(-201081)'
p31181
sS'DAQmxErrorChansCantAppearInSameTask'
p31182
S'(-200713)'
p31183
sS'DAQmxErrorIntExcitSrcNotAvailable'
p31184
S'(-200161)'
p31185
sS'DAQmx_Val_mVoltsPerVoltPerDegree'
p31186
S'12507'
p31187
sS'DAQmx_AI_ChanCal_EnableCal'
p31188
S'0x2298'
p31189
sS'DAQmx_Read_ChannelsToRead'
p31190
S'0x1823'
p31191
sS'DAQmx_AI_StrainGage_GageFactor'
p31192
S'0x0994'
p31193
sS'DAQmx_Read_CurrReadPos'
p31194
S'0x1221'
p31195
sS'DAQmx_CI_CountEdges_CountDir_DigFltr_TimebaseRate'
p31196
S'0x21F4'
p31197
sS'DAQmx_DigEdge_ArmStartTrig_DigFltr_TimebaseRate'
p31198
S'0x2230'
p31199
sS'DAQmxErrorInvalidTerm_Routing'
p31200
S'(-89129)'
p31201
sS'DAQmxErrorCppCantRemoveOtherObjectsEventHandler'
p31202
S'(-200588)'
p31203
sS'DAQmxErrorCantSetPowerupStateOnDigInChan'
p31204
S'(-200650)'
p31205
sS'DAQmx_CI_TwoEdgeSep_FirstTerm'
p31206
S'0x18AD'
p31207
sS'DAQmxErrorMinNotLessThanMax'
p31208
S'(-200082)'
p31209
sS'DAQmx_CI_TwoEdgeSep_Second_DigFltr_MinPulseWidth'
p31210
S'0x2215'
p31211
sS'DAQmx_DigLvl_PauseTrig_DigSync_Enable'
p31212
S'0x222C'
p31213
sS'DAQmxErrorInvalidTopology'
p31214
S'(-200198)'
p31215
sS'DAQmxErrorCAPINoExtendedErrorInfoAvailable'
p31216
S'(-200399)'
p31217
sS'DAQmx_Val_Switch_Topology_2593_Dual_4x1_Terminated_Mux'
p31218
S'"2593/Dual 4x1 Terminated Mux"'
p31219
sS'DAQmxErrorInvalidOutputVoltageAtSampClkRate'
p31220
S'(-200392)'
p31221
sS'DAQmx_Exported_AdvCmpltEvent_OutputTerm'
p31222
S'0x1651'
p31223
sS'DAQmx_AI_Bridge_Cfg'
p31224
S'0x0087'
p31225
sS'DAQmxWarningSampClkRateAboveDevSpecs'
p31226
S'(200036)'
p31227
sS'DAQmxErrorMoreThanOneTerminal'
p31228
S'(-200098)'
p31229
sS'DAQmxErrorDuplicateDeviceName_Routing'
p31230
S'(-88715)'
p31231
sS'DAQmxErrorConnectOperatorInvalidAtPointInList'
p31232
S'(-200066)'
p31233
sS'DAQmx_AnlgEdge_StartTrig_Lvl'
p31234
S'0x1396'
p31235
sS'DAQmxWarningPALResourceInitialized'
p31236
S'(50105)'
p31237
sS'DAQmxErrorPhysicalChanNotOnThisConnector'
p31238
S'(-200851)'
p31239
sS'DAQmxErrorAttributeInconsistentAcrossRepeatedPhysicalChannels'
p31240
S'(-200128)'
p31241
sS'DAQmxErrorChanSizeTooBigForU8PortWrite'
p31242
S'(-200565)'
p31243
sS'DAQmx_CI_CtrTimebaseMasterTimebaseDiv'
p31244
S'0x18B3'
p31245
sS'DAQmx_Val_20MHzTimebaseClock'
p31246
S'12486'
p31247
sS'DAQmxErrorBufferAndDataXferMode'
p31248
S'(-200216)'
p31249
sS'_NI_float64_DEFINED_'
p31250
g28678
sS'DAQmx_AO_DAC_Ref_ExtSrc'
p31251
S'0x2252'
p31252
sS'DAQmx_Val_3Wire'
p31253
g29279
sS'DAQmx_Val_ActiveDrive'
p31254
S'12573'
p31255
sS'DAQmx_Val_Ticks'
p31256
S'10304'
p31257
sS'_NI_int64_DEFINED_'
p31258
g28678
sS'DAQmxErrorIntegerExpectedInScript'
p31259
S'(-200247)'
p31260
sS'DAQmxErrorCOWritePulseLowTimeOutOfRange'
p31261
S'(-200687)'
p31262
sS'DAQmx_SampClk_Timebase_MasterTimebaseDiv'
p31263
S'0x1305'
p31264
sS'DAQmxErrorSuitableTimebaseNotFoundTimeCombo'
p31265
S'(-200137)'
p31266
sS'DAQmxErrorCJCChanAlreadyUsed'
p31267
S'(-200352)'
p31268
sS'DAQmxErrorChanAlreadyInTask'
p31269
S'(-200489)'
p31270
sS'DAQmxErrorProgFilterClkCfgdToDifferentMinPulseWidthBySameTask1PerDev'
p31271
S'(-200807)'
p31272
sS'DAQmxErrorPropertyNotSupportedForScaleType'
p31273
S'(-200601)'
p31274
sS'DAQmxWarningPALBadMode'
p31275
S'(50006)'
p31276
sS'DAQmx_DigEdge_StartTrig_DigFltr_TimebaseSrc'
p31277
S'0x2225'
p31278
sS'DAQmx_Val_Switch_Topology_2503_2_Wire_Quad_6x1_Mux'
p31279
S'"2503/2-Wire Quad 6x1 Mux"'
p31280
sS'DAQmxErrorWriteToTEDSFailed'
p31281
S'(-200836)'
p31282
sS'DAQmx_CO_Pulse_LowTime'
p31283
S'0x18BB'
p31284
sS'DAQmxErrorHystTrigLevelAIMax'
p31285
S'(-200425)'
p31286
sS'DAQmx_RefTrig_PretrigSamples'
p31287
S'0x1445'
p31288
sS'DAQmxErrorPropertyNotSupportedForTimingSrc'
p31289
S'(-200739)'
p31290
sS'DAQmx_Val_Switch_Topology_1193_Dual_8x1_Terminated_Mux'
p31291
S'"1193/Dual 8x1 Terminated Mux"'
p31292
sS'DAQmxErrorTypeUnknown'
p31293
S'(-54020)'
p31294
sS'DAQmxErrorCounterMaxMinRangeFreq'
p31295
S'(-200139)'
p31296
sS'DAQmx_Val_NoAction'
p31297
S'10227'
p31298
sS'DAQmxWarningPALBadSelector'
p31299
S'(50003)'
p31300
sS'DAQmxErrorNULLPtrForC_Api'
p31301
S'(-200230)'
p31302
sS'DAQmx_AnlgLvl_PauseTrig_Lvl'
p31303
S'0x1369'
p31304
sS'DAQmx_Val_Closed'
p31305
S'10438'
p31306
sS'DAQmxErrorPhysicalChansForChangeDetectionAndPatternMatch653x'
p31307
S'(-200892)'
p31308
sS'DAQmxErrorPowerupStateNotSpecdForEntirePort'
p31309
S'(-200652)'
p31310
sS'DAQmxErrorReadNotCompleteBeforeSampClk'
p31311
S'(-209800)'
p31312
sS'DAQmx_Val_Switch_Topology_1193_16x1_Terminated_Mux'
p31313
S'"1193/16x1 Terminated Mux"'
p31314
sS'DAQmx_Exported_CtrOutEvent_Toggle_IdleState'
p31315
S'0x186A'
p31316
sS'DAQmxErrorPolyCoeffsInconsistent'
p31317
S'(-200537)'
p31318
sS'DAQmxErrorOperationTimedOut'
p31319
S'(-200474)'
p31320
sS'DAQmxWarningUserDefInfoStringTooLong'
p31321
S'(200013)'
p31322
sS'DAQmxErrorLoadTaskFailsBecauseNoTimingOnDev'
p31323
S'(-200494)'
p31324
sS'DAQmxErrorIllegalAccessoryTypeForDeviceSpecd'
p31325
S'(-201046)'
p31326
sS'DAQmxErrorHardwareNotResponding'
p31327
S'(-200175)'
p31328
sS'DAQmxErrorInvalidTerm'
p31329
S'(-200254)'
p31330
sS'DAQmxErrorSampClkDCMLock'
p31331
S'(-200239)'
p31332
sS'DAQmxErrorPartialUseOfPhysicalLinesWithinPortNotSupported653x'
p31333
S'(-200898)'
p31334
sS'DAQmx_Exported_AdvTrig_Pulse_Width'
p31335
S'0x1648'
p31336
sS'DAQmx_AI_Bridge_ShuntCal_Enable'
p31337
S'0x0094'
p31338
sS'DAQmxErrorDoneEventAlreadyRegistered'
p31339
S'(-200950)'
p31340
sS'DAQmxErrorInvalidOptionForDigitalPortChannel'
p31341
S'(-200376)'
p31342
sS'DAQmx_StartTrig_Retriggerable'
p31343
S'0x190F'
p31344
sS'DAQmx_Val_Switch_Topology_2532_1_Wire_Sixteen_2x16_Matrix'
p31345
S'"2532/1-Wire Sixteen 2x16 Matrix"'
p31346
sS'DAQmx_Watchdog_Timeout'
p31347
S'0x21A9'
p31348
sS'DAQmxErrorInvalidNumCalADCReadsToAverage'
p31349
S'(-200515)'
p31350
sS'DAQmxWarningPALTransferAborted'
p31351
S'(50405)'
p31352
sS'DAQmxWarningDeviceMayShutDownDueToHighTemp'
p31353
S'(200034)'
p31354
sS'DAQmxErrorTaskReferencesLocalChannelFromOtherTask'
p31355
S'(-201071)'
p31356
sS'DAQmxErrorCounterOverflow'
p31357
S'(-200141)'
p31358
sS'DAQmxErrorLinesUsedForHandshakingControlNotForStaticInput'
p31359
S'(-200727)'
p31360
sS'DAQmxErrorEveryNSamplesEventNotSupportedForNonBufferedTasks'
p31361
S'(-200848)'
p31362
sS'DAQmx_Exported_AdvTrig_Pulse_Polarity'
p31363
S'0x1646'
p31364
sS'DAQmxErrorHandshakeTrigTypeNotSupportedGivenTimingType'
p31365
S'(-200905)'
p31366
sS'DAQmxErrorTEDSMinElecValGEMaxElecVal'
p31367
S'(-200816)'
p31368
sS'DAQmxErrorCannotUpdatePulseGenProperty'
p31369
S'(-200301)'
p31370
sS'DAQmxErrorWaitModePropertyNotSupportedNonBuffered'
p31371
S'(-200923)'
p31372
sS'DAQmxErrorExtSyncPulseSrcCannotBeExported'
p31373
S'(-201092)'
p31374
sS'DAQmx_CI_PulseWidth_DigFltr_Enable'
p31375
S'0x220A'
p31376
sS'DAQmx_Val_Save_AllowInteractiveEditing'
p31377
S'(1<<1)'
p31378
sS'DAQmx_Val_WhenAcqComplete'
p31379
S'12546'
p31380
sS'DAQmxErrorHWObjectsFoundInFile'
p31381
S'(-201074)'
p31382
sS'DAQmx_Val_mVoltsPerVoltPerMillimeter'
p31383
S'12506'
p31384
sS'DAQmxErrorPALDeviceInitializationFault'
p31385
S'(-50303)'
p31386
sS'DAQmx_Val_Switch_Topology_1130_1_Wire_256x1_Mux'
p31387
S'"1130/1-Wire 256x1 Mux"'
p31388
sS'DAQmxErrorResourcesInUseForInversion_Routing'
p31389
S'(-89134)'
p31390
sS'DAQmxErrorPALOSFault'
p31391
S'(-50202)'
p31392
sS'DAQmx_CI_CountEdges_CountDir_DigFltr_MinPulseWidth'
p31393
S'0x21F2'
p31394
sS'DAQmxErrorBufferWithWaitMode'
p31395
S'(-200691)'
p31396
sS'DAQmxErrorPALOSUnsupported'
p31397
S'(-50200)'
p31398
sS'DAQmx_DigEdge_ArmStartTrig_Edge'
p31399
S'0x1415'
p31400
sS'DAQmxErrorPALBadPointer'
p31401
S'(-50004)'
p31402
sS'DAQmxErrorResourcesInUseForProperty'
p31403
S'(-200353)'
p31404
sS'DAQmxErrorTriggerPolarityConflict'
p31405
S'(-200206)'
p31406
sS'DAQmx_Val_Switch_Topology_2501_2_Wire_Dual_12x1_Mux'
p31407
S'"2501/2-Wire Dual 12x1 Mux"'
p31408
sS'DAQmxErrorDigFilterEnableSetWhenTristateIsFalse'
p31409
S'(-200732)'
p31410
sS'DAQmxErrorProductOfAOMaxAndGainTooLarge'
p31411
S'(-200267)'
p31412
sS'DAQmxErrorEveryNSampsEventIntervalZeroNotSupported'
p31413
S'(-200880)'
p31414
sS'DAQmxErrorInterconnectBusNotFound'
p31415
S'(-54002)'
p31416
sS'DAQmx_Val_Switch_Topology_2590_4x1_Mux'
p31417
S'"2590/4x1 Mux"'
p31418
sS'DAQmx_AI_Excit_ActualVal'
p31419
S'0x1883'
p31420
sS'DAQmxErrorDeviceRemoved'
p31421
S'(-200045)'
p31422
sS'DAQmx_DigPattern_StartTrig_Pattern'
p31423
S'0x2186'
p31424
sS'DAQmxErrorDSFReadyForStartClock'
p31425
S'(-200631)'
p31426
sS'DAQmxErrorInvalidNumericFormatSpecd'
p31427
S'(-201056)'
p31428
sS'DAQmx_AI_ChanCal_Table_PreScaledVals'
p31429
S'0x229D'
p31430
sS'DAQmxWarningPALTransferInProgress'
p31431
S'(50403)'
p31432
sS'DAQmxErrorEveryNSampsTransferredFromBufferEventNotSupportedByDevice'
p31433
S'(-200980)'
p31434
sS'DAQmx_CI_Min'
p31435
S'0x189D'
p31436
sS'DAQmx_Val_FromCustomScale'
p31437
S'10065'
p31438
sS'DAQmxErrorRuntimeAborting_Routing'
p31439
S'(-88710)'
p31440
sS'DAQmxWarningPALComponentAlreadyLoaded'
p31441
S'(50260)'
p31442
sS'DAQmx_Val_OnBrdMemMoreThanHalfFull'
p31443
S'10237'
p31444
sS'DAQmx_SampClk_DigFltr_TimebaseSrc'
p31445
S'0x2220'
p31446
sS'DAQmx_Watchdog_DO_ExpirState'
p31447
S'0x21A7'
p31448
sS'DAQmxErrorFailedToEnableHighSpeedOutput'
p31449
S'(-200615)'
p31450
sS'DAQmx_Val_Custom'
p31451
S'10137'
p31452
sS'DAQmx_Val_Switch_Topology_2593_8x1_Terminated_Mux'
p31453
S'"2593/8x1 Terminated Mux"'
p31454
sS'DAQmxErrorSwitchActionInListSpansMultipleDevices'
p31455
S'(-200053)'
p31456
sS'DAQmxErrorMarkerPosInvalidForLoopInScript'
p31457
S'(-200248)'
p31458
sS'DAQmxErrorDataOverwrittenInDeviceMemory'
p31459
S'(-200004)'
p31460
sS'DAQmxErrorInvalidDelaySampRateBelowPhaseShiftDCMThresh'
p31461
S'(-200381)'
p31462
sS'DAQmx_Val_Interrupts'
p31463
S'10204'
p31464
sS'DAQmxErrorRequiredPropertyMissing'
p31465
S'(-201039)'
p31466
sS'DAQmxErrorSampClkRateExtSampClkTimebaseRateMismatch'
p31467
S'(-200786)'
p31468
sS'DAQmx_AnlgEdge_StartTrig_Coupling'
p31469
S'0x2233'
p31470
sS'DAQmxErrorInvalidCalConstOscillatorFreqDACValue'
p31471
S'(-200519)'
p31472
sS'DAQmxErrorOutputBufferSizeNotMultOfXferSize'
p31473
S'(-200838)'
p31474
sS'DAQmxWarningPALBadAddressClass'
p31475
S'(50015)'
p31476
sS'DAQmxErrorDifftAIInputSrcInOneChanGroup'
p31477
S'(-200676)'
p31478
sS'DAQmx_Val_OnBrdMemNotEmpty'
p31479
S'10241'
p31480
sS'DAQmx_Val_Degrees'
p31481
S'10146'
p31482
sS'DAQmxErrorPALBadThreadMultitask'
p31483
S'(-50019)'
p31484
sS'DAQmx_Val_ConstVal'
p31485
S'10116'
p31486
sS'DAQmxWarningRISAcqCompletedSomeBinsNotFilled'
p31487
S'(200029)'
p31488
sS'DAQmx_Cal_UserDefinedInfo'
p31489
S'0x1861'
p31490
sS'DAQmxErrorExportSignalPolarityNotSupportedByHW'
p31491
S'(-200364)'
p31492
sS'DAQmxErrorWroteMultiSampsUsingSingleSampWrite'
p31493
S'(-200673)'
p31494
sS'DAQmx_AnlgWin_RefTrig_Btm'
p31495
S'0x1428'
p31496
sS'DAQmxErrorRefAndPauseTrigConfigured'
p31497
S'(-200628)'
p31498
sS'DAQmxErrorOutputFIFOUnderflow2'
p31499
S'(-200621)'
p31500
sS'DAQmxErrorForwardPolynomialCoefNotSpecd'
p31501
S'(-200351)'
p31502
sS'DAQmx_Val_Switch_Topology_2530_1_Wire_Dual_64x1_Mux'
p31503
S'"2530/1-Wire Dual 64x1 Mux"'
p31504
sS'DAQmx_Val_Finite'
p31505
S'10172'
p31506
sS'DAQmxErrorControlLineConflictOnPortC'
p31507
S'(-200126)'
p31508
sS'DAQmx_Val_Switch_Topology_2597_6x1_Terminated_Mux'
p31509
S'"2597/6x1 Terminated Mux"'
p31510
sS'DAQmxErrorCounterOutputPauseTriggerInvalid'
p31511
S'(-200144)'
p31512
sS'DAQmxErrorEventPulseWidthOutOfRange'
p31513
S'(-200346)'
p31514
sS'DAQmxErrorNoDevMemForScript'
p31515
S'(-200317)'
p31516
sS'DAQmxErrorActiveChannelNotSpecified'
p31517
S'(-200093)'
p31518
sS'DAQmxErrorAttributeNotSettableWhenTaskIsRunning'
p31519
S'(-200450)'
p31520
sS'DAQmxErrorInvalidWaveformLengthWithinLoopInScript'
p31521
S'(-200250)'
p31522
sS'DAQmx_Sys_DevNames'
p31523
S'0x193B'
p31524
sS'DAQmxErrorDisconnectPathNotSameAsExistingPath'
p31525
S'(-200190)'
p31526
sS'DAQmxWarningStoppedBeforeDone'
p31527
S'(200010)'
p31528
sS'DAQmx_CI_Encoder_ZInputTerm'
p31529
S'0x219F'
p31530
sS'DAQmxErrorMismatchedInputArraySizes'
p31531
S'(-200672)'
p31532
sS'DAQmx_AI_Excit_UseForScaling'
p31533
S'0x17FC'
p31534
sS'DAQmx_Val_WDTExpiredEvent'
p31535
S'12512'
p31536
sS'DAQmxErrorCIInvalidTimingSrcForSampClkDueToSampTimingType'
p31537
S'(-200800)'
p31538
sS'DAQmx_SampClk_TimebaseDiv'
p31539
S'0x18EB'
p31540
sS'DAQmxErrorExtRefClkRateNotSpecified'
p31541
S'(-200735)'
p31542
sS'DAQmxErrorAttemptToEnableLineNotPreviouslyDisabled'
p31543
S'(-200497)'
p31544
sS'DAQmx_Val_Switch_Topology_2503_2_Wire_24x1_Mux'
p31545
S'"2503/2-Wire 24x1 Mux"'
p31546
sS'DAQmxErrorPALVersionMismatch'
p31547
S'(-50250)'
p31548
sS'DAQmxErrorBufferTooSmallForString'
p31549
S'(-200228)'
p31550
sS'DAQmx_Val_ExtControlled'
p31551
S'10326'
p31552
sS'DAQmx_Val_TwoEdgeSep'
p31553
S'10267'
p31554
sS'DAQmxErrorSampClkDCMBecameUnlocked'
p31555
S'(-200240)'
p31556
sS'DAQmxErrorChannelSizeTooBigForPortWriteType'
p31557
S'(-200465)'
p31558
sS'DAQmx_Val_HalfBridgeI'
p31559
S'10188'
p31560
sS'DAQmxErrorMStudioNoReversePolyScaleCoeffs'
p31561
S'(-200782)'
p31562
sS'DAQmxErrorScanListCannotBeTimed'
p31563
S'(-200067)'
p31564
sS'DAQmxErrorClkOutPhaseShiftDCMBecameUnlocked'
p31565
S'(-200389)'
p31566
sS'DAQmxErrorChanCalRepeatedNumberInPreScaledVals'
p31567
S'(-200939)'
p31568
sS'DAQmx_Val_Switch_Topology_1175_1_Wire_196x1_Mux'
p31569
S'"1175/1-Wire 196x1 Mux"'
p31570
sS'DAQmxErrorDataXferRequestConditionNotSpecifiedForCustomThreshold'
p31571
S'(-200944)'
p31572
sS'DAQmxErrorCppDotNetAPINegativeBufferSize'
p31573
S'(-200591)'
p31574
sS'DAQmx_PersistedTask_Author'
p31575
S'0x22CC'
p31576
sS'DAQmxWarningOutputGainTooHighForRFFreq'
p31577
S'(200032)'
p31578
sS'DAQmx_CO_CtrTimebaseActiveEdge'
p31579
S'0x0341'
p31580
sS'DAQmx_Val_MetersPerSecondSquared'
p31581
S'12470'
p31582
sS'DAQmxErrorPALWaitInterrupted'
p31583
S'(-50700)'
p31584
sS'DAQmxErrorPALFileReadFault'
p31585
S'(-50207)'
p31586
sS'DAQmx_Val_Switch_Topology_1129_2_Wire_Dual_8x16_Matrix'
p31587
S'"1129/2-Wire Dual 8x16 Matrix"'
p31588
sS'DAQmx_CI_TCReached'
p31589
S'0x0150'
p31590
sS'DAQmx_Val_Switch_Topology_2586_10_SPST'
p31591
S'"2586/10-SPST"'
p31592
sS'DAQmx_Val_Tristate'
p31593
S'10310'
p31594
sS'DAQmx_Val_HighImpedance'
p31595
S'12527'
p31596
sS'DAQmx_Val_BuiltIn'
p31597
S'10200'
p31598
sS'DAQmx_Sys_GlobalChans'
p31599
S'0x1265'
p31600
sS'DAQmx_AI_Lowpass_SwitchCap_ClkSrc'
p31601
S'0x1884'
p31602
sS'DAQmxErrorRouteFailedBecauseWatchdogExpired'
p31603
S'(-200681)'
p31604
sS'DAQmxErrorLabVIEWVersionDoesntSupportDAQmxEvents'
p31605
S'(-201000)'
p31606
sS'DAQmxErrorDeviceIDDoesNotMatch'
p31607
S'(-201063)'
p31608
sS'DAQmxWarningPALBadReadCount'
p31609
S'(50011)'
p31610
sS'DAQmx_CI_Freq_DigSync_Enable'
p31611
S'0x21EB'
p31612
sS'DAQmxErrorCompressedSampSizeExceedsResolution'
p31613
S'(-200957)'
p31614
sS'DAQmx_Val_LowFreq1Ctr'
p31615
S'10105'
p31616
sS'DAQmxErrorInconsistentAnalogTrigSettings'
p31617
S'(-200261)'
p31618
sS'DAQmx_AI_CurrentShunt_Loc'
p31619
S'0x17F2'
p31620
sS'DAQmxErrorCanNotPerformOpWhenNoChansInTask'
p31621
S'(-200478)'
p31622
sS'DAQmxErrorRefClkRateRefClkSrcMismatch'
p31623
S'(-200744)'
p31624
sS'DAQmxErrorPasswordTooLong'
p31625
S'(-200109)'
p31626
sS'DAQmx_Val_DoNotAllowRegen'
p31627
S'10158'
p31628
sS'DAQmxErrorInvalidDeviceConnectorNumberSpecd'
p31629
S'(-201045)'
p31630
sS'DAQmxErrorSyncPulseSrcInvalid'
p31631
S'(-201090)'
p31632
sS'DAQmx_CI_MeasType'
p31633
S'0x18A0'
p31634
sS'DAQmxErrorOffsetTooLarge'
p31635
S'(-200269)'
p31636
sS'DAQmxErrorImmedTrigDuringRISMode'
p31637
S'(-200418)'
p31638
sS'DAQmxErrorNoMatchForSpecdDevice'
p31639
S'(-201042)'
p31640
sS'DAQmx_DigEdge_AdvTrig_Src'
p31641
S'0x1362'
p31642
sS'DAQmx_Read_RawDataWidth'
p31643
S'0x217A'
p31644
sS'DAQmx_SyncPulse_Src'
p31645
S'0x223D'
p31646
sS'DAQmxErrorInvalidDTInsideWfmDataType'
p31647
S'(-200327)'
p31648
sS'DAQmxErrorDelayFromSampClkTooLong'
p31649
S'(-200337)'
p31650
sS'DAQmx_AI_Voltage_Units'
p31651
S'0x1094'
p31652
sS'DAQmxErrorDuplicateHiddenChanNamesInCfgFile'
p31653
S'(-201082)'
p31654
sS'DAQmxErrorPortReservedForHandshaking'
p31655
S'(-200118)'
p31656
sS'DAQmxErrorCannotReadWhenAutoStartFalseHWTimedSinglePtAndTaskNotRunning'
p31657
S'(-200833)'
p31658
sS'DAQmxErrorAttrCannotBeReset'
p31659
S'(-200236)'
p31660
sS'DAQmx_Hshk_SampleInputDataWhen'
p31661
S'0x22C4'
p31662
sS'DAQmxErrorRefTrigWhenContinuous'
p31663
S'(-200358)'
p31664
sS'DAQmx_Val_Switch_Topology_1130_1_Wire_Dual_128x1_Mux'
p31665
S'"1130/1-Wire Dual 128x1 Mux"'
p31666
sS'DAQmx_PhysicalChan_TEDS_ModelNum'
p31667
S'0x21DB'
p31668
sS'DAQmxErrorCannotPerformOpWhenTaskNotReserved'
p31669
S'(-200664)'
p31670
sS'DAQmxErrorInternalTimebaseSourceDivisorCombo'
p31671
S'(-200135)'
p31672
sS'DAQmxWarningMultipleWritesBetweenSampClks'
p31673
S'(200033)'
p31674
sS'DAQmxErrorCVIFunctionNotFoundInDAQmxDLL'
p31675
S'(-200398)'
p31676
sS'DAQmx_Val_EverySample'
p31677
S'10164'
p31678
sS'DAQmx_CI_Freq_MeasMeth'
p31679
S'0x0144'
p31680
sS'DAQmxErrorPhysicalChanDoesNotExist'
p31681
S'(-200170)'
p31682
sS'DAQmx_Val_Switch_Topology_2527_1_Wire_Dual_32x1_Mux'
p31683
S'"2527/1-Wire Dual 32x1 Mux"'
p31684
sS'DAQmxErrorNoCommonTrigLineForRoute_Routing'
p31685
S'(-89139)'
p31686
sS'DAQmx_Val_Switch_Topology_2501_2_Wire_Quad_6x1_Mux'
p31687
S'"2501/2-Wire Quad 6x1 Mux"'
p31688
sS'DAQmxErrorCalibrationHandleInvalid'
p31689
S'(-200112)'
p31690
sS'DAQmx_SelfCal_Supported'
p31691
S'0x1860'
p31692
sS'DAQmxErrorRoutingDestTermPXIStarXNotInSlot2_Routing'
p31693
S'(-89148)'
p31694
sS'DAQmxErrorNonBufferedAndDataXferInterrupts'
p31695
S'(-200845)'
p31696
sS'DAQmx_SwitchScan_WaitingForAdv'
p31697
S'0x17D9'
p31698
sS'DAQmxErrorInputSignalSlowerThanMeasTime'
p31699
S'(-200302)'
p31700
sS'DAQmxErrorTaskCannotBeSavedSoInteractiveEditsAllowed'
p31701
S'(-200883)'
p31702
sS'DAQmx_AO_Min'
p31703
S'0x1187'
p31704
sS'DAQmxErrorEveryNSampsAcqIntoBufferEventAlreadyRegistered'
p31705
S'(-200966)'
p31706
sS'DAQmxErrorSWObjectsFoundInFile'
p31707
S'(-201075)'
p31708
sS'DAQmx_Val_Switch_Topology_2530_Independent'
p31709
S'"2530/Independent"'
p31710
sS'DAQmx_AO_CustomScaleName'
p31711
S'0x1188'
p31712
sS'DAQmx_Val_mVoltsPerG'
p31713
S'12509'
p31714
sS'DAQmx_CI_Period_DigFltr_TimebaseSrc'
p31715
S'0x21EE'
p31716
sS'DAQmxErrorInsufficientOnBoardMemForNumRecsAndSamps'
p31717
S'(-200413)'
p31718
sS'DAQmxErrorPALFeatureNotSupported'
p31719
S'(-50256)'
p31720
sS'DAQmx_PersistedTask_AllowInteractiveDeletion'
p31721
S'0x22CE'
p31722
sS'DAQmxErrorMeasCalAdjustOscillatorFrequency'
p31723
S'(-200508)'
p31724
sS'DAQmx_CO_AutoIncrCnt'
p31725
S'0x0295'
p31726
sS'DAQmxErrorCannotSetPropertyWhenTaskRunning'
p31727
S'(-200557)'
p31728
sS'DAQmx_DigEdge_StartTrig_DigSync_Enable'
p31729
S'0x2227'
p31730
sS'DAQmx_Val_Resistance'
p31731
S'10278'
p31732
sS'DAQmxErrorDelayFromStartTrigTooShort'
p31733
S'(-200333)'
p31734
sS'DAQmx_AO_DAC_Ref_AllowConnToGnd'
p31735
S'0x1830'
p31736
sS'DAQmxErrorMeasCalAdjustMainPathPreAmpGain'
p31737
S'(-200503)'
p31738
sS'DAQmx_CI_TwoEdgeSep_SecondTerm'
p31739
S'0x18AE'
p31740
sS'DAQmxErrorInternalTimebaseRateDivisorSourceCombo'
p31741
S'(-200133)'
p31742
sS'DAQmxErrorSCXIDevNotUsablePowerTurnedOff'
p31743
S'(-200835)'
p31744
sS'DAQmx_Val_Auto'
p31745
S'-1'
p31746
sS'DAQmxErrorF64PrptyValNotUnsignedInt'
p31747
S'(-200394)'
p31748
sS'DAQmxWarningPALBadWriteOffset'
p31749
S'(50013)'
p31750
sS'DAQmxErrorOutputBufSizeTooSmallToStartGen'
p31751
S'(-200609)'
p31752
sS'DAQmxErrorResourcesInUseForInversion'
p31753
S'(-200365)'
p31754
sS'DAQmxErrorLines0To3ConfiguredForOutput'
p31755
S'(-200123)'
p31756
sS'DAQmx_AI_ChanCal_Verif_RefVals'
p31757
S'0x22A1'
p31758
sS'DAQmxErrorIdentifierTooLongInScript'
p31759
S'(-200533)'
p31760
sS'DAQmx_Scale_PreScaledUnits'
p31761
S'0x18F7'
p31762
sS'DAQmxErrorRouteNotSupportedByHW'
p31763
S'(-200368)'
p31764
sS'DAQmx_Val_Switch_Topology_2532_2_Wire_8x32_Matrix'
p31765
S'"2532/2-Wire 8x32 Matrix"'
p31766
sS'DAQmxErrorAIInputBufferSizeNotMultOfXferSize'
p31767
S'(-200763)'
p31768
sS'DAQmx_Val_Source'
p31769
S'10439'
p31770
sS'DAQmxErrorCantUseOnlyOnBoardMemWithProgrammedIO'
p31771
S'(-200819)'
p31772
sS'DAQmx_Val_Switch_Topology_1129_2_Wire_8x32_Matrix'
p31773
S'"1129/2-Wire 8x32 Matrix"'
p31774
sS'DAQmxErrorDAQmxVersionNotSupported'
p31775
S'(-201076)'
p31776
sS'DAQmx_DigEdge_WatchdogExpirTrig_Src'
p31777
S'0x21A4'
p31778
sS'DAQmx_CI_SemiPeriod_DigSync_Enable'
p31779
S'0x221D'
p31780
sS'DAQmxErrorCantExceedRelayDriveLimit'
p31781
S'(-200671)'
p31782
sS'DAQmxErrorSwitchOperationChansSpanMultipleDevsInList'
p31783
S'(-200596)'
p31784
sS'DAQmx_AI_DataXferReqCond'
p31785
S'0x188B'
p31786
sS'DAQmx_Val_Strain'
p31787
S'10299'
p31788
sS'DAQmxErrorDigitalOutputNotSupported'
p31789
S'(-200012)'
p31790
sS'DAQmx_Val_Switch_Topology_2576_2_Wire_Quad_16x1_Mux'
p31791
S'"2576/2-Wire Quad 16x1 Mux"'
p31792
sS'DAQmxErrorNeedLabVIEW711PatchToUseDAQmxEvents'
p31793
S'(-200947)'
p31794
sS'DAQmxErrorWatchdogTimeoutOutOfRangeAndNotSpecialVal'
p31795
S'(-200668)'
p31796
sS'DAQmx_Scale_Table_PreScaledVals'
p31797
S'0x1237'
p31798
sS'DAQmxErrorInconsistentExcit'
p31799
S'(-200257)'
p31800
sS'DAQmxErrorConnectionSeparatorAtEndOfList'
p31801
S'(-200059)'
p31802
sS'DAQmxErrorSampClkTbMasterTbDivNotAppropriateForSampTbSrc'
p31803
S'(-200309)'
p31804
sS'DAQmxErrorCOCannotKeepUpInHWTimedSinglePoint'
p31805
S'(-209805)'
p31806
sS'DAQmx_Val_ChannelCurrent'
p31807
g28873
sS'DAQmx_AO_DAC_Offset_Src'
p31808
S'0x2253'
p31809
sS'DAQmx_Val_HighFreq2Ctr'
p31810
S'10157'
p31811
sS'DAQmx_Exported_SampClk_OutputTerm'
p31812
S'0x1663'
p31813
sS'DAQmx_Val_Switch_Topology_2530_2_Wire_64x1_Mux'
p31814
S'"2530/2-Wire 64x1 Mux"'
p31815
sS'DAQmx_Val_ChangeDetection'
p31816
S'12504'
p31817
sS'DAQmxErrorNumSampsToWaitNotMultipleOfAlignmentQuantumInScript'
p31818
S'(-200849)'
p31819
sS'DAQmxErrorSpecdDeviceDoesNotSupportRTSI'
p31820
S'(-201030)'
p31821
sS'DAQmxErrorResourcesInUseForRouteInTask'
p31822
S'(-200370)'
p31823
sS'DAQmxErrorPALResourceNotReserved'
p31824
S'(-50102)'
p31825
sS'DAQmxErrorUnableToDetectExtStimulusFreqDuringCal'
p31826
S'(-200441)'
p31827
sS'DAQmx_CI_Timestamp_InitialSeconds'
p31828
S'0x22B4'
p31829
sS'DAQmx_CO_CtrTimebase_DigFltr_Enable'
p31830
S'0x2276'
p31831
sS'DAQmx_SwitchDev_NumSwitchChans'
p31832
S'0x18E8'
p31833
sS'DAQmxErrorPALComponentNotUnloadable'
p31834
S'(-50262)'
p31835
sS'DAQmxErrorCannotProduceMinPulseWidthGivenPropertyValues'
p31836
S'(-200776)'
p31837
sS'DAQmxErrorCantUsePort3AloneGivenSampTimingTypeOn653x'
p31838
S'(-200900)'
p31839
sS'DAQmx_CI_Encoder_ZIndexVal'
p31840
S'0x0888'
p31841
sS'DAQmxErrorNoMemMapWhenHWTimedSinglePoint'
p31842
S'(-200679)'
p31843
sS'DAQmxErrorFileMissingRequiredDAQmxHeader'
p31844
S'(-201064)'
p31845
sS'DAQmxErrorInvalidSCXISlotNumberSpecd'
p31846
S'(-201032)'
p31847
sS'DAQmxErrorChanSizeTooBigForU8PortRead'
p31848
S'(-200563)'
p31849
sS'DAQmxWarningPretrigCoercion'
p31850
S'(200020)'
p31851
sS'DAQmxErrorOutputBufferUnderwrite'
p31852
S'(-200166)'
p31853
sS'DAQmxErrorRoutingDestTermPXIChassisNotIdentified_Routing'
p31854
S'(-89142)'
p31855
sS'DAQmxErrorRoutingSrcTermPXIStarInSlot16AndAbove_Routing'
p31856
S'(-89146)'
p31857
sS'DAQmxErrorInvalidAODataWrite'
p31858
S'(-200561)'
p31859
sS'DAQmxErrorInternalAIInputSrcInMultChanGroups'
p31860
S'(-200675)'
p31861
sS'DAQmxWarningWaitForNextSampClkDetectedMissedSampClk'
p31862
S'(209802)'
p31863
sS'DAQmx_Val_PseudoDiff'
p31864
S'12529'
p31865
sS'DAQmxErrorPowerBudgetExceeded'
p31866
S'(-200195)'
p31867
sS'DAQmxErrorNumLinesMismatchInReadOrWrite'
p31868
S'(-200463)'
p31869
sS'DAQmxErrorWaitForNextSampClkDetectedMissedSampClk'
p31870
S'(-209802)'
p31871
sS'DAQmxErrorTableScaleNumPreScaledAndScaledValsNotEqual'
p31872
S'(-200350)'
p31873
sS'DAQmxErrorSimultaneousAOWhenNotOnDemandTiming'
p31874
S'(-200831)'
p31875
sS'DAQmxErrorCanExportOnlyDigEdgeTrigs'
p31876
S'(-200896)'
p31877
sS'DAQmx_Val_VoltsPerG'
p31878
S'12510'
p31879
sS'DAQmx_Val_SemiPeriod'
p31880
S'10289'
p31881
sS'DAQmx_Write_TotalSampPerChanGenerated'
p31882
S'0x192B'
p31883
sS'DAQmx_Val_PathStatus_ChannelInUse'
p31884
S'10434'
p31885
sS'DAQmxErrorAttributeNotQueryableUnlessTaskIsCommitted'
p31886
S'(-200451)'
p31887
sS'DAQmxWarningADCOverloaded'
p31888
S'(200005)'
p31889
sS'DAQmx_Dev_DO_Ports'
p31890
S'0x2323'
p31891
sS'DAQmxErrorAOMinMaxNotSupportedGivenDACRangeAndOffsetVal'
p31892
S'(-200871)'
p31893
sS'DAQmx_Val_PathStatus_Available'
p31894
S'10431'
p31895
sS'DAQmxErrorVoltageExcitIncompatibleWith2WireCfg'
p31896
S'(-200162)'
p31897
sS'DAQmx_Exported_HshkEvent_Interlocked_AssertOnStart'
p31898
S'0x22BE'
p31899
sS'DAQmx_AI_RawSampJustification'
p31900
S'0x0050'
p31901
sS'DAQmxErrorLeadingUnderscoreInString'
p31902
S'(-200555)'
p31903
sS'DAQmx_Val_mVoltsPerVoltPerRadian'
p31904
S'12508'
p31905
sS'DAQmxErrorNegativeWriteSampleNumber'
p31906
S'(-200287)'
p31907
sS'DAQmxErrorSampClkRateInvalid'
p31908
S'(-201093)'
p31909
sS'DAQmxErrorDataXferCustomThresholdNotDMAXferMethodSpecifiedForDev'
p31910
S'(-200945)'
p31911
sS'DAQmx_CI_DupCountPrevent'
p31912
S'0x21AC'
p31913
sS'DAQmx_SampClk_MaxRate'
p31914
S'0x22C8'
p31915
sS'DAQmxErrorInvalidPhysChanType'
p31916
S'(-200430)'
p31917
sS'DAQmx_AO_EnhancedImageRejectionEnable'
p31918
S'0x2241'
p31919
sS'DAQmxErrorStartTrigDelayWithExtSampClk'
p31920
S'(-200436)'
p31921
sS'DAQmxErrorDigFilterNotAvailableOnTerm'
p31922
S'(-200772)'
p31923
sS'DAQmxWarningPALMemoryAlignmentFault'
p31924
S'(50351)'
p31925
sS'DAQmx_Val_ChanPerLine'
p31926
g28779
sS'DAQmx_PersistedScale_AllowInteractiveDeletion'
p31927
S'0x22D6'
p31928
sS'DAQmxErrorAIMinNotSpecified'
p31929
S'(-200694)'
p31930
sS'DAQmxErrorDifftSyncPulseSrcAndSampClkTimebaseSrcDevMultiDevTask'
p31931
S'(-200854)'
p31932
sS'DAQmxErrorTooManyChansForInternalAIInputSrc'
p31933
S'(-200710)'
p31934
sS'DAQmx_CI_CtrTimebase_DigFltr_MinPulseWidth'
p31935
S'0x2272'
p31936
sS'DAQmxWarningUnrecognizedEnumValueEncounteredInStorage'
p31937
S'(200044)'
p31938
sS'DAQmxErrorInvalidCfgCalAdjustMainPathPreAmpGain'
p31939
S'(-200511)'
p31940
sS'DAQmx_CI_Encoder_ZIndexPhase'
p31941
S'0x0889'
p31942
sS'DAQmxErrorChanSizeTooBigForU16PortRead'
p31943
S'(-200878)'
p31944
sS'DAQmx_AI_LeadWireResistance'
p31945
S'0x17EE'
p31946
sS'DAQmx_CI_TwoEdgeSep_Second_DigSync_Enable'
p31947
S'0x2218'
p31948
sS'DAQmx_Val_FirstPretrigSamp'
p31949
S'10427'
p31950
sS'DAQmxErrorInternalClkDCMBecameUnlocked'
p31951
S'(-200386)'
p31952
sS'DAQmx_Read_SleepTime'
p31953
S'0x22B0'
p31954
sS'DAQmx_Val_Switch_Topology_2529_2_Wire_4x32_Matrix'
p31955
S'"2529/2-Wire 4x32 Matrix"'
p31956
sS'DAQmxErrorStartTrigSrcEqualToSampClkSrc'
p31957
S'(-200953)'
p31958
sS'DAQmxErrorCOReadyForNewValNotSupportedWithHWTimedSinglePoint'
p31959
S'(-200975)'
p31960
sS'DAQmx_Val_Switch_Topology_1128_2_Wire_4x8_Matrix'
p31961
S'"1128/2-Wire 4x8 Matrix"'
p31962
sS'DAQmxWarningPALLogicalBufferEmpty'
p31963
S'(50406)'
p31964
sS'DAQmx_Exported_AIConvClk_Pulse_Polarity'
p31965
S'0x1688'
p31966
sS'DAQmx_CI_CountEdges_CountDir_DigFltr_Enable'
p31967
S'0x21F1'
p31968
sS'DAQmx_Val_Switch_Topology_2576_2_Wire_Sixteen_4x1_Mux'
p31969
S'"2576/2-Wire Sixteen 4x1 Mux"'
p31970
sS'DAQmx_Val_Pulse_Freq'
p31971
S'10119'
p31972
sS'DAQmxErrorInvalidTask'
p31973
S'(-200088)'
p31974
sS'DAQmx_Exported_DividedSampClkTimebase_OutputTerm'
p31975
S'0x21A1'
p31976
sS'DAQmxErrorRelayNameNotSpecifiedInList'
p31977
S'(-200531)'
p31978
sS'DAQmx_AI_Atten'
p31979
S'0x1801'
p31980
sS'DAQmx_Val_Meters'
p31981
S'10219'
p31982
sS'DAQmx_Exported_AIHoldCmpltEvent_OutputTerm'
p31983
S'0x18ED'
p31984
sS'DAQmxErrorAIMaxTooSmall'
p31985
S'(-200580)'
p31986
sS'DAQmxErrorLibraryNotPresent'
p31987
S'(-200090)'
p31988
sS'DAQmx_CI_SemiPeriod_DigFltr_TimebaseSrc'
p31989
S'0x221B'
p31990
sS'DAQmxErrorInconsistentNumSamplesToWrite'
p31991
S'(-200103)'
p31992
sS'DAQmx_Exported_ChangeDetectEvent_Pulse_Polarity'
p31993
S'0x2303'
p31994
sS'DAQmx_Dev_PXI_ChassisNum'
p31995
S'0x2329'
p31996
sS'DAQmx_AI_Max'
p31997
S'0x17DD'
p31998
sS'DAQmx_Val_Switch_Topology_2568_31_SPST'
p31999
S'"2568/31-SPST"'
p32000
sS'DAQmxErrorReadNoInputChansInTask'
p32001
S'(-200460)'
p32002
sS'DAQmxErrorAOMinMaxNotSupportedDACOffsetValInappropriate'
p32003
S'(-200870)'
p32004
sS'DAQmx_Val_Switch_Topology_2530_4_Wire_Dual_16x1_Mux'
p32005
S'"2530/4-Wire Dual 16x1 Mux"'
p32006
sS'DAQmx_Val_AllowRegen'
p32007
S'10097'
p32008
sS'DAQmxErrorCustomScaleDoesNotExist'
p32009
S'(-200378)'
p32010
sS'DAQmxErrorAOPropertiesCauseVoltageOverMax'
p32011
S'(-200582)'
p32012
sS'DAQmx_Write_RelativeTo'
p32013
S'0x190C'
p32014
sS'DAQmxErrorMaxSoundPressureAndMicSensitivityNotSupportedByDev'
p32015
S'(-200860)'
p32016
sS'DAQmxErrorDeviceAndConnectorSpecdAlreadyOccupied'
p32017
S'(-201047)'
p32018
sS'DAQmx_AO_OutputType'
p32019
S'0x1108'
p32020
sS'DAQmxErrorRoutingPathNotAvailable_Routing'
p32021
S'(-89124)'
p32022
sS'DAQmxErrorDelayFromSampClkWithExtConv'
p32023
S'(-200435)'
p32024
sS'DAQmx_Val_Switch_Topology_2503_2_Wire_4x6_Matrix'
p32025
S'"2503/2-Wire 4x6 Matrix"'
p32026
sS'DAQmx_CI_PulseWidth_DigSync_Enable'
p32027
S'0x220E'
p32028
sS'DAQmxErrorWaveformLengthNotMultipleOfIncr'
p32029
S'(-200400)'
p32030
sS'DAQmx_Val_Temp_Thrmstr'
p32031
S'10302'
p32032
sS'DAQmxErrorTrigWhenAOHWTimedSinglePtSampMode'
p32033
S'(-200812)'
p32034
sS'DAQmxErrorInvalidDeviceID'
p32035
S'(-200220)'
p32036
sS'DAQmxErrorDevAbsentOrUnavailable'
p32037
S'(-200324)'
p32038
sS'DAQmx_Val_Switch_Topology_1129_2_Wire_Dual_4x32_Matrix'
p32039
S'"1129/2-Wire Dual 4x32 Matrix"'
p32040
sS'DAQmx_AI_StrainGage_PoissonRatio'
p32041
S'0x0998'
p32042
sS'DAQmxErrorDigLinesReservedOrUnavailable'
p32043
S'(-200587)'
p32044
sS'DAQmxErrorPALBadDevice'
p32045
S'(-50002)'
p32046
sS'DAQmxErrorSampleTimingTypeAndDataXferMode'
p32047
S'(-200218)'
p32048
sS'DAQmxWarningReadNotCompleteBeforeSampClk'
p32049
S'(209800)'
p32050
sS'DAQmxErrorCAPIReservedParamNotNULLNorEmpty'
p32051
S'(-200493)'
p32052
sS'DAQmx_Val_ChannelVoltage'
p32053
g28779
sS'DAQmxErrorPALComponentNotFound'
p32054
S'(-50251)'
p32055
sS'DAQmx_StartTrig_DelayUnits'
p32056
S'0x18C8'
p32057
sS'DAQmxErrorSamplesWillNeverBeGenerated'
p32058
S'(-200288)'
p32059
sS'DAQmxErrorRouteNotSupportedByHW_Routing'
p32060
S'(-89136)'
p32061
sS'DAQmxErrorCannotHandshakeWithPort0'
p32062
S'(-200127)'
p32063
sS'DAQmx_Val_PPS'
p32064
S'10080'
p32065
sS'DAQmxErrorNoWatchdogOutputOnPortReservedForInput'
p32066
S'(-200667)'
p32067
sS'DAQmx_Val_B_Type_TC'
p32068
S'10047'
p32069
sS'DAQmx_RealTime_ReportMissedSamp'
p32070
S'0x2319'
p32071
sS'DAQmx_CI_CountEdges_DigFltr_TimebaseRate'
p32072
S'0x21F9'
p32073
sS'DAQmxErrorPrptyGetImpliedActiveChanFailedDueToDifftVals'
p32074
S'(-200658)'
p32075
sS'DAQmx_CI_Period_DigFltr_Enable'
p32076
S'0x21EC'
p32077
sS'DAQmxErrorInvalidCfgCalAdjustMainPathOutputImpedance'
p32078
S'(-200513)'
p32079
sS'DAQmxErrorCannotReadWhenAutoStartFalseAndTaskNotRunningOrCommitted'
p32080
S'(-200473)'
p32081
sS'DAQmxErrorResourcesInUseForInversionInTask'
p32082
S'(-200366)'
p32083
sS'DAQmx_Val_DigLvl'
p32084
S'10152'
p32085
sS'DAQmx_AnlgWin_StartTrig_Coupling'
p32086
S'0x2234'
p32087
sS'DAQmxWarningPALFunctionObsolete'
p32088
S'(50254)'
p32089
sS'DAQmx_SwitchDev_NumColumns'
p32090
S'0x18EA'
p32091
sS'DAQmxErrorScriptDataUnderflow'
p32092
S'(-200316)'
p32093
sS'DAQmx_SwitchScan_RepeatMode'
p32094
S'0x1248'
p32095
sS'DAQmx_AO_DAC_Ref_ConnToGnd'
p32096
S'0x0130'
p32097
sS'DAQmxErrorUnexpectedSeparatorInList'
p32098
S'(-200064)'
p32099
sS'DAQmxErrorMultipleRelaysForSingleRelayOp'
p32100
S'(-200211)'
p32101
sS'DAQmx_AnlgWin_StartTrig_Src'
p32102
S'0x1400'
p32103
sS'DAQmxErrorMStudioNoForwardPolyScaleCoeffsUseCalc'
p32104
S'(-200780)'
p32105
sS'DAQmxErrorPALComponentTooNew'
p32106
S'(-50253)'
p32107
sS'DAQmxErrorAODuringCounter1DMAConflict'
p32108
S'(-200079)'
p32109
sS'DAQmx_Val_SampClkPeriods'
p32110
S'10286'
p32111
sS'DAQmx_DigEdge_ArmStartTrig_Src'
p32112
S'0x1417'
p32113
sS'DAQmx_AO_UseOnlyOnBrdMem'
p32114
S'0x183A'
p32115
sS'DAQmx_Buf_Output_OnbrdBufSize'
p32116
S'0x230B'
p32117
sS'DAQmxErrorIfElseBlockNotAllowedInConditionalRepeatLoopInScript'
p32118
S'(-201013)'
p32119
sS'DAQmxErrorInvalidAnalogTrigSrc'
p32120
S'(-200265)'
p32121
sS'DAQmxWarningPALTransferOverwritten'
p32122
S'(50410)'
p32123
sS'DAQmx_Val_Acquired_Into_Buffer'
p32124
g28873
sS'DAQmxErrorOutputFIFOUnderflow'
p32125
S'(-200016)'
p32126
sS'DAQmxErrorMarkerPosInvalidBeforeIfElseBlockInScript'
p32127
S'(-201010)'
p32128
sS'DAQmx_Val_Switch_Topology_2527_2_Wire_Dual_16x1_Mux'
p32129
S'"2527/2-Wire Dual 16x1 Mux"'
p32130
sS'DAQmxErrorActionNotSupportedTaskNotWatchdog'
p32131
S'(-200635)'
p32132
sS'DAQmxErrorTemperatureOutOfRangeForCalibration'
p32133
S'(-200113)'
p32134
sS'DAQmx_Val_QuarterBridgeI'
p32135
S'10271'
p32136
sS'DAQmxErrorPALResourceNotAvailable'
p32137
S'(-50101)'
p32138
sS'DAQmx_CO_PulseDone'
p32139
S'0x190E'
p32140
sS'DAQmx_AI_Bridge_Balance_CoarsePot'
p32141
S'0x17F1'
p32142
sS'DAQmx_AI_Coupling'
p32143
S'0x0064'
p32144
sS'DAQmx_Val_WaitForInterrupt'
p32145
S'12523'
p32146
sS'DAQmxErrorCannotOpenTopologyCfgFile'
p32147
S'(-200328)'
p32148
sS'DAQmx_AI_Freq_Hyst'
p32149
S'0x0814'
p32150
sS'DAQmxErrorInvalidTableIdentifier'
p32151
S'(-201067)'
p32152
sS'DAQmx_DigPattern_RefTrig_Src'
p32153
S'0x1437'
p32154
sS'DAQmxErrorInvalidRangeStatementCharInList'
p32155
S'(-200208)'
p32156
sS'DAQmxErrorPALBadAddressClass'
p32157
S'(-50015)'
p32158
sS'DAQmxErrorNoCommonTrigLineForTaskRoute'
p32159
S'(-200395)'
p32160
sS'DAQmxErrorSamplesWillNeverBeAvailable'
p32161
S'(-200278)'
p32162
sS'DAQmxErrorRuntimeAborted_Routing'
p32163
S'(-88709)'
p32164
sS'DAQmxErrorLines4To7ConfiguredForInput'
p32165
S'(-200124)'
p32166
sS'DAQmx_CI_TwoEdgeSep_FirstEdge'
p32167
S'0x0833'
p32168
sS'DAQmx_AO_DAC_Rng_High'
p32169
S'0x182E'
p32170
sS'DAQmxErrorInvalidAcqTypeForFREQOUT'
p32171
S'(-200747)'
p32172
sS'DAQmxErrorExpectedSeparatorInList'
p32173
S'(-200061)'
p32174
sS'DAQmx_Val_Switch_Topology_1127_1_Wire_64x1_Mux'
p32175
S'"1127/1-Wire 64x1 Mux"'
p32176
sS'DAQmx_CI_Encoder_ZInput_DigFltr_Enable'
p32177
S'0x2205'
p32178
sS'DAQmx_AI_Gain'
p32179
S'0x1818'
p32180
sS'DAQmxErrorFewerThan2PreScaledVals'
p32181
S'(-200434)'
p32182
sS'DAQmx_CO_Pulse_HighTicks'
p32183
S'0x1169'
p32184
sS'DAQmxErrorOnlyContinuousScanSupported'
p32185
S'(-200192)'
p32186
sS'DAQmxErrorMStudioInvalidPolyDirection'
p32187
S'(-200594)'
p32188
sS'DAQmxErrorReadWaitNextSampClkWaitMismatchOne'
p32189
S'(-200988)'
p32190
sS'DAQmxErrorInvalidCalConstGainDACValue'
p32191
S'(-200516)'
p32192
sS'DAQmx_CI_PulseWidth_Term'
p32193
S'0x18AA'
p32194
sS'DAQmxWarningCAPIStringTruncatedToFitBuffer'
p32195
S'(200026)'
p32196
sS'DAQmxErrorAttrCannotBeRead'
p32197
S'(-200232)'
p32198
sS'DAQmxErrorGlobalChanCannotBeSavedSoInteractiveEditsAllowed'
p32199
S'(-200884)'
p32200
sS'DAQmxErrorExtCalConstsInvalid'
p32201
S'(-200437)'
p32202
sS'DAQmxErrorTEDSSensorNotDetected'
p32203
S'(-200709)'
p32204
sS'DAQmx_AnlgEdge_RefTrig_Slope'
p32205
S'0x1423'
p32206
sS'DAQmx_DI_DigFltr_Enable'
p32207
S'0x21D6'
p32208
sS'DAQmxWarningCounter0DMADuringAIConflict'
p32209
S'(200008)'
p32210
sS'DAQmxErrorCODAQmxWriteMultipleChans'
p32211
S'(-200794)'
p32212
sS'DAQmxErrorInvalidAdvanceEventTriggerType'
p32213
S'(-200070)'
p32214
sS'DAQmxErrorCTROutSampClkPeriodShorterThanGenPulseTrainPeriod2'
p32215
S'(-201023)'
p32216
sS'DAQmxErrorIntermediateBufferSizeNotMultipleOfIncr'
p32217
S'(-200347)'
p32218
sS'DAQmx_DigPattern_RefTrig_Pattern'
p32219
S'0x2187'
p32220
sS'DAQmxErrorWaveformNameTooLong'
p32221
S'(-200534)'
p32222
sS'DAQmxErrorAOEveryNSampsEventIntervalNotMultipleOf2'
p32223
S'(-200917)'
p32224
sS'DAQmxWarningPALPhysicalBufferEmpty'
p32225
S'(50408)'
p32226
sS'DAQmx_Sys_NIDAQMinorVersion'
p32227
S'0x1923'
p32228
sS'DAQmx_AIConv_ActiveEdge'
p32229
S'0x1853'
p32230
sS'DAQmxErrorResourcesInUseForProperty_Routing'
p32231
S'(-89132)'
p32232
sS'DAQmx_SampClk_DigSync_Enable'
p32233
S'0x2222'
p32234
sS'DAQmxErrorSCXI1122ResistanceChanNotSupportedForCfg'
p32235
S'(-200105)'
p32236
sS'DAQmx_SwitchDev_PwrDownLatchRelaysAfterSettling'
p32237
S'0x22DB'
p32238
sS'DAQmxErrorStartTrigDigPatternChanNotInTask'
p32239
S'(-200887)'
p32240
sS'DAQmxErrorRoutingDestTermPXIClk10InNotInSlot2'
p32241
S'(-200706)'
p32242
sS'DAQmxErrorCannotReadRelativeToRefTrigUntilDone'
p32243
S'(-200281)'
p32244
sS'DAQmxErrorDAQmxCantRetrieveStringDueToUnknownChar'
p32245
S'(-200810)'
p32246
sS'DAQmxErrorClkDoublerDCMLock'
p32247
S'(-200241)'
p32248
sS'DAQmx_CO_RdyForNewVal'
p32249
S'0x22FF'
p32250
sS'DAQmxErrorCJCChanNameMustBeSetWhenCJCSrcIsScannableChan'
p32251
S'(-201085)'
p32252
sS'DAQmxErrorRecordOverwritten'
p32253
S'(-200006)'
p32254
sS'DAQmx_Exported_HshkEvent_Pulse_Polarity'
p32255
S'0x22C0'
p32256
sS'DAQmx_Val_Switch_Topology_1130_2_Wire_4x32_Matrix'
p32257
S'"1130/2-Wire 4x32 Matrix"'
p32258
sS'DAQmxWarningPALMemoryHeapNotEmpty'
p32259
S'(50355)'
p32260
sS'DAQmx_Scale_ScaledUnits'
p32261
S'0x191B'
p32262
sS'DAQmx_Write_WaitMode'
p32263
S'0x22B1'
p32264
sS'DAQmx_CI_Period_MeasMeth'
p32265
S'0x192C'
p32266
sS'DAQmxErrorZeroReversePolyScaleCoeffs'
p32267
S'(-200408)'
p32268
sS'DAQmxErrorDifferentInternalAIInputSources'
p32269
S'(-200573)'
p32270
sS'DAQmx_AO_LoadImpedance'
p32271
S'0x0121'
p32272
sS'DAQmxErrorDifferentAIInputSrcInOneChanGroup'
p32273
S'(-200572)'
p32274
sS'DAQmxWarningTooManyInterruptsPerSecond'
p32275
S'(200014)'
p32276
sS'DAQmx_Val_HandshakeTriggerDeasserts'
p32277
S'12553'
p32278
sS'DAQmx_Val_PathStatus_SourceChannelConflict'
p32279
S'10435'
p32280
sS'DAQmxErrorCantSetAuthorForLocalChan'
p32281
S'(-201038)'
p32282
sS'DAQmxErrorReadBufferTooSmall'
p32283
S'(-200229)'
p32284
sS'DAQmx_Val_Cfg_Default'
p32285
S'-1'
p32286
sS'DAQmxErrorLinesUsedForStaticInputNotForHandshakingInput'
p32287
S'(-200726)'
p32288
sS'DAQmx_Val_Switch_Topology_1175_2_Wire_95x1_Mux'
p32289
S'"1175/2-Wire 95x1 Mux"'
p32290
sS'DAQmx_CI_Encoder_ZInput_DigSync_Enable'
p32291
S'0x2209'
p32292
sS'DAQmx_Val_Switch_Topology_2596_Dual_6x1_Mux'
p32293
S'"2596/Dual 6x1 Mux"'
p32294
sS'DAQmxErrorStartTrigOutputTermNotSupportedGivenTimingType'
p32295
S'(-200911)'
p32296
sS'DAQmxErrorCannotTristate8255OutputLines'
p32297
S'(-200116)'
p32298
sS'DAQmx_AI_Excit_Src'
p32299
S'0x17F4'
p32300
sS'DAQmxErrorPhysChanDevNotInTask'
p32301
S'(-200648)'
p32302
sS'DAQmx_SwitchChan_Bandwidth'
p32303
S'0x0640'
p32304
sS'DAQmx_AI_RawSampSize'
p32305
S'0x22DA'
p32306
sS'DAQmx_Val_EnteringWin'
p32307
S'10163'
p32308
sS'DAQmxErrorResourceNotFound'
p32309
S'(-54000)'
p32310
sS'DAQmxErrorRouteSrcAndDestSame_Routing'
p32311
S'(-89131)'
p32312
sS'DAQmxErrorInvalidINIFileSyntax'
p32313
S'(-201060)'
p32314
sS'DAQmxErrorInvalidCalArea'
p32315
S'(-200438)'
p32316
sS'DAQmxErrorCorruptedTEDSMemory'
p32317
S'(-200742)'
p32318
sS'DAQmxErrorCannotScanWithCurrentTopology'
p32319
S'(-200205)'
p32320
sS'DAQmx_Dev_CI_PhysicalChans'
p32321
S'0x2324'
p32322
sS'DAQmxErrorAOMinMaxNotInDACRange'
p32323
S'(-200759)'
p32324
sS'DAQmxErrorSCXIModuleIncorrect'
p32325
S'(-200107)'
p32326
sS'DAQmxErrorInputFIFOOverflow2'
p32327
S'(-200361)'
p32328
sS'DAQmx_AO_TermCfg'
p32329
S'0x188E'
p32330
sS'DAQmx_Val_Action_Cancel'
p32331
g28873
sS'DAQmxErrorSampClkSrcInvalidForOutputValidForInput'
p32332
S'(-200610)'
p32333
sS'DAQmxErrorSampleRateNumChansConvertPeriodCombo'
p32334
S'(-200081)'
p32335
sS'DAQmxErrorNumPtsToComputeNotPositive'
p32336
S'(-200401)'
p32337
sS'DAQmx_AI_RVDT_SensitivityUnits'
p32338
S'0x219B'
p32339
sS'DAQmxErrorStartTrigDigPatternSizeDoesNotMatchSourceSize'
p32340
S'(-200894)'
p32341
sS'DAQmxErrorInvalidTrigTypeSendsSWTrig'
p32342
S'(-200372)'
p32343
sS'DAQmx_CI_CountEdges_DigFltr_MinPulseWidth'
p32344
S'0x21F7'
p32345
sS'DAQmxErrorPALDMALinkEventMissed'
p32346
S'(-50450)'
p32347
sS'DAQmxErrorBridgeOffsetNullingCalNotSupported'
p32348
S'(-200696)'
p32349
sS'DAQmxWarningCounter1DMADuringAOConflict'
p32350
S'(200009)'
p32351
sS'DAQmx_Write_DigitalLines_BytesPerChan'
p32352
S'0x217F'
p32353
sS'DAQmxWarningOutputGainTooLowForRFFreq'
p32354
S'(200031)'
p32355
sS'DAQmx_Task_Complete'
p32356
S'0x1274'
p32357
sS'DAQmx_AO_MemMapEnable'
p32358
S'0x188F'
p32359
sS'DAQmx_CI_PulseWidth_DigFltr_TimebaseRate'
p32360
S'0x220D'
p32361
sS'DAQmx_SwitchChan_MaxACCarryCurrent'
p32362
S'0x0648'
p32363
sS'DAQmxErrorChannelNotAvailableInParallelMode'
p32364
S'(-200150)'
p32365
sS'DAQmxErrorCannotGetPropertyWhenTaskNotReservedCommittedOrRunning'
p32366
S'(-200983)'
p32367
sS'DAQmx_AIConv_Rate'
p32368
S'0x1848'
p32369
sS'DAQmxErrorRoutingSrcTermPXIChassisNotIdentified'
p32370
S'(-200698)'
p32371
sS'DAQmx_Val_AdvanceTrigger'
p32372
S'12488'
p32373
sS'DAQmx_Val_Switch_Topology_1127_2_Wire_32x1_Mux'
p32374
S'"1127/2-Wire 32x1 Mux"'
p32375
sS'DAQmxErrorRoutingSrcTermPXIChassisNotIdentified_Routing'
p32376
S'(-89141)'
p32377
sS'DAQmxErrorTEDSMinPhysValGEMaxPhysVal'
p32378
S'(-200815)'
p32379
sS'DAQmx_AI_Bridge_NomResistance'
p32380
S'0x17EC'
p32381
sS'DAQmxErrorMultipleWritesBetweenSampClks'
p32382
S'(-200748)'
p32383
sS'DAQmxErrorPALMessageOverflow'
p32384
S'(-50650)'
p32385
sS'DAQmxErrorTrigLineNotFound_Routing'
p32386
S'(-89125)'
p32387
sS'DAQmx_Val_AO'
p32388
S'10102'
p32389
sS'DAQmxErrorBuiltInTempSensorNotSupported'
p32390
S'(-200255)'
p32391
sS'DAQmx_Val_AI'
p32392
S'10100'
p32393
sS'DAQmx_Val_Switch_Topology_1130_1_Wire_Sixteen_16x1_Mux'
p32394
S'"1130/1-Wire Sixteen 16x1 Mux"'
p32395
sS'DAQmx_Read_Offset'
p32396
S'0x190B'
p32397
sS'DAQmx_Val_AC'
p32398
S'10045'
p32399
sS'DAQmxErrorReadWaitNextSampClkWaitMismatchTwo'
p32400
S'(-200989)'
p32401
sS'DAQmxErrorOverloadedChansExistNotRead'
p32402
S'(-200362)'
p32403
sS'DAQmxErrorPALIrrelevantAttribute'
p32404
S'(-50001)'
p32405
sS'DAQmx_Exported_AdvCmpltEvent_Pulse_Polarity'
p32406
S'0x1652'
p32407
sS'DAQmx_CI_TwoEdgeSep_Second_DigFltr_TimebaseRate'
p32408
S'0x2217'
p32409
sS'DAQmxErrorMemMapAndBuffer'
p32410
S'(-200215)'
p32411
sS'DAQmxErrorExtCalTemperatureNotDAQmx'
p32412
S'(-200544)'
p32413
sS'DAQmx_Val_OutsideWin'
p32414
S'10251'
p32415
sS'DAQmx_Val_Load'
p32416
S'10440'
p32417
sS'DAQmxErrorPXIDevTempCausedShutDown'
p32418
S'(-200623)'
p32419
sS'DAQmx_CI_CountEdges_Dir'
p32420
S'0x0696'
p32421
sS'DAQmxErrorPALBadSelector'
p32422
S'(-50003)'
p32423
sS'DAQmx_AI_Current_Units'
p32424
S'0x0701'
p32425
sS'DAQmxErrorIntermediateBufferFull'
p32426
S'(-200495)'
p32427
sS'DAQmx_CI_CustomScaleName'
p32428
S'0x189E'
p32429
sS'DAQmxErrorAOSampTimingTypeDifferentIn2Tasks'
p32430
S'(-200963)'
p32431
sS'DAQmxErrorPALBadOffset'
p32432
S'(-50007)'
p32433
sS'DAQmxErrorInvalidNumberSamplesToRead'
p32434
S'(-200096)'
p32435
sS'DAQmxErrorNoDMAChansAvailable'
p32436
S'(-200251)'
p32437
sS'DAQmx_Val_Switch_Topology_2532_1_Wire_Dual_16x16_Matrix'
p32438
S'"2532/1-Wire Dual 16x16 Matrix"'
p32439
sS'DAQmx_Val_HalfBridgeII'
p32440
S'10189'
p32441
sS'DAQmxErrorWatchdogTimerNotSupported'
p32442
S'(-200662)'
p32443
sS'DAQmxErrorSamplesNotYetAvailable'
p32444
S'(-200284)'
p32445
sS'DAQmxErrorMultipleChansNotSupportedDuringCalSetup'
p32446
S'(-201004)'
p32447
sS'DAQmx_Val_Unknown'
p32448
S'12588'
p32449
sS'DAQmxErrorCantSaveTaskWithoutReplace'
p32450
S'(-200484)'
p32451
sS'DAQmx_Exported_AdvCmpltEvent_Delay'
p32452
S'0x1757'
p32453
sS'DAQmx_CI_SemiPeriod_StartingEdge'
p32454
S'0x22FE'
p32455
sS'DAQmx_Val_Kelvins'
p32456
S'10325'
p32457
sS'DAQmxErrorDuplicateTask'
p32458
S'(-200089)'
p32459
sS'DAQmx_RefClk_Rate'
p32460
S'0x1315'
p32461
sS'DAQmx_CI_Freq_MeasTime'
p32462
S'0x0145'
p32463
sS'DAQmxErrorNonBufferedAndHWTimed'
p32464
S'(-201025)'
p32465
sS'DAQmxErrorNoChansSpecdForPatternSource'
p32466
S'(-200927)'
p32467
sS'DAQmx_AI_Lowpass_Enable'
p32468
S'0x1802'
p32469
sS'DAQmxErrorCounterStartPauseTriggerConflict'
p32470
S'(-200146)'
p32471
sS'DAQmxErrorPALFileWriteFault'
p32472
S'(-50208)'
p32473
sS'DAQmxErrorMStudioNoReversePolyScaleCoeffsUseCalc'
p32474
S'(-200779)'
p32475
sS'DAQmxErrorPALFirmwareFault'
p32476
S'(-50151)'
p32477
sS'DAQmxErrorMemMapAndSimultaneousAO'
p32478
S'(-200830)'
p32479
sS'DAQmx_Val_HalfBridge'
p32480
S'10187'
p32481
sS'DAQmxWarningPALBadDevice'
p32482
S'(50002)'
p32483
sS'DAQmxErrorSampClkTimebaseDCMBecameUnlocked'
p32484
S'(-200238)'
p32485
sS'DAQmxErrorSemicolonDoesNotFollowRangeInList'
p32486
S'(-200054)'
p32487
sS'DAQmx_Val_PCI'
p32488
S'12582'
p32489
sS'DAQmx_Val_Position_AngEncoder'
p32490
S'10360'
p32491
sS'DAQmxErrorCannotAddNewDevsAfterTaskConfiguration'
p32492
S'(-200855)'
p32493
sS'DAQmxErrorWaitIsLastInstructionOfLoopInScript'
p32494
S'(-200038)'
p32495
sS'DAQmxErrorReversePolyOrderLessThanNumPtsToCompute'
p32496
S'(-200403)'
p32497
sS'DAQmx_Val_SynchronousEventCallbacks'
p32498
S'(1<<0)'
p32499
sS'DAQmxErrorDataLineReservedForDynamicOutput'
p32500
S'(-200384)'
p32501
sS'DAQmx_CI_Encoder_ZInput_DigFltr_TimebaseSrc'
p32502
S'0x2207'
p32503
sS'DAQmxErrorPALThreadHasNoThreadObject'
p32504
S'(-50601)'
p32505
sS'DAQmx_Val_DoNotOverwriteUnreadSamps'
p32506
S'10159'
p32507
sS'DAQmxErrorInvalidPhysicalChanForCal'
p32508
S'(-200444)'
p32509
sS'DAQmx_AO_DAC_Ref_Src'
p32510
S'0x0132'
p32511
sS'DAQmxErrorEndpointNotFound'
p32512
S'(-54001)'
p32513
sS'DAQmxErrorSubsetStartOffsetNotAlignedInScript'
p32514
S'(-200033)'
p32515
sS'DAQmxErrorUnexpectedEndOfActionsInList'
p32516
S'(-200196)'
p32517
sS'DAQmxWarningPALBadReadOffset'
p32518
S'(50010)'
p32519
sS'DAQmxErrorSwitchDevShutDownDueToHighTemp'
p32520
S'(-200818)'
p32521
sS'DAQmx_Val_Task_Reserve'
p32522
g30377
sS'DAQmx_AnlgWin_StartTrig_When'
p32523
S'0x1401'
p32524
sS'DAQmx_AI_Accel_SensitivityUnits'
p32525
S'0x219C'
p32526
sS'_NI_float32_DEFINED_'
p32527
g28678
sS'DAQmxErrorChanCalScaleTypeNotSet'
p32528
S'(-200935)'
p32529
sS'DAQmx_CI_Freq_DigFltr_Enable'
p32530
S'0x21E7'
p32531
sS'DAQmxErrorExplicitConnectionExists'
p32532
S'(-200179)'
p32533
sS'DAQmxErrorCannotReadPastEndOfRecord'
p32534
S'(-200614)'
p32535
sS'DAQmx_Scale_Poly_ReverseCoeff'
p32536
S'0x1235'
p32537
sS'DAQmxErrorPropertyNotSupportedNotOutputTask'
p32538
S'(-200456)'
p32539
sS'DAQmxErrorAOMinMaxNotSupportedGivenDACRefVal'
p32540
S'(-200867)'
p32541
sS'DAQmx_CI_TwoEdgeSep_First_DigFltr_Enable'
p32542
S'0x220F'
p32543
sS'DAQmxErrorInvalidRefClkSrcGivenSampClkSrc'
p32544
S'(-200383)'
p32545
sS'DAQmx_AI_Lowpass_SwitchCap_OutClkDiv'
p32546
S'0x1887'
p32547
sS'_NI_uInt64_DEFINED_'
p32548
g28678
sS'DAQmx_Dev_AI_PhysicalChans'
p32549
S'0x231E'
p32550
sS'DAQmxErrorExtraPropertyDetectedInSpecdObject'
p32551
S'(-201040)'
p32552
sS'DAQmxErrorDLLLock'
p32553
S'(-200550)'
p32554
sS'DAQmxErrorMStudioNoPolyScaleCoeffsUseCalc'
p32555
S'(-200781)'
p32556
sS'DAQmxErrorStreamDCMLock'
p32557
S'(-200313)'
p32558
sS'DAQmx_CO_Pulse_Freq_InitialDelay'
p32559
S'0x0299'
p32560
sS'DAQmxErrorAOMinMaxNotSupportedGivenDACRefAndOffsetVal'
p32561
S'(-200866)'
p32562
sS'DAQmxErrorHWTimedSinglePointNotSupportedAI'
p32563
S'(-200821)'
p32564
sS'DAQmx_SwitchChan_MaxACCarryPwr'
p32565
S'0x0642'
p32566
sS'DAQmxErrorSampsPerChanTooBig'
p32567
S'(-200306)'
p32568
sS'DAQmx_CO_CtrTimebaseMasterTimebaseDiv'
p32569
S'0x18C3'
p32570
sS'DAQmxErrorSwitchCannotDriveMultipleTrigLines'
p32571
S'(-200203)'
p32572
sS'DAQmx_Exported_CtrOutEvent_OutputBehavior'
p32573
S'0x174F'
p32574
sS'DAQmxErrorCtrHWTimedSinglePointAndDataXferNotProgIO'
p32575
S'(-200842)'
p32576
sS'DAQmx_Val_Cont'
p32577
S'10117'
p32578
sS'DAQmxErrorEveryNSampsTransferredFromBufferEventAlreadyRegistered'
p32579
S'(-200967)'
p32580
sS'DAQmxErrorAcqStoppedDriverCantXferDataFastEnough'
p32581
S'(-200714)'
p32582
sS'DAQmx_Val_Switch_Topology_2501_2_Wire_24x1_Amplified_Mux'
p32583
S'"2501/2-Wire 24x1 Amplified Mux"'
p32584
sS'DAQmx_AI_Bridge_Balance_FinePot'
p32585
S'0x18F4'
p32586
sS'DAQmx_CI_Period_DigSync_Enable'
p32587
S'0x21F0'
p32588
sS'DAQmxErrorAOPropertiesCauseVoltageBelowMin'
p32589
S'(-200583)'
p32590
sS'DAQmx_CI_NumPossiblyInvalidSamps'
p32591
S'0x193C'
p32592
sS'DAQmx_AI_ChanCal_ApplyCalIfExp'
p32593
S'0x2299'
p32594
sS'DAQmxErrorPulseActiveAtStart'
p32595
S'(-200339)'
p32596
sS'DAQmxErrorTEDSMappingMethodInvalidOrUnsupported'
p32597
S'(-200765)'
p32598
sS'DAQmx_Write_RawDataWidth'
p32599
S'0x217D'
p32600
sS'DAQmxErrorAttrNotSupported'
p32601
S'(-200197)'
p32602
sS'DAQmxError20MhzTimebaseNotSupportedGivenTimingType'
p32603
S'(-200909)'
p32604
sS'DAQmx_Write_Offset'
p32605
S'0x190D'
p32606
sS'DAQmxErrorInvalidIDInListAtBeginningOfSwitchOperation'
p32607
S'(-200595)'
p32608
sS'DAQmxErrorCOMultipleWritesBetweenSampClks'
p32609
S'(-200951)'
p32610
sS'DAQmx_AnlgWin_RefTrig_Src'
p32611
S'0x1426'
p32612
sS'DAQmxErrorPALFunctionNotFound'
p32613
S'(-50255)'
p32614
sS'DAQmxErrorPortDoesNotSupportHandshakingDataIO'
p32615
S'(-200117)'
p32616
sS'DAQmxErrorDACRefValNotSet'
p32617
S'(-200540)'
p32618
sS'DAQmx_AI_CustomScaleName'
p32619
S'0x17E0'
p32620
sS'DAQmxErrorTDCNotEnabledDuringRISMode'
p32621
S'(-200417)'
p32622
sS'DAQmxErrorCalPasswordNotSupported'
p32623
S'(-201006)'
p32624
sS'DAQmx_Val_Immediate'
p32625
S'10198'
p32626
sS'DAQmx_StartTrig_Type'
p32627
S'0x1393'
p32628
sS'DAQmxErrorCannotConnectChansDirectly'
p32629
S'(-200185)'
p32630
sS'DAQmx_OnDemand_SimultaneousAOEnable'
p32631
S'0x21A0'
p32632
sS'DAQmxErrorIdentifierInListTooLong'
p32633
S'(-200058)'
p32634
sS'DAQmxErrorAttributeInconsistentAcrossChannelsOnDevice'
p32635
S'(-200106)'
p32636
sS'DAQmx_Val_Switch_Topology_2575_1_Wire_196x1_Mux'
p32637
S'"2575/1-Wire 196x1 Mux"'
p32638
sS'DAQmxErrorWriteWhenTaskNotRunningCOFreq'
p32639
S'(-200875)'
p32640
sS'DAQmx_SwitchChan_MaxDCSwitchPwr'
p32641
S'0x0649'
p32642
sS'DAQmxErrorSampClkRateNotSupportedWithEARDisabled'
p32643
S'(-201001)'
p32644
sS'DAQmxErrorCabledModuleCannotRouteConvClk'
p32645
S'(-200319)'
p32646
sS'DAQmx_Val_Freq'
p32647
S'10179'
p32648
sS'DAQmxErrorNoMoreSpace'
p32649
S'(-200293)'
p32650
sS'DAQmxErrorDDCClkOutDCMLock'
p32651
S'(-200243)'
p32652
sS'DAQmxWarningPALComponentNotUnloadable'
p32653
S'(50262)'
p32654
sS'DAQmxErrorDigInputOverrun'
p32655
S'(-200715)'
p32656
sS'DAQmx_ChanDescr'
p32657
S'0x1926'
p32658
sS'__CFUNC_C'
p32659
S'__cdecl'
p32660
sS'DAQmx_CI_Freq_DigFltr_MinPulseWidth'
p32661
S'0x21E8'
p32662
sS'DAQmx_Val_Poll'
p32663
S'12524'
p32664
sS'DAQmxErrorSignalEventsNotSupportedByDevice'
p32665
S'(-200982)'
p32666
sS'DAQmxErrorDuplicateDevIDInList'
p32667
S'(-200209)'
p32668
sS'DAQmx_DigEdge_AdvTrig_DigFltr_Enable'
p32669
S'0x2238'
p32670
sS'DAQmx_CI_Encoder_BInput_DigFltr_TimebaseRate'
p32671
S'0x2203'
p32672
sS'NULL'
p32673
S'(0L)'
p32674
sS'DAQmx_Interlocked_HshkTrig_Src'
p32675
S'0x22B8'
p32676
sS'DAQmxErrorPALComponentAlreadyInstalled'
p32677
S'(-50263)'
p32678
sS'DAQmxErrorPALTransferNotInProgress'
p32679
S'(-50402)'
p32680
sS'DAQmxErrorTimeStampOverwritten'
p32681
S'(-200009)'
p32682
sS'DAQmxErrorPALOSInitializationFault'
p32683
S'(-50201)'
p32684
sS'DAQmx_Val_SampClk'
p32685
S'10388'
p32686
sS'DAQmx_Exported_10MHzRefClk_OutputTerm'
p32687
S'0x226E'
p32688
sS'DAQmxErrorMultipleCounterInputTask'
p32689
S'(-200147)'
p32690
sS'DAQmxErrorAutoStartWriteNotAllowedEventRegistered'
p32691
S'(-200985)'
p32692
sS'DAQmxErrorChanDoesNotSupportCompression'
p32693
S'(-200956)'
p32694
sS'DAQmx_Val_DigEdge'
p32695
S'10150'
p32696
sS'DAQmxErrorDACRngLowNotEqualToMinusRefVal'
p32697
S'(-200670)'
p32698
sS'DAQmxErrorPALResourceNotInitialized'
p32699
S'(-50104)'
p32700
sS'DAQmxErrorCIOnboardClockNotSupportedAsInputTerm'
p32701
S'(-200814)'
p32702
sS'DAQmxErrorSampClockSourceNotSupportedGivenTimingType'
p32703
S'(-200908)'
p32704
sS'DAQmx_Val_RefTrig'
p32705
S'10426'
p32706
sS'DAQmxErrorInvalidChannel'
p32707
S'(-200087)'
p32708
sS'DAQmxErrorCanExportOnlyOnboardSampClk'
p32709
S'(-200891)'
p32710
sS'DAQmxErrorDifferentRawDataFormats'
p32711
S'(-200955)'
p32712
sS'DAQmx_CO_OutputState'
p32713
S'0x0294'
p32714
sS'DAQmx_Val_FullBridgeII'
p32715
S'10184'
p32716
sS'DAQmx_AI_Freq_Units'
p32717
S'0x0806'
p32718
sS'DAQmxErrorCOWriteDutyCycleOutOfRange'
p32719
S'(-200684)'
p32720
sS'DAQmx_Val_Switch_Topology_2530_1_Wire_8x16_Matrix'
p32721
S'"2530/1-Wire 8x16 Matrix"'
p32722
sS'DAQmx_Val_Switch_Topology_2530_1_Wire_Octal_16x1_Mux'
p32723
S'"2530/1-Wire Octal 16x1 Mux"'
p32724
sS'DAQmxErrorPowerupStateNotSupported'
p32725
S'(-200663)'
p32726
sS'DAQmxErrorCantSetPropertyTaskNotRunning'
p32727
S'(-200972)'
p32728
sS'DAQmx_CO_Pulse_IdleState'
p32729
S'0x1170'
p32730
sS'DAQmxErrorPALResourceOwnedBySystem'
p32731
S'(-50100)'
p32732
ssg16
(dp32733
sg18
(dp32734
g28103
I8993
sg28105
I-200186
sg28107
I4113
sg28109
I4115
sg28111
I4112
sg28113
I-200651
sg28115
I8905
sg28117
I-200584
sg28119
I6377
sg28121
I50411
sg28123
I-209801
sg28125
I-200233
sg28127
S'2575/2-Wire 95x1 Mux'
p32735
sg28129
I4247
sg28131
I-200143
sg28133
I-200194
sg28135
I6133
sg28137
I10185
sg28139
I-200094
sg28141
I4960
sg28143
I-200979
sg28145
I-200721
sg28147
I-200270
sg28149
I-200042
sg28151
I10109
sg28153
I-200051
sg28155
I8732
sg28157
I4676
sg28159
I-200616
sg28161
I8730
sg28163
I6204
sg28165
I-200722
sg28167
I6108
sg28169
I-200745
sg28171
I-200882
sg28173
I-200191
sg28175
I-200824
sg28177
I10205
sg28179
I-200507
sg28181
I-200669
sg28183
I-50408
sg28185
I-89135
sg28187
I-200837
sg28189
I-200915
sg28191
I-200201
sg28193
I-50400
sg28195
I-200163
sg28197
I-201053
sg28199
I-50006
sg28201
I209801
sg28203
I-200405
sg28205
I-200653
sg28207
I-200466
sg28209
I-200412
sg28211
I-200680
sg28213
I-200217
sg28215
I8726
sg28217
I-200564
sg28219
I8868
sg28221
I-200971
sg28223
I4472
sg28225
I-200005
sg28227
I6373
sg28229
I8943
sg28231
I50152
sg28233
I10279
sg28235
I-200961
sg28237
I-200686
sg28239
I-200312
sg28241
I-200485
sg28243
I-54011
sg28245
I8883
sg28247
I-200581
sg28249
I6372
sg28251
I6345
sg28253
I6347
sg28255
I6346
sg28257
I8577
sg28259
I-200131
sg28261
I8897
sg28263
I10270
sg28265
I-200528
sg28267
I6226
sg28269
I-200237
sg28271
I-200881
sg28273
I50004
sg28275
I-200277
sg28277
I-200834
sg28279
I10352
sg28281
I-200936
sg28283
I10183
sg28285
I50200
sg28287
I8722
sg28289
I50100
sg28291
I-200342
sg28293
I-50152
sg28295
I-200431
sg28297
I50000
sg28299
I-200034
sg28301
I10359
sg28303
I-200245
sg28305
I12550
sg28307
I-201029
sg28309
S'2576/2-Wire 64x1 Mux'
p32736
sg28311
I-200415
sg28313
I6369
sg28315
I8807
sg28317
I8682
sg28319
I-200283
sg28321
I-200863
sg28323
I-201059
sg28325
I-200214
sg28327
I6277
sg28329
I2389
sg28331
I-200630
sg28333
I10364
sg28335
I-201018
sg28337
I8916
sg28339
I8906
sg28341
I8892
sg28343
I8759
sg28345
I4981
sg28347
S'2585/1-Wire 10x1 Mux'
p32737
sg28349
I-200432
sg28351
I200022
sg28353
I-200406
sg28355
I-50260
sg28357
I-200649
sg28359
Nsg28361
I-200903
sg28363
I-50258
sg28365
I8891
sg28367
I10070
sg28369
I10361
sg28371
I-200382
sg28373
I8754
sg28375
I-200369
sg28377
S'1166/32-SPDT'
p32738
sg28379
I-50403
sg28381
I6300
sg28383
I-200543
sg28385
I-200424
sg28387
I8886
sg28389
I-50300
sg28391
I-200792
sg28393
I-200019
sg28395
I-200142
sg28397
I-50407
sg28399
I6338
sg28401
I10448
sg28403
S'2593/Dual 8x1 Mux'
p32739
sg28405
I8605
sg28407
L1L
sg28409
I-200464
sg28411
I-201079
sg28413
I-200224
sg28415
I6106
sg28417
I-200132
sg28419
I10132
sg28421
I-200525
sg28423
I10131
sg28425
S'2532/1-Wire Dual 4x64 Matrix'
p32740
sg28427
I4470
sg28429
I-50600
sg28431
I-201031
sg28433
I-200295
sg28435
I10273
sg28437
I-200390
sg28439
I50407
sg28441
I8750
sg28443
I-200826
sg28445
S'2584/1-Wire 15x1 Mux'
p32741
sg28447
I-200916
sg28449
I-200433
sg28451
I4864
sg28453
I-200367
sg28455
I6343
sg28457
I-201041
sg28459
I-200711
sg28461
I-200717
sg28463
I-200225
sg28465
I-200738
sg28467
I8866
sg28469
I8820
sg28471
S'2595/4x1 Mux'
p32742
sg28473
S'1193/32x1 Mux'
p32743
sg28475
I-200640
sg28477
I-200048
sg28479
I6310
sg28481
I-88716
sg28483
I10264
sg28485
I-200348
sg28487
I1939
sg28489
I-200159
sg28491
I6251
sg28493
I6441
sg28495
Nsg28497
I-200991
sg28499
I50404
sg28501
S'2576/2-Wire Octal 8x1 Mux'
p32744
sg28503
I6325
sg28505
I8705
sg28507
I-200749
sg28509
I-200024
sg28511
I-200808
sg28513
I-50301
sg28515
I-200571
sg28517
I-200222
sg28519
I-201033
sg28521
I-200446
sg28523
I-200311
sg28525
I8698
sg28527
I-89121
sg28529
I200025
sg28531
I-200003
sg28533
I-201016
sg28535
I10265
sg28537
I8706
sg28539
I8803
sg28541
I4629
sg28543
I-200811
sg28545
I-200692
sg28547
I-200308
sg28549
I-200998
sg28551
I-200461
sg28553
I8569
sg28555
I12531
sg28557
I-200589
sg28559
I-50206
sg28561
I10042
sg28563
I4726
sg28565
I8747
sg28567
I-200829
sg28569
I6445
sg28571
I8893
sg28573
I-200636
sg28575
I-50105
sg28577
I-50020
sg28579
I-89127
sg28581
I8749
sg28583
I-200862
sg28585
I-200244
sg28587
I6374
sg28589
I-200321
sg28591
I-50603
sg28593
I-200253
sg28595
I50103
sg28597
I-201083
sg28599
I8724
sg28601
I4656
sg28603
I-200273
sg28605
I-200472
sg28607
I-200469
sg28609
I50106
sg28611
L0L
sg28613
I-200145
sg28615
I-201086
sg28617
I-200948
sg28619
I5269
sg28621
I12538
sg28623
I10071
sg28625
I-201069
sg28627
I257
sg28629
I-200242
sg28631
I-200069
sg28633
I-201078
sg28635
I4625
sg28637
I-200740
sg28639
I-200551
sg28641
I6389
sg28643
S'2532/2-Wire 16x16 Matrix'
p32745
sg28645
I-200314
sg28647
I-200959
sg28649
I12491
sg28651
I4979
sg28653
I10085
sg28655
I-200505
sg28657
I-200271
sg28659
I-200933
sg28661
I-200276
sg28663
I-200119
sg28665
I10082
sg28667
I8564
sg28669
I-200035
sg28671
I-200568
sg28673
I-200622
sg28675
I-200007
sg28677
Nsg28679
I4657
sg28681
I-200483
sg28683
I-50011
sg28685
I8685
sg28687
S'1127/Independent'
p32746
sg28689
I-200387
sg28691
I-201084
sg28693
I8917
sg28695
I-200188
sg28697
I10430
sg28699
F-1.0
sg28701
I-200542
sg28703
I-201077
sg28705
I-200606
sg28707
I10095
sg28709
I-200654
sg28711
I6349
sg28713
I-200509
sg28715
I-200391
sg28717
I4992
sg28719
I8704
sg28721
I12484
sg28723
I8565
sg28725
I-200569
sg28727
I-89120
sg28729
I8766
sg28731
I-200643
sg28733
I-200153
sg28735
I8964
sg28737
I-200678
sg28739
I4647
sg28741
I10252
sg28743
I-200338
sg28745
I-200373
sg28747
I-200036
sg28749
I-200549
sg28751
I200003
sg28753
I-200363
sg28755
I-200015
sg28757
I12525
sg28759
I-200320
sg28761
Nsg28762
S'2530/1-Wire Quad 32x1 Mux'
p32747
sg28764
I-200666
sg28766
I-200839
sg28768
I-200374
sg28770
I-200523
sg28772
I-200286
sg28774
I-201055
sg28776
I10436
sg28778
I0
sg28780
I-200181
sg28782
I-200490
sg28784
S'2530/1-Wire 128x1 Mux'
p32748
sg28786
I10384
sg28788
I-200642
sg28790
I-200645
sg28792
S'1128/Independent'
p32749
sg28794
I-200210
sg28796
I-200459
sg28798
I-200532
sg28800
I-201095
sg28802
I200028
sg28804
I10269
sg28806
I1585
sg28808
I-200755
sg28810
I8737
sg28812
I-200771
sg28814
I12537
sg28816
I6177
sg28818
I50409
sg28820
I8574
sg28822
I10050
sg28824
I10151
sg28826
I12516
sg28828
I2069
sg28830
I8600
sg28832
I10153
sg28834
I-200331
sg28836
I-200330
sg28838
I-201062
sg28840
I8678
sg28842
I-200453
sg28844
I-200788
sg28846
I-200049
sg28848
I-200783
sg28850
I-54022
sg28852
S'2564/16-SPST'
p32750
sg28854
I8986
sg28856
I-50409
sg28858
I200042
sg28860
I-200457
sg28862
I200041
sg28864
I-200355
sg28866
I5989
sg28868
I-201080
sg28870
I-200050
sg28872
I1
sg28874
I-200629
sg28876
I6305
sg28878
I-200207
sg28880
I-200100
sg28882
I50008
sg28884
I-200823
sg28886
I-50604
sg28888
I4146
sg28890
I-200634
sg28892
I10353
sg28894
I8599
sg28896
I10103
sg28898
I10253
sg28900
I-200969
sg28902
I12522
sg28904
I-200176
sg28906
I12493
sg28908
I-200577
sg28910
I-201087
sg28912
I5137
sg28914
I-89123
sg28916
I200027
sg28918
I4484
sg28920
S'2530/4-Wire 32x1 Mux'
p32751
sg28922
I-200429
sg28924
I-200607
sg28926
I4872
sg28928
S'2527/4-Wire 16x1 Mux'
p32752
sg28930
I-200151
sg28932
I4865
sg28934
I-200700
sg28936
I200024
sg28938
I-200861
sg28940
I-200719
sg28942
I8668
sg28944
S'1130/2-Wire 128x1 Mux'
p32753
sg28946
I8970
sg28948
I10167
sg28950
I2130
sg28952
I-89138
sg28954
I-200099
sg28956
I-200790
sg28958
S'2576/2-Wire Dual 32x1 Mux'
p32754
sg28960
I-200760
sg28962
I-200797
sg28964
I-201014
sg28966
I-200874
sg28968
I8754
sg28970
I4710
sg28972
I-50404
sg28974
I4977
sg28976
I12548
sg28978
Nsg28979
I8700
sg28981
I-200632
sg28983
I-89130
sg28985
I8571
sg28987
S'1192/8-SPDT'
p32755
sg28989
I10292
sg28991
I8742
sg28993
I-201068
sg28995
I-200685
sg28997
I-200828
sg28999
I-200984
sg29001
I10447
sg29003
I6307
sg29005
I-50261
sg29007
I8997
sg29009
I6147
sg29011
I10425
sg29013
I6308
sg29015
I6449
sg29017
I-201049
sg29019
I-89145
sg29021
I8716
sg29023
S'2530/2-Wire Quad 16x1 Mux'
p32756
sg29025
S'1128/1-Wire 64x1 Mux'
p32757
sg29027
I-200695
sg29029
I-200761
sg29031
I1603
sg29033
I-89122
sg29035
I-201009
sg29037
I6166
sg29039
S'1129/2-Wire 16x16 Matrix'
p32758
sg29041
I328
sg29043
I10228
sg29045
I8721
sg29047
I1
sg29049
I12590
sg29051
I5015
sg29053
I-200964
sg29055
S'1193/Quad 4x1 Terminated Mux'
p32759
sg29057
I-200158
sg29059
I5911
sg29061
I8764
sg29063
I-200605
sg29065
I6134
sg29067
I12586
sg29069
I5172
sg29071
I-200973
sg29073
I-200522
sg29075
I-201061
sg29077
I-200047
sg29079
I-50410
sg29081
I4486
sg29083
I8744
sg29085
I-200157
sg29087
I-200219
sg29089
I-200857
sg29091
I-200258
sg29093
I-200618
sg29095
S'2501/2-Wire 4x6 Matrix'
p32760
sg29097
I10280
sg29099
I-50259
sg29101
I-200646
sg29103
I4403
sg29105
I-200752
sg29107
I-200498
sg29109
I200037
sg29111
I-200182
sg29113
I-200152
sg29115
S'1191/Quad 4x1 Mux'
p32761
sg29117
I9002
sg29119
I8788
sg29121
I10301
sg29123
I4980
sg29125
I-200578
sg29127
I4921
sg29129
I-201008
sg29131
I4193
sg29133
I10096
sg29135
I4880
sg29137
I6
sg29139
I1685
sg29141
I-200379
sg29143
I-200148
sg29145
I-200656
sg29147
S'1130/4-Wire 64x1 Mux'
p32762
sg29149
I-200560
sg29151
I-200756
sg29153
S'2599/2-SPDT'
p32763
sg29155
I8941
sg29157
I8920
sg29159
I5416
sg29161
Nsg29162
I200004
sg29164
I10143
sg29166
I-200626
sg29168
I10144
sg29170
I-200332
sg29172
I10145
sg29174
I10200
sg29176
I6316
sg29178
I4679
sg29180
I-200769
sg29182
I-50412
sg29184
I-200449
sg29186
I-200307
sg29188
I5216
sg29190
I1606
sg29192
I10300
sg29194
I-200160
sg29196
I10055
sg29198
S'2530/1-Wire 4x32 Matrix'
p32764
sg29200
I10086
sg29202
I98
sg29204
I6375
sg29206
I10428
sg29208
I-200173
sg29210
I-200305
sg29212
I-200062
sg29214
I4643
sg29216
I-200520
sg29218
I-200420
sg29220
S'2566/16-SPDT'
p32765
sg29222
I-201051
sg29224
S'1130/4-Wire Quad 16x1 Mux'
p32766
sg29226
I8597
sg29228
I1586
sg29230
I5013
sg29232
I10040
sg29234
I-200919
sg29236
I-200349
sg29238
I-50010
sg29240
I-200612
sg29242
I-200768
sg29244
I258
sg29246
I-200611
sg29248
I-200486
sg29250
I-200057
sg29252
I12574
sg29254
I-200541
sg29256
Nsg29258
S'2530/2-Wire Dual 32x1 Mux'
p32767
sg29260
I8681
sg29262
I-200762
sg29264
I-54021
sg29266
I-200734
sg29268
I50402
sg29270
I-200690
sg29272
I-200310
sg29274
I-200095
sg29276
I4985
sg29278
I3
sg29280
I5016
sg29282
I-200702
sg29284
I-200470
sg29286
I6165
sg29288
I-50550
sg29290
I-200574
sg29292
I8991
sg29294
I-200060
sg29296
I54022
sg29298
S'2575/2-Wire 98x1 Mux'
p32768
sg29300
I1945
sg29302
I-201022
sg29304
I-50352
sg29306
I-200586
sg29308
I-200538
sg29310
I-200031
sg29312
I10230
sg29314
I-200987
sg29316
I50012
sg29318
I-200844
sg29320
I-200121
sg29322
I-200753
sg29324
I50202
sg29326
I12490
sg29328
I5203
sg29330
S'2527/2-Wire 32x1 Mux'
p32769
sg29332
I-200300
sg29334
I-200026
sg29336
I-200958
sg29338
I307
sg29340
I6461
sg29342
I-89143
sg29344
I2433
sg29346
I-201070
sg29348
I-201050
sg29350
I4660
sg29352
I-200751
sg29354
I-200872
sg29356
I1601
sg29358
I-200345
sg29360
I-50106
sg29362
I8613
sg29364
I5123
sg29366
I10214
sg29368
I-200600
sg29370
I10424
sg29372
I-200303
sg29374
I-200120
sg29376
I5168
sg29378
I8890
sg29380
I6182
sg29382
I6247
sg29384
I-50150
sg29386
I-54012
sg29388
I1
sg29389
I12552
sg29391
I-200274
sg29393
I6319
sg29395
I-201026
sg29397
I6410
sg29399
I-200968
sg29401
I-200294
sg29403
I-200078
sg29405
I8753
sg29407
I200015
sg29409
I6125
sg29411
I8715
sg29413
I-200895
sg29415
S'2569/100-SPST'
p32770
sg29417
I2167
sg29419
I10134
sg29421
I-200357
sg29423
I10077
sg29425
I-200853
sg29427
I-200731
sg29429
I4932
sg29431
I5
sg29433
I-200912
sg29435
I-200275
sg29437
I-200419
sg29439
I-200530
sg29441
I-200741
sg29443
I-200234
sg29445
I-200993
sg29447
I8710
sg29449
I-200931
sg29451
I-200843
sg29453
I-200682
sg29455
I8701
sg29457
I-200178
sg29459
I10244
sg29461
I-200888
sg29463
I5159
sg29465
I-200479
sg29467
I-200592
sg29469
I-200481
sg29471
I12577
sg29473
I-200322
sg29475
I4150
sg29477
I-200491
sg29479
I12494
sg29481
I4646
sg29483
S'1190/Quad 4x1 Mux'
p32771
sg29485
I-200223
sg29487
I8702
sg29489
I4917
sg29491
I-201019
sg29493
I-200169
sg29495
I-200827
sg29497
S'1193/Quad 8x1 Mux'
p32772
sg29499
I-200864
sg29501
I-200423
sg29503
I-200906
sg29505
I4148
sg29507
I-200340
sg29509
I8694
sg29511
S'2503/1-Wire 48x1 Mux'
p32773
sg29513
I-200101
sg29515
I50019
sg29517
I5208
sg29519
I-200705
sg29521
I8712
sg29523
I10280
sg29525
I2
sg29527
I-200770
sg29529
I-50012
sg29531
I-200266
sg29533
I2
sg29534
I-200803
sg29536
S'2598/Dual Transfer'
p32774
sg29538
I2083
sg29540
I-50209
sg29542
S'1169/100-SPST'
p32775
sg29544
I-200455
sg29546
I8789
sg29548
S'2532/2-Wire 4x64 Matrix'
p32776
sg29550
I10092
sg29552
I10090
sg29554
I10091
sg29556
I4886
sg29558
I-209803
sg29560
I-50264
sg29562
I-200806
sg29564
I200043
sg29566
I-200725
sg29568
I10268
sg29570
I-200467
sg29572
I-200661
sg29574
I-200920
sg29576
Nsg29577
I-200010
sg29579
I2325
sg29581
I-201024
sg29583
I-200279
sg29585
I10072
sg29587
S'1160/16-SPDT'
p32777
sg29589
I8691
sg29591
I-201035
sg29593
I-200934
sg29595
I200018
sg29597
I5430
sg29599
I-200746
sg29601
I2100
sg29603
I10303
sg29605
I10323
sg29607
I-200439
sg29609
S'1129/2-Wire Quad 4x16 Matrix'
p32778
sg29611
I-200960
sg29613
I-200978
sg29615
I-200044
sg29617
I-200793
sg29619
I8860
sg29621
I-201003
sg29623
I8823
sg29625
I6380
sg29627
I-200558
sg29629
I-200397
sg29631
I-200514
sg29633
I-200501
sg29635
S'2527/Independent'
p32779
sg29637
I-200315
sg29639
I-200994
sg29641
I10307
sg29643
I-200704
sg29645
I104
sg29647
I50014
sg29649
I5122
sg29651
I-50000
sg29653
I-200202
sg29655
I8598
sg29657
I-200869
sg29659
I4662
sg29661
I-200633
sg29663
I-50800
sg29665
I327
sg29667
I-200297
sg29669
I-200590
sg29671
I6273
sg29673
I8763
sg29675
I-200712
sg29677
I10322
sg29679
I1424
sg29681
I-50008
sg29683
S'2503/2-Wire Dual 12x1 Mux'
p32780
sg29685
I10450
sg29687
I-200703
sg29689
I-200227
sg29691
I5154
sg29693
I-200445
sg29695
I13612
sg29697
I-200260
sg29699
I12481
sg29701
I-200660
sg29703
I6382
sg29705
I-200789
sg29707
I-200613
sg29709
I10437
sg29711
I8740
sg29713
I4723
sg29715
I-200928
sg29717
I10069
sg29719
I6393
sg29721
I-200077
sg29723
I12482
sg29725
I-200918
sg29727
I-89133
sg29729
I-200167
sg29731
I-201065
sg29733
I6448
sg29735
I12555
sg29737
I6139
sg29739
I-200773
sg29741
I200038
sg29743
S'1193/Independent'
p32781
sg29745
I5378
sg29747
I4935
sg29749
I50500
sg29751
I5701
sg29753
I50005
sg29755
I-50016
sg29757
I-201057
sg29759
I-200375
sg29761
I-200802
sg29763
I-200221
sg29765
I-200341
sg29767
S'1167/Independent'
p32782
sg29769
I-200593
sg29771
I-200140
sg29773
I-200820
sg29775
I-200052
sg29777
I-50108
sg29779
I8606
sg29781
I4968
sg29783
I-200801
sg29785
I4147
sg29787
I-200976
sg29789
I-200356
sg29791
I-89140
sg29793
I8671
sg29795
I8852
sg29797
I-50351
sg29799
I-200452
sg29801
I-200427
sg29803
I-200068
sg29805
I200012
sg29807
I-200865
sg29809
I10128
sg29811
I-50107
sg29813
I-200102
sg29815
I-200385
sg29817
I-200638
sg29819
I12539
sg29821
I8703
sg29823
I-200504
sg29825
S'1193/Dual 16x1 Mux'
p32783
sg29827
I8899
sg29829
I8693
sg29831
I1616
sg29833
I-200414
sg29835
I4867
sg29837
I-200527
sg29839
I10235
sg29841
I8974
sg29843
I-200556
sg29845
I-200921
sg29847
I-200017
sg29849
I-200728
sg29851
I8817
sg29853
I-200585
sg29855
I-200890
sg29857
I1607
sg29859
I-200189
sg29861
I8720
sg29863
I-200104
sg29865
I-200011
sg29867
I-200235
sg29869
I12528
sg29871
I6442
sg29873
I8735
sg29875
I9000
sg29877
I8992
sg29879
I50107
sg29881
I-50503
sg29883
I-200396
sg29885
I1617
sg29887
I50009
sg29889
I-50103
sg29891
I-201089
sg29893
I8855
sg29895
I-200907
sg29897
I2
sg29898
I6357
sg29900
I-200041
sg29902
I1
sg29903
I0
sg29904
I-200962
sg29906
I-201027
sg29908
I-200524
sg29910
I-200323
sg29912
I-200263
sg29914
I8672
sg29916
I-200074
sg29918
I6358
sg29920
S'1175/2-Wire 98x1 Mux'
p32784
sg29922
I-201052
sg29924
I-89128
sg29926
I-50302
sg29928
I10066
sg29930
I-200199
sg29932
I-200130
sg29934
I1605
sg29936
I-200620
sg29938
I-201037
sg29940
I6231
sg29942
I-200647
sg29944
I-200954
sg29946
I8762
sg29948
I-200644
sg29950
I-200086
sg29952
I-200172
sg29954
I10272
sg29956
I-200608
sg29958
I4965
sg29960
I8670
sg29962
I-200825
sg29964
I10073
sg29966
I-200766
sg29968
I1687
sg29970
I-200599
sg29972
I5703
sg29974
I-201011
sg29976
I6320
sg29978
I8921
sg29980
I-200076
sg29982
I-200344
sg29984
I10113
sg29986
I-200039
sg29988
I-200778
sg29990
I-200846
sg29992
I6313
sg29994
S'1130/2-Wire Octal 16x1 Mux'
p32785
sg29996
I8895
sg29998
I8696
sg30000
I-200125
sg30002
I12530
sg30004
I-200380
sg30006
I50001
sg30008
I-200850
sg30010
I8761
sg30012
I-200325
sg30014
I10239
sg30016
I-200997
sg30018
I-200856
sg30020
I6278
sg30022
I8669
sg30024
I4648
sg30026
I-200252
sg30028
I-89144
sg30030
I-200598
sg30032
I12483
sg30034
I10432
sg30036
I-200924
sg30038
I10053
sg30040
I10449
sg30042
I10451
sg30044
I-200246
sg30046
I-200990
sg30048
I-200657
sg30050
I-200723
sg30052
I8745
sg30054
I-200336
sg30056
I-200282
sg30058
S'2501/4-Wire 12x1 Mux'
p32786
sg30060
I-200932
sg30062
I8813
sg30064
I-200970
sg30066
I-200154
sg30068
I2320
sg30070
I-200122
sg30072
I10054
sg30074
I5176
sg30076
I-200941
sg30078
I-200256
sg30080
I10356
sg30082
I6446
sg30084
I-200393
sg30086
I8806
sg30088
I-50252
sg30090
I8882
sg30092
I-200999
sg30094
I-89149
sg30096
I-200482
sg30098
S'2501/1-Wire 48x1 Mux'
p32787
sg30100
I10160
sg30102
I-200579
sg30104
I-50175
sg30106
I5127
sg30108
I323
sg30110
I-201017
sg30112
I-200757
sg30114
I8804
sg30116
I-200897
sg30118
I-200758
sg30120
I8847
sg30122
I-200318
sg30124
I-200804
sg30126
I-89147
sg30128
I-200639
sg30130
I-200559
sg30132
I10373
sg30134
I-200177
sg30136
I-200343
sg30138
I-200995
sg30140
I-54023
sg30142
I-201005
sg30144
I50101
sg30146
I-200492
sg30148
I12583
sg30150
I-200046
sg30152
I-200149
sg30154
I8826
sg30156
I10354
sg30158
I-200940
sg30160
I1688
sg30162
I-200767
sg30164
I-50018
sg30166
I-200736
sg30168
I-200213
sg30170
I10254
sg30172
S'2532/1-Wire Dual 8x32 Matrix'
p32788
sg30174
I-88705
sg30176
I-200575
sg30178
I-200877
sg30180
I-200335
sg30182
I8661
sg30184
I10441
sg30186
I5984
sg30188
I-200929
sg30190
I6189
sg30192
I-200597
sg30194
I-200641
sg30196
I4976
sg30198
I-200904
sg30200
I-50406
sg30202
I4722
sg30204
I-200674
sg30206
I-200873
sg30208
I6322
sg30210
I5716
sg30212
I-201012
sg30214
I50007
sg30216
I-200885
sg30218
I10282
sg30220
I-200134
sg30222
I-200570
sg30224
I8663
sg30226
I8572
sg30228
I664
sg30230
I-200180
sg30232
I-200138
sg30234
I-200859
sg30236
I-200799
sg30238
I-50502
sg30240
I-200913
sg30242
I-200910
sg30244
I-50401
sg30246
I8864
sg30248
I-200506
sg30250
I512
sg30252
I-200784
sg30254
I-200518
sg30256
I4176
sg30258
I4711
sg30260
I-201054
sg30262
I-200008
sg30264
I50151
sg30266
I6131
sg30268
I12549
sg30270
I-200774
sg30272
S'2532/1-Wire 16x32 Matrix'
p32789
sg30274
I-201034
sg30276
I-200521
sg30278
I8596
sg30280
S'2527/1-Wire 64x1 Mux'
p32790
sg30282
I-88717
sg30284
I-200943
sg30286
I8723
sg30288
I-200545
sg30290
I6428
sg30292
I-201094
sg30294
S'1127/4-Wire 16x1 Mux'
p32791
sg30296
I-200554
sg30298
I-200014
sg30300
I2192
sg30302
I8972
sg30304
I-200477
sg30306
I200007
sg30308
I-200965
sg30310
I6253
sg30312
I-200889
sg30314
I12505
sg30316
I8863
sg30318
I-200289
sg30320
I-200809
sg30322
S'1194/Quad 4x1 Mux'
p32792
sg30324
I-200688
sg30326
I200039
sg30328
I-200037
sg30330
I825
sg30332
I-200659
sg30334
I-200510
sg30336
I-200526
sg30338
I-50205
sg30340
I-200791
sg30342
I8673
sg30344
I8746
sg30346
I322
sg30348
I200040
sg30350
I-200502
sg30352
S'2501/2-Wire 24x1 Mux'
p32793
sg30354
I659
sg30356
I8805
sg30358
S'2503/4-Wire 12x1 Mux'
p32794
sg30360
I-200795
sg30362
I-200733
sg30364
I50102
sg30366
I8909
sg30368
I-50013
sg30370
I-200187
sg30372
I-200027
sg30374
I6387
sg30376
I4
sg30378
I-200292
sg30380
I6330
sg30382
S'2567/Independent'
p32795
sg30384
I1604
sg30386
I-200442
sg30388
I6244
sg30390
I4931
sg30392
I8618
sg30394
I12584
sg30396
I-200777
sg30398
I6271
sg30400
I-200409
sg30402
I8821
sg30404
I200021
sg30406
I-200548
sg30408
I5124
sg30410
I-200029
sg30412
I-50353
sg30414
I-200868
sg30416
I8887
sg30418
I-201020
sg30420
I2307
sg30422
I-50602
sg30424
I308
sg30426
I200011
sg30428
I-200499
sg30430
I4407
sg30432
I-200411
sg30434
I-89150
sg30436
I-50350
sg30438
I-200072
sg30440
I-200922
sg30442
I4149
sg30444
I5988
sg30446
I-200259
sg30448
I-200708
sg30450
I12526
sg30452
I-200075
sg30454
I-200402
sg30456
Nsg30457
I50255
sg30459
I5161
sg30461
I-200517
sg30463
I-200354
sg30465
I4242
sg30467
I10210
sg30469
I-200063
sg30471
I-200813
sg30473
I5732
sg30475
I6284
sg30477
I10093
sg30479
I-200822
sg30481
I10242
sg30483
I-200699
sg30485
I-200110
sg30487
I-200291
sg30489
I-200547
sg30491
I2434
sg30493
I5912
sg30495
I-88708
sg30497
I10186
sg30499
I10125
sg30501
I8708
sg30503
S'1161/8-SPDT'
p32796
sg30505
I-200200
sg30507
I-50500
sg30509
I2177
sg30511
I-200566
sg30513
S'1163R/Octal 4x1 Mux'
p32797
sg30515
I8699
sg30517
I-200576
sg30519
I-88900
sg30521
I-50005
sg30523
I5156
sg30525
I200019
sg30527
I-200020
sg30529
I8602
sg30531
I10313
sg30533
I-200500
sg30535
I-50014
sg30537
I-200111
sg30539
I-200536
sg30541
I10181
sg30543
I-200886
sg30545
I-200603
sg30547
I10199
sg30549
I-200018
sg30551
I-200730
sg30553
S'1127/2-Wire 4x8 Matrix'
p32798
sg30555
I10208
sg30557
I-201028
sg30559
I10209
sg30561
I10099
sg30563
I-200108
sg30565
S'1129/2-Wire 4x64 Matrix'
p32799
sg30567
I4868
sg30569
I-50254
sg30571
S'2501/1-Wire 48x1 Amplified Mux'
p32800
sg30573
I-200677
sg30575
I1651
sg30577
I-50354
sg30579
I-200055
sg30581
I-200847
sg30583
I0
sg30584
I-200529
sg30586
I-200942
sg30588
I8885
sg30590
I-200974
sg30592
I1
sg30593
I-200539
sg30595
I-200268
sg30597
I12492
sg30599
I-200023
sg30601
I12536
sg30603
I-50501
sg30605
I-200914
sg30607
I-200249
sg30609
I-200193
sg30611
I50104
sg30613
I-200624
sg30615
I-200454
sg30617
I-200329
sg30619
S'2576/Independent'
p32801
sg30621
I280
sg30623
I-200902
sg30625
I-200992
sg30627
I-200930
sg30629
S'1130/1-Wire 8x32 Matrix'
p32802
sg30631
I-200488
sg30633
I12487
sg30635
I-200025
sg30637
I10256
sg30639
I-200226
sg30641
I1682
sg30643
I-200156
sg30645
I-200841
sg30647
I-200754
sg30649
I-200625
sg30651
I-201043
sg30653
I-201073
sg30655
I-200617
sg30657
S'2593/Independent'
p32803
sg30659
I-200996
sg30661
I-200377
sg30663
I-200619
sg30665
I4649
sg30667
I-200602
sg30669
S'1130/1-Wire 4x64 Matrix'
p32804
sg30671
I4966
sg30673
I4675
sg30675
I4982
sg30677
I10178
sg30679
I-201036
sg30681
I-50265
sg30683
I8767
sg30685
I4887
sg30687
I-200407
sg30689
I12556
sg30691
I-200718
sg30693
I2165
sg30695
I-200938
sg30697
I-54010
sg30699
I-200937
sg30701
S'1130/2-Wire Quad 32x1 Mux'
p32805
sg30703
I6248
sg30705
I10106
sg30707
I5140
sg30709
I10101
sg30711
I10390
sg30713
I6170
sg30715
I8912
sg30717
I-200604
sg30719
I200035
sg30721
I1412
sg30723
I-200440
sg30725
I-200562
sg30727
I-200475
sg30729
I-200925
sg30731
I-200171
sg30733
S'1195/Quad 4x1 Mux'
p32806
sg30735
I-200627
sg30737
I8768
sg30739
I10348
sg30741
I8999
sg30743
I-200977
sg30745
I8611
sg30747
I-200701
sg30749
I-201066
sg30751
I-50009
sg30753
I-200326
sg30755
I-200750
sg30757
I-200546
sg30759
I-200899
sg30761
I4658
sg30763
I-200852
sg30765
S'1128/2-Wire 32x1 Mux'
p32807
sg30767
I5
sg30768
S'1128/4-Wire 16x1 Mux'
p32808
sg30770
I4144
sg30772
S'1130/1-Wire Quad 64x1 Mux'
p32809
sg30774
I-50651
sg30776
I-50413
sg30778
I12515
sg30780
I-200496
sg30782
I-200028
sg30784
I6194
sg30786
I-200689
sg30788
I4243
sg30790
I-200371
sg30792
I8824
sg30794
I8616
sg30796
I-200981
sg30798
I10124
sg30800
I10171
sg30802
I-200926
sg30804
I-200428
sg30806
I8898
sg30808
I-200665
sg30810
I8913
sg30812
S'2532/1-Wire 8x64 Matrix'
p32810
sg30814
I-200155
sg30816
I4
sg30818
I8739
sg30820
I-50411
sg30822
I4465
sg30824
I5145
sg30826
I5264
sg30828
I2321
sg30830
S'2565/16-SPST'
p32811
sg30832
I8825
sg30834
I-200065
sg30836
I-200743
sg30838
I-200204
sg30840
I12551
sg30842
I8914
sg30844
I-200022
sg30846
I10284
sg30848
I6230
sg30850
I6188
sg30852
I10342
sg30854
I12540
sg30856
I-200693
sg30858
I-200637
sg30860
I12514
sg30862
I12513
sg30864
I6463
sg30866
S'2529/2-Wire 8x16 Matrix'
p32812
sg30868
I-200720
sg30870
I10192
sg30872
I-200876
sg30874
I-201021
sg30876
I8576
sg30878
I-200858
sg30880
I10186
sg30882
I200030
sg30884
I-201091
sg30886
I-200949
sg30888
I8758
sg30890
S'2532/1-Wire 4x128 Matrix'
p32813
sg30892
I-200553
sg30894
I-200410
sg30896
I8889
sg30898
I8867
sg30900
I-200447
sg30902
I1
sg30903
I10398
sg30905
I-200764
sg30907
I-200359
sg30909
I-200136
sg30911
I-200231
sg30913
I8734
sg30915
I-200030
sg30917
I10110
sg30919
I8751
sg30921
I10078
sg30923
I-200404
sg30925
I10311
sg30927
I10389
sg30929
S'2529/2-Wire Dual 4x16 Matrix'
p32814
sg30931
I8568
sg30933
I-200184
sg30935
I-200388
sg30937
I-200334
sg30939
I-200901
sg30941
I-200422
sg30943
I8819
sg30945
I8666
sg30947
I6252
sg30949
I10123
sg30951
I10041
sg30953
I6306
sg30955
I8729
sg30957
I8994
sg30959
I-200168
sg30961
I-200416
sg30963
I-200840
sg30965
S'2591/4x1 Mux'
p32815
sg30967
I10182
sg30969
I-200097
sg30971
I-50405
sg30973
I-200183
sg30975
I-200552
sg30977
I-200056
sg30979
I6332
sg30981
S'2593/16x1 Mux'
p32816
sg30983
I-201088
sg30985
S'2570/40-SPDT'
p32817
sg30987
I-200796
sg30989
I2361
sg30991
I-200535
sg30993
I50016
sg30995
I5136
sg30997
I-50257
sg30999
I-200071
sg31001
I2085
sg31003
I-201007
sg31005
I-200272
sg31007
I12547
sg31009
I-200697
sg31011
I8998
sg31013
I-200421
sg31015
Nsg31016
I-200212
sg31018
I-201002
sg31020
I10379
sg31022
I0
sg31024
I-200040
sg31026
I5719
sg31028
I10362
sg31030
I6392
sg31032
I8862
sg31034
I-200290
sg31036
I-200832
sg31038
I-200683
sg31040
I-200304
sg31042
I-201048
sg31044
I10107
sg31046
I8757
sg31048
I-200737
sg31050
I5153
sg31052
I-200952
sg31054
I-200032
sg31056
I200016
sg31058
I-200817
sg31060
I-200879
sg31062
I10171
sg31064
I-200512
sg31066
I-89126
sg31068
I-201044
sg31070
I0
sg31071
I-200798
sg31073
S'1130/1-Wire Octal 32x1 Mux'
p32818
sg31075
I6288
sg31077
I-50203
sg31079
I-200443
sg31081
I-201072
sg31083
I6187
sg31085
I-200462
sg31087
I-201058
sg31089
S'2594/4x1 Mux'
p32819
sg31091
I-200775
sg31093
I-200567
sg31095
I-200091
sg31097
I-50204
sg31099
I-200986
sg31101
I50258
sg31103
I-200655
sg31105
I0
sg31106
I-200426
sg31108
I-89137
sg31110
I-200724
sg31112
I10081
sg31114
I-200946
sg31116
I-200264
sg31118
I-200893
sg31120
I200017
sg31122
I8687
sg31124
I-200787
sg31126
I-200716
sg31128
I8942
sg31130
I10083
sg31132
I10433
sg31134
I50256
sg31136
I-200729
sg31138
I8989
sg31140
I-200092
sg31142
I-200262
sg31144
I-50017
sg31146
I5767
sg31148
I12585
sg31150
I-200448
sg31152
I-200360
sg31154
S'1130/Independent'
p32820
sg31156
I10043
sg31158
Nsg31160
I-201015
sg31162
I-200073
sg31164
S'2530/2-Wire 4x16 Matrix'
p32821
sg31166
I329
sg31168
I-200043
sg31170
I12511
sg31172
I-200785
sg31174
I4361
sg31176
I50551
sg31178
I6110
sg31180
I-201081
sg31182
I-200713
sg31184
I-200161
sg31186
I12507
sg31188
I8856
sg31190
I6179
sg31192
I2452
sg31194
I4641
sg31196
I8692
sg31198
I8752
sg31200
I-89129
sg31202
I-200588
sg31204
I-200650
sg31206
I6317
sg31208
I-200082
sg31210
I8725
sg31212
I8748
sg31214
I-200198
sg31216
I-200399
sg31218
S'2593/Dual 4x1 Terminated Mux'
p32822
sg31220
I-200392
sg31222
I5713
sg31224
I135
sg31226
I200036
sg31228
I-200098
sg31230
I-88715
sg31232
I-200066
sg31234
I5014
sg31236
I50105
sg31238
I-200851
sg31240
I-200128
sg31242
I-200565
sg31244
I6323
sg31246
I12486
sg31248
I-200216
sg31250
Nsg31251
I8786
sg31253
I3
sg31254
I12573
sg31256
I10304
sg31258
Nsg31259
I-200247
sg31261
I-200687
sg31263
I4869
sg31265
I-200137
sg31267
I-200352
sg31269
I-200489
sg31271
I-200807
sg31273
I-200601
sg31275
I50006
sg31277
I8741
sg31279
S'2503/2-Wire Quad 6x1 Mux'
p32823
sg31281
I-200836
sg31283
I6331
sg31285
I-200425
sg31287
I5189
sg31289
I-200739
sg31291
S'1193/Dual 8x1 Terminated Mux'
p32824
sg31293
I-54020
sg31295
I-200139
sg31297
I10227
sg31299
I50003
sg31301
I-200230
sg31303
I4969
sg31305
I10438
sg31307
I-200892
sg31309
I-200652
sg31311
I-209800
sg31313
S'1193/16x1 Terminated Mux'
p32825
sg31315
I6250
sg31317
I-200537
sg31319
I-200474
sg31321
I200013
sg31323
I-200494
sg31325
I-201046
sg31327
I-200175
sg31329
I-200254
sg31331
I-200239
sg31333
I-200898
sg31335
I5704
sg31337
I148
sg31339
I-200950
sg31341
I-200376
sg31343
I6415
sg31345
S'2532/1-Wire Sixteen 2x16 Matrix'
p32826
sg31347
I8617
sg31349
I-200515
sg31351
I50405
sg31353
I200034
sg31355
I-201071
sg31357
I-200141
sg31359
I-200727
sg31361
I-200848
sg31363
I5702
sg31365
I-200905
sg31367
I-200816
sg31369
I-200301
sg31371
I-200923
sg31373
I-201092
sg31375
I8714
sg31377
I2
sg31379
I12546
sg31381
I-201074
sg31383
I12506
sg31385
I-50303
sg31387
S'1130/1-Wire 256x1 Mux'
p32827
sg31389
I-89134
sg31391
I-50202
sg31393
I8690
sg31395
I-200691
sg31397
I-50200
sg31399
I5141
sg31401
I-50004
sg31403
I-200353
sg31405
I-200206
sg31407
S'2501/2-Wire Dual 12x1 Mux'
p32828
sg31409
I-200732
sg31411
I-200267
sg31413
I-200880
sg31415
I-54002
sg31417
S'2590/4x1 Mux'
p32829
sg31419
I6275
sg31421
I-200045
sg31423
I8582
sg31425
I-200631
sg31427
I-201056
sg31429
I8861
sg31431
I50403
sg31433
I-200980
sg31435
I6301
sg31437
I10065
sg31439
I-88710
sg31441
I50260
sg31443
I10237
sg31445
I8736
sg31447
I8615
sg31449
I-200615
sg31451
I10137
sg31453
S'2593/8x1 Terminated Mux'
p32830
sg31455
I-200053
sg31457
I-200248
sg31459
I-200004
sg31461
I-200381
sg31463
I10204
sg31465
I-201039
sg31467
I-200786
sg31469
I8755
sg31471
I-200519
sg31473
I-200838
sg31475
I50015
sg31477
I-200676
sg31479
I10241
sg31481
I10146
sg31483
I-50019
sg31485
I10116
sg31487
I200029
sg31489
I6241
sg31491
I-200364
sg31493
I-200673
sg31495
I5160
sg31497
I-200628
sg31499
I-200621
sg31501
I-200351
sg31503
S'2530/1-Wire Dual 64x1 Mux'
p32831
sg31505
I10172
sg31507
I-200126
sg31509
S'2597/6x1 Terminated Mux'
p32832
sg31511
I-200144
sg31513
I-200346
sg31515
I-200317
sg31517
I-200093
sg31519
I-200450
sg31521
I-200250
sg31523
I6459
sg31525
I-200190
sg31527
I200010
sg31529
I8607
sg31531
I-200672
sg31533
I6140
sg31535
I12512
sg31537
I-200800
sg31539
I6379
sg31541
I-200735
sg31543
I-200497
sg31545
S'2503/2-Wire 24x1 Mux'
p32833
sg31547
I-50250
sg31549
I-200228
sg31551
I10326
sg31553
I10267
sg31555
I-200240
sg31557
I-200465
sg31559
I10188
sg31561
I-200782
sg31563
I-200067
sg31565
I-200389
sg31567
I-200939
sg31569
S'1175/1-Wire 196x1 Mux'
p32834
sg31571
I-200944
sg31573
I-200591
sg31575
I8908
sg31577
I200032
sg31579
I833
sg31581
I12470
sg31583
I-50700
sg31585
I-50207
sg31587
S'1129/2-Wire Dual 8x16 Matrix'
p32835
sg31589
I336
sg31591
S'2586/10-SPST'
p32836
sg31593
I10310
sg31595
I12527
sg31597
I10200
sg31599
I4709
sg31601
I6276
sg31603
I-200681
sg31605
I-201000
sg31607
I-201063
sg31609
I50011
sg31611
I8683
sg31613
I-200957
sg31615
I10105
sg31617
I-200261
sg31619
I6130
sg31621
I-200478
sg31623
I-200744
sg31625
I-200109
sg31627
I10158
sg31629
I-201045
sg31631
I-201090
sg31633
I6304
sg31635
I-200269
sg31637
I-200418
sg31639
I-201042
sg31641
I4962
sg31643
I8570
sg31645
I8765
sg31647
I-200327
sg31649
I-200337
sg31651
I4244
sg31653
I-201082
sg31655
I-200118
sg31657
I-200833
sg31659
I-200236
sg31661
I8900
sg31663
I-200358
sg31665
S'1130/1-Wire Dual 128x1 Mux'
p32837
sg31667
I8667
sg31669
I-200664
sg31671
I-200135
sg31673
I200033
sg31675
I-200398
sg31677
I10164
sg31679
I324
sg31681
I-200170
sg31683
S'2527/1-Wire Dual 32x1 Mux'
p32838
sg31685
I-89139
sg31687
S'2501/2-Wire Quad 6x1 Mux'
p32839
sg31689
I-200112
sg31691
I6240
sg31693
I-89148
sg31695
I-200845
sg31697
I6105
sg31699
I-200302
sg31701
I-200883
sg31703
I4487
sg31705
I-200966
sg31707
I-201075
sg31709
S'2530/Independent'
p32840
sg31711
I4488
sg31713
I12509
sg31715
I8686
sg31717
I-200413
sg31719
I-50256
sg31721
I8910
sg31723
I-200508
sg31725
I661
sg31727
I-200557
sg31729
I8743
sg31731
I10278
sg31733
I-200333
sg31735
I6192
sg31737
I-200503
sg31739
I6318
sg31741
I-200133
sg31743
I-200835
sg31745
I-1
sg31747
I-200394
sg31749
I50013
sg31751
I-200609
sg31753
I-200365
sg31755
I-200123
sg31757
I8865
sg31759
I-200533
sg31761
I6391
sg31763
I-200368
sg31765
S'2532/2-Wire 8x32 Matrix'
p32841
sg31767
I-200763
sg31769
I10439
sg31771
I-200819
sg31773
S'1129/2-Wire 8x32 Matrix'
p32842
sg31775
I-201076
sg31777
I8612
sg31779
I8733
sg31781
I-200671
sg31783
I-200596
sg31785
I6283
sg31787
I10299
sg31789
I-200012
sg31791
S'2576/2-Wire Quad 16x1 Mux'
p32843
sg31793
I-200947
sg31795
I-200668
sg31797
I4663
sg31799
I-200257
sg31801
I-200059
sg31803
I-200309
sg31805
I-209805
sg31807
I1
sg31808
I8787
sg31810
I10157
sg31812
I5731
sg31814
S'2530/2-Wire 64x1 Mux'
p32844
sg31816
I12504
sg31818
I-200849
sg31820
I-201030
sg31822
I-200370
sg31824
I-50102
sg31826
I-200441
sg31828
I8884
sg31830
I8822
sg31832
I6376
sg31834
I-50262
sg31836
I-200776
sg31838
I-200900
sg31840
I2184
sg31842
I-200679
sg31844
I-201064
sg31846
I-201032
sg31848
I-200563
sg31850
I200020
sg31852
I-200166
sg31854
I-89142
sg31856
I-89146
sg31858
I-200561
sg31860
I-200675
sg31862
I209802
sg31864
I12529
sg31866
I-200195
sg31868
I-200463
sg31870
I-209802
sg31872
I-200350
sg31874
I-200831
sg31876
I-200896
sg31878
I12510
sg31880
I10289
sg31882
I6443
sg31884
I10434
sg31886
I-200451
sg31888
I200005
sg31890
I8995
sg31892
I-200871
sg31894
I10431
sg31896
I-200162
sg31898
I8894
sg31900
I80
sg31902
I-200555
sg31904
I12508
sg31906
I-200287
sg31908
I-201093
sg31910
I-200945
sg31912
I8620
sg31914
I8904
sg31916
I-200430
sg31918
I8769
sg31920
I-200436
sg31922
I-200772
sg31924
I50351
sg31926
I0
sg31927
I8918
sg31929
I-200694
sg31931
I-200854
sg31933
I-200710
sg31935
I8818
sg31937
I200044
sg31939
I-200511
sg31941
I2185
sg31943
I-200878
sg31945
I6126
sg31947
I8728
sg31949
I10427
sg31951
I-200386
sg31953
I8880
sg31955
S'2529/2-Wire 4x32 Matrix'
p32845
sg31957
I-200953
sg31959
I-200975
sg31961
S'1128/2-Wire 4x8 Matrix'
p32846
sg31963
I50406
sg31965
I5768
sg31967
I8689
sg31969
S'2576/2-Wire Sixteen 4x1 Mux'
p32847
sg31971
I10119
sg31973
I-200088
sg31975
I8609
sg31977
I-200531
sg31979
I6145
sg31981
I10219
sg31983
I6381
sg31985
I-200580
sg31987
I-200090
sg31989
I8731
sg31991
I-200103
sg31993
I8963
sg31995
I9001
sg31997
I6109
sg31999
S'2568/31-SPST'
p32848
sg32001
I-200460
sg32003
I-200870
sg32005
S'2530/4-Wire Dual 16x1 Mux'
p32849
sg32007
I10097
sg32009
I-200378
sg32011
I-200582
sg32013
I6412
sg32015
I-200860
sg32017
I-201047
sg32019
I4360
sg32021
I-89124
sg32023
I-200435
sg32025
S'2503/2-Wire 4x6 Matrix'
p32850
sg32027
I8718
sg32029
I-200400
sg32031
I10302
sg32033
I-200812
sg32035
I-200220
sg32037
I-200324
sg32039
S'1129/2-Wire Dual 4x32 Matrix'
p32851
sg32041
I2456
sg32043
I-200587
sg32045
I-50002
sg32047
I-200218
sg32049
I209800
sg32051
I-200493
sg32053
I0
sg32054
I-50251
sg32056
I6344
sg32058
I-200288
sg32060
I-89136
sg32062
I-200127
sg32064
I10080
sg32066
I-200667
sg32068
I10047
sg32070
I8985
sg32072
I8697
sg32074
I-200658
sg32076
I8684
sg32078
I-200513
sg32080
I-200473
sg32082
I-200366
sg32084
I10152
sg32086
I8756
sg32088
I50254
sg32090
I6378
sg32092
I-200316
sg32094
I4680
sg32096
I304
sg32098
I-200064
sg32100
I-200211
sg32102
I5120
sg32104
I-200780
sg32106
I-50253
sg32108
I-200079
sg32110
I10286
sg32112
I5143
sg32114
I6202
sg32116
I8971
sg32118
I-201013
sg32120
I-200265
sg32122
I50410
sg32124
I1
sg32125
I-200016
sg32127
I-201010
sg32129
S'2527/2-Wire Dual 16x1 Mux'
p32852
sg32131
I-200635
sg32133
I-200113
sg32135
I10271
sg32137
I-50101
sg32139
I6414
sg32141
I6129
sg32143
I100
sg32145
I12523
sg32147
I-200328
sg32149
I2068
sg32151
I-201067
sg32153
I5175
sg32155
I-200208
sg32157
I-50015
sg32159
I-200395
sg32161
I-200278
sg32163
I-88709
sg32165
I-200124
sg32167
I2099
sg32169
I6190
sg32171
I-200747
sg32173
I-200061
sg32175
S'1127/1-Wire 64x1 Mux'
p32853
sg32177
I8709
sg32179
I6168
sg32181
I-200434
sg32183
I4457
sg32185
I-200192
sg32187
I-200594
sg32189
I-200988
sg32191
I-200516
sg32193
I6314
sg32195
I200026
sg32197
I-200232
sg32199
I-200884
sg32201
I-200437
sg32203
I-200709
sg32205
I5155
sg32207
I8662
sg32209
I200008
sg32211
I-200794
sg32213
I-200070
sg32215
I-201023
sg32217
I-200347
sg32219
I8583
sg32221
I-200534
sg32223
I-200917
sg32225
I50408
sg32227
I6435
sg32229
I6227
sg32231
I-89132
sg32233
I8738
sg32235
I-200105
sg32237
I8923
sg32239
I-200887
sg32241
I-200706
sg32243
I-200281
sg32245
I-200810
sg32247
I-200241
sg32249
I8959
sg32251
I-201085
sg32253
I-200006
sg32255
I8896
sg32257
S'1130/2-Wire 4x32 Matrix'
p32854
sg32259
I50355
sg32261
I6427
sg32263
I8881
sg32265
I6444
sg32267
I-200408
sg32269
I-200573
sg32271
I289
sg32273
I-200572
sg32275
I200014
sg32277
I12553
sg32279
I10435
sg32281
I-201038
sg32283
I-200229
sg32285
I-1
sg32287
I-200726
sg32289
S'1175/2-Wire 95x1 Mux'
p32855
sg32291
I8713
sg32293
S'2596/Dual 6x1 Mux'
p32856
sg32295
I-200911
sg32297
I-200116
sg32299
I6132
sg32301
I-200648
sg32303
I1600
sg32305
I8922
sg32307
I10163
sg32309
I-54000
sg32311
I-89131
sg32313
I-201060
sg32315
I-200438
sg32317
I-200742
sg32319
I-200205
sg32321
I8996
sg32323
I-200759
sg32325
I-200107
sg32327
I-200361
sg32329
I6286
sg32331
I1
sg32332
I-200610
sg32334
I-200081
sg32336
I-200401
sg32338
I8603
sg32340
I-200894
sg32342
I-200372
sg32344
I8695
sg32346
I-50450
sg32348
I-200696
sg32350
I200009
sg32352
I8575
sg32354
I200031
sg32356
I4724
sg32358
I6287
sg32360
I8717
sg32362
I1608
sg32364
I-200150
sg32366
I-200983
sg32368
I6216
sg32370
I-200698
sg32372
I12488
sg32374
S'1127/2-Wire 32x1 Mux'
p32857
sg32376
I-89141
sg32378
I-200815
sg32380
I6124
sg32382
I-200748
sg32384
I-50650
sg32386
I-89125
sg32388
I10102
sg32390
I-200255
sg32392
I10100
sg32394
S'1130/1-Wire Sixteen 16x1 Mux'
p32858
sg32396
I6411
sg32398
I10045
sg32400
I-200989
sg32402
I-200362
sg32404
I-50001
sg32406
I5714
sg32408
I8727
sg32410
I-200215
sg32412
I-200544
sg32414
I10251
sg32416
I10440
sg32418
I-200623
sg32420
I1686
sg32422
I-50003
sg32424
I1793
sg32426
I-200495
sg32428
I6302
sg32430
I-200963
sg32432
I-50007
sg32434
I-200096
sg32436
I-200251
sg32438
S'2532/1-Wire Dual 16x16 Matrix'
p32859
sg32440
I10189
sg32442
I-200662
sg32444
I-200284
sg32446
I-201004
sg32448
I12588
sg32450
I-200484
sg32452
I5975
sg32454
I8958
sg32456
I10325
sg32458
I-200089
sg32460
I4885
sg32462
I325
sg32464
I-201025
sg32466
I-200927
sg32468
I6146
sg32470
I-200146
sg32472
I-50208
sg32474
I-200779
sg32476
I-50151
sg32478
I-200830
sg32480
I10187
sg32482
I50002
sg32484
I-200238
sg32486
I-200054
sg32488
I12582
sg32490
I10360
sg32492
I-200855
sg32494
I-200038
sg32496
I-200403
sg32498
I1
sg32500
I-200384
sg32502
I8711
sg32504
I-50601
sg32506
I10159
sg32508
I-200444
sg32510
I306
sg32512
I-54001
sg32514
I-200033
sg32516
I-200196
sg32518
I50010
sg32520
I-200818
sg32522
I4
sg32523
I5121
sg32525
I8604
sg32527
Nsg32528
I-200935
sg32530
I8679
sg32532
I-200179
sg32534
I-200614
sg32536
I4661
sg32538
I-200456
sg32540
I-200867
sg32542
I8719
sg32544
I-200383
sg32546
I6279
sg32548
Nsg32549
I8990
sg32551
I-201040
sg32553
I-200550
sg32555
I-200781
sg32557
I-200313
sg32559
I665
sg32561
I-200866
sg32563
I-200821
sg32565
I1602
sg32567
I-200306
sg32569
I6339
sg32571
I-200203
sg32573
I5967
sg32575
I-200842
sg32577
I10117
sg32579
I-200967
sg32581
I-200714
sg32583
S'2501/2-Wire 24x1 Amplified Mux'
p32860
sg32585
I6388
sg32587
I8688
sg32589
I-200583
sg32591
I6460
sg32593
I8857
sg32595
I-200339
sg32597
I-200765
sg32599
I8573
sg32601
I-200197
sg32603
I-200909
sg32605
I6413
sg32607
I-200595
sg32609
I-200951
sg32611
I5158
sg32613
I-50255
sg32615
I-200117
sg32617
I-200540
sg32619
I6112
sg32621
I-200417
sg32623
I-201006
sg32625
I10198
sg32627
I5011
sg32629
I-200185
sg32631
I8608
sg32633
I-200058
sg32635
I-200106
sg32637
S'2575/1-Wire 196x1 Mux'
p32861
sg32639
I-200875
sg32641
I1609
sg32643
I-201001
sg32645
I-200319
sg32647
I10179
sg32649
I-200293
sg32651
I-200243
sg32653
I50262
sg32655
I-200715
sg32657
I6438
sg32659
Nsg32661
I8680
sg32663
I12524
sg32665
I-200982
sg32667
I-200209
sg32669
I8760
sg32671
I8707
sg32673
L0L
sg32675
I8888
sg32677
I-50263
sg32679
I-50402
sg32681
I-200009
sg32683
I-50201
sg32685
I10388
sg32687
I8814
sg32689
I-200147
sg32691
I-200985
sg32693
I-200956
sg32695
I10150
sg32697
I-200670
sg32699
I-50104
sg32701
I-200814
sg32703
I-200908
sg32705
I10426
sg32707
I-200087
sg32709
I-200891
sg32711
I-200955
sg32713
I660
sg32715
I10184
sg32717
I2054
sg32719
I-200684
sg32721
S'2530/1-Wire 8x16 Matrix'
p32862
sg32723
S'2530/1-Wire Octal 16x1 Mux'
p32863
sg32725
I-200663
sg32727
I-200972
sg32729
I4464
sg32731
I-50100
ssg20
(dp32864
S'DAQmxFailed'
p32865
(S'((%s)<0)'
p32866
(lp32867
I0
atp32868
ssg22
(dp32869
sg24
(dp32870
S'uInt64'
p32871
(lp32872
S'unsigned __int64'
p32873
asS'int32'
p32874
(lp32875
S'signed long'
p32876
asS'int16'
p32877
(lp32878
S'signed short'
p32879
asS'DAQmxDoneEventCallbackPtr'
p32880
(lp32881
S'int32'
p32882
a((S'taskHandle'
p32883
(lp32884
S'TaskHandle'
p32885
aNtp32886
(S'status'
p32887
(lp32888
S'int32'
p32889
aNtp32890
(S'callbackData'
p32891
(lp32892
S'void'
p32893
ag42
aNtp32894
tp32895
ag2570
ag42
asS'float64'
p32896
(lp32897
S'double'
p32898
asS'TaskHandle'
p32899
(lp32900
S'uInt32'
p32901
asS'bool32'
p32902
(lp32903
S'uInt32'
p32904
asS'uInt8'
p32905
(lp32906
S'unsigned char'
p32907
asS'int8'
p32908
(lp32909
S'signed char'
p32910
asS'DAQmxEveryNSamplesEventCallbackPtr'
p32911
(lp32912
S'int32'
p32913
a((S'taskHandle'
p32914
(lp32915
S'TaskHandle'
p32916
aNtp32917
(S'everyNsamplesEventType'
p32918
(lp32919
S'int32'
p32920
aNtp32921
(S'nSamples'
p32922
(lp32923
S'uInt32'
p32924
aNtp32925
(S'callbackData'
p32926
(lp32927
S'void'
p32928
ag42
aNtp32929
tp32930
ag2570
ag42
asS'uInt16'
p32931
(lp32932
S'unsigned short'
p32933
asS'int64'
p32934
(lp32935
S'__int64'
p32936
asS'uInt32'
p32937
(lp32938
S'unsigned long'
p32939
asS'float32'
p32940
(lp32941
S'float'
p32942
asS'DAQmxSignalEventCallbackPtr'
p32943
(lp32944
S'int32'
p32945
a((S'taskHandle'
p32946
(lp32947
S'TaskHandle'
p32948
aNtp32949
(S'signalID'
p32950
(lp32951
S'int32'
p32952
aNtp32953
(S'callbackData'
p32954
(lp32955
S'void'
p32956
ag42
aNtp32957
tp32958
ag2570
ag42
assssS'opts'
p32959
(dp32960
S'files'
p32961
(lp32962
S'NIDAQmx.h'
p32963
asg24
(dp32964
g26
g27
ssS'replace'
p32965
(dp32966
g32963
Nsss.