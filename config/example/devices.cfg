# This configuration file defines a set of simulated devices that allow some 
# of ACQ4's acquisition capabilities to be tested on any machine. 
# 
# Also included are example configuration for every type of device supported
# by ACQ4, commented out. These may be used to construct a working 
# device configuration file.



# First, define the NI DAQ device we will use. For use with a real DAQ, simply
# remove the line 'mock: True'. The name 'DAQ', defined here, will appear
# many times throughout the config to refer to this device.
DAQ:
    driver: 'NiDAQ'
    mock: True  # this is a fake device; remove this line for real NI DAQ devices.

    # Default mode for AI channels. Options are 'NRSE', 'RSE', and 'DIFF'
    # This may be overridden for individual channels.
    defaultAIMode: 'NRSE'

    # Default input/output voltage ranges
    defaultAIRange: [-10, 10]
    defaultAORange: [-10, 10]


# A simple device connected to the DAQ that uses one AI channel and one AO 
# channel. As with all of the following device definitions, the name 
# 'DaqDevice' is arbitrary.
DaqDevice:
    driver: 'DAQGeneric'
    channels:
        AIChan:
            device: 'DAQ'
            channel: '/Dev1/ai0'
            type: 'ai'
        AOChan:
            device: 'DAQ'
            channel: '/Dev1/ao0'
            type: 'ao'
    
# A simulated patch-clamp amplifier. It is connected to a Hodgkin-Huxley
# neuron model, allowing some of ACQ4's acquisition modules to be tested on
# a "real" system.
Clamp1:
    driver: 'MockClamp'
    simulator: 'builtin'  # Also supports 'neuron' if you have neuron+python
                            # installed. See lib/devices/MockClamp/neuronSim.py.
                            
    # Define two connections to the DAQ:
    Command:
        device: 'DAQ'
        channel: '/Dev1/ao0'
        type: 'ao'
    ScaledSignal:
        device: 'DAQ'
        channel: '/Dev1/ai5'
        mode: 'NRSE'
        type: 'ai'
        
    # Default holding values.
    icHolding: 0.0
    vcHolding: -65e-3


# A simulated motorized stage.    
Stage:
    driver: 'MockStage'
    transform:
        pos: (0, 0, 0)
        scale: (1, 1, 1)
        angle: 0

# A microscope device, providing a way to inform ACQ4 about the set of 
# objective lenses available and which is currently in use. 
Microscope:
    driver: 'Microscope'
    parentDevice: 'Stage'
    objectives:
        0:  # first slot always has a 5X objective
            5x_0.25NA:
                name: '5x 0.25na FLUAR'
                scale: 1.0 / 5.0
        1:  # second slot may have a 40x or 63x objective
            63x_0.9NA:
                name: '63x 0.9na Achroplan'
                scale: 1.0 / 63.0
                offset: 70*um, 65*um
            40x:
                name: '40x 0.75na Achroplan'
                scale: 1.0 / 40.0
                offset: -43*um, 9*um


# A simulated camera. Generates noise and calcium-indicator-like signals.
Camera:
    driver: 'MockCamera'
    parentDevice: 'Microscope'
    transform:                          ## transform defines the relationship between the camera's
                                        ## sensor coordinate system (top-left is usually 0,0 and
                                        ## pixels are 1 unit wide) and the coordinate system of its
                                        ## scopeDevice
        pos: (0, 0)
        scale: (5*2.581*um/px, -5*2.581*um/px)  # Calibrated at 2.581*um/px under 5x objective
                                                # for this example, we have inverted the y-axis of the camera.
        angle: 0

    exposeChannel:                                 ## Channel for recording expose signal
        device: 'DAQ'
        channel: '/Dev1/port0/line0'
        type: 'di'
    #triggerOutChannel: 'DAQ', '/Dev1/PFI5'        ## Channel the DAQ should trigger off of to sync with camera
    triggerInChannel:                              ## Channel the DAQ should raise to trigger the camera
        device: 'DAQ'
        channel: '/Dev1/port0/line1'
        type: 'do'

    defaults:
        exposure: 10*ms

# A laser device. Simulating a shutter opening currently has no effect.
Laser-UV:
    driver: 'Laser'
    parentDevice: 'Microscope'
    pulseRate: 100*kHz                      ## Laser's pulse rate
    power: 100*mW
    shutter:
        device: 'DAQ'
        channel: '/Dev1/line30'           ## channel for triggering shutter
        type: 'do'
        delay: 10*ms                      ## how long it takes the shutter to fully open
    wavelength: 355*nm
    alignmentMode:
        shutter: True
    defaultPowerMeter: 'NewportMeter'

# Galvanometric scan mirrors. Simulating motion of the mirrors currently has 
# no effect.
Scanner:
    driver: 'Scanner'
    parentDevice: 'Microscope'
    XAxis:
        device: 'DAQ'
        channel: '/Dev1/ao2'
        type: 'ao'
    YAxis:
        device: 'DAQ'
        channel: '/Dev1/ao3'
        type: 'ao'
    defaultCamera: "Camera"
    defaultLaser: "Laser"
    commandLimits: -1.5, 1.5

# Photomultiplier device needs nothing more than to read from a DAQ AI channel.
PMT:
    driver: 'DAQGeneric'
    channels:
        Input:
            device: 'DAQ'
            channel: '/Dev1/ai0'
            type: 'ai'

# Pockels cell is just an analog output
PockelsCell:
    driver: 'DAQGeneric'
    channels:
        Switch:
            device: 'DAQ'
            channel: '/Dev1/ao2'
            type: 'ao'


### Below are example configurations for real devices. Uncomment these and modify
### to your needs.

# Multiclamp 700A/B, single channel. 
# To use two channels, simply define a second device with the appropriate 
# device string. Note: if an incorrect device string is used, an error message
# will be pronted which lists the available device strings.
# 
# Clamp1:
#     driver: 'MultiClamp'
#     channelID: 'model:MC700A,com:3,dev:0,chan:1'
#     commandChannel: 
#         device: 'DAQ'
#         channel: '/Dev1/ao0'
#         type: 'ao'
#     primaryChannel: 
#         device: 'DAQ'
#         channel: '/Dev1/ai10'
#         mode: 'NRSE'
#         type: 'ai'
#     secondaryChannel: 
#         device: 'DAQ'
#         channel: '/Dev1/ai9'
#         mode: 'NRSE'
#         type: 'ai'
#     vcHolding: -65e-3
#     icHolding: 0.0
#     defaults:   # Default amplifier state. The amplifier will be 
#                 # reconfigured with these options every time ACQ4 is 
#                 # started. 
#         IC:
#             HoldingEnable: False
#             Holding: 0.0
#             TestSignalEnable: False
#             #SlowCurrentInjEnable: False
#             NeutralizationEnable: True
#             #OscKillerEnable: True
#             PrimarySignalGain: 2
#             PrimarySignalLPF: 20e3
#             PrimarySignalHPF: 0
#             OutputZeroEnable: False
#             BridgeBalEnable: True
#             BridgeBalResist: 15e6
#         VC:
#             HoldingEnable: False
#             Holding: 0.0
#             TestSignalEnable: False
#             #SlowCurrentInjEnable: False
#             #NeutralizationEnable: False
#             WholeCellCompEnable: False
#             RsCompEnable: False
#             #OscKillerEnable: True
#             PrimarySignalGain: 2
#             PrimarySignalLPF: 20e3
#             PrimarySignalHPF: 0
#             OutputZeroEnable: False
#             LeakSubEnable: False


# AxoPatch200:
#     driver: 'AxoPatch200'
#     version: '200B'  # supports 200, 200A, and 200B
#     ModeChannel: 
#         device: 'DAQ' 
#         channel: '/Dev1/ai13'
#         type: 'ai'
#     GainChannel: 
#         device: 'DAQ' 
#         channel: '/Dev1/ai14'
#         type: 'ai'
#     LPFChannel: 
#         device: 'DAQ' 
#         channel: '/Dev1/ai15'
#         type: 'ai'
#     Command: 
#         device: 'DAQ' 
#         channel: '/Dev1/ao0'
#         type: 'ao'
#     ScaledSignal: 
#         device: 'DAQ' 
#         channel: '/Dev1/ai5'
#         type: 'ai'
#     icHolding: 0.0
#     vcHolding: -65e-3


# AxoProbe1A:
#     driver: 'DAQGeneric'
#     channels:
#         Command:
#             device: 'DAQ' 
#             channel: '/Dev1/ao0'
#             type: 'ao'
#             units: u'A' 
#             scale: 0.5*1e9 ## scale is for headstage H = 0.1L, I = 20H nA/V = 2nA/V : 1V/2nA
#             userScale: 1e-12  ## tells scale for output to be in units of pA
#         ScaledSignalV:
#             device: 'DAQ' 
#             channel: '/Dev1/ai3'
#             type: 'ai'
#             units: u'V'
#             scale: 10 ## net gain is fixed at 10 (if f1 switch is set to 10V1): 1V/0.1V
#         ScaledSignalI:
#             device: 'DAQ' 
#             channel: '/Dev1/ai4'
#             type: 'ai'
#             units: u'A'
#             scale: 1e8 ## scale is H = 0.1, gain = 10/H mV/nA = 100 mV/nA: 1V/10nA


# Scientifica SliceScope stage
#
# SliceScope:
#     driver: 'Scientifica'
#     port: 'com104'
#     scale: -1e-6, -1e-6, 1e-6  # convert um to m, reverse Z axis to make +Z point upward
#     params:
#         # All parameters are optional. Some values (especially `currents` and `axisScale`
#         # depend on the type of device. For descriptions, see drivers/Scientifica/scientifica.py
#         # or the Scientifica API documentation. 
#         #currents: 200, 125  # be careful to follow manufacturer specs!
#         axisScale: 5.12, -5.12, -6.4  # +x points right, +y points away, +z points up
#         joyDirectionX: True
#         joyDirectionY: True
#         joyDirectionZ: False
#         minSpeed: 1000
#         maxSpeed: 30000
#         accel: 500
#         joySlowScale: 4
#         joyFastScale: 80
#         joyAccel: 500


# Scientifica condenser / motorized objective changer
# This is used to automatically detect currently used objective. This requires the Microscope
# configuration to include the line:
#    objectiveSwitch: 'Condenser', 'MOC'
#
#Condenser:
#    driver: 'Scientifica'
#    port: 'com105'
#    scale: -1e-6, -1e-6, 1e-6  # convert um to m
#    switches:
#        # Emit a signal when MOC switches position.
#        # Switch to objective 0 if x goes below 0.0456, and to objective 1 if x goes above 0.0463.
#        # (these values will likely vary between devices)
#        MOC: ([0.0456, 0.0463], None, None)


# An example Scientifica MicroStar manipulator.
# The 'Scientifica' driver should work with any type of Scientifica motion device.
# Note that the `currents` and `axisScale` parameters depend on the device type. 
# 
# MicroStar1:
#     driver: 'Scientifica'
#     port: 'com95'
#     pitch: 24  # pipette approach angle
#     scale: 1e-6, 1e-6, -1e-6  # convert um to m, +z points up
#     params:
#         # All parameters are optional. Some values (especially `currents` and `axisScale`
#         # depend on the type of device. For descriptions, see drivers/Scientifica/scientifica.py
#         # or the Scientifica API documentation. 
#         currents: 230, 220  # be careful to follow manufacturer specs!
#         axisScale: -6.4, -6.4, -6.4  # need negative z value to get correct approach angle
#         joyDirectionX: False
#         joyDirectionY: False
#         joyDirectionZ: False
#         minSpeed: 1000
#         accel: 500
#         joySlowScale: 4
#         joyFastScale: 80
#         joyAccel: 500

# A pipette or electrode attached to a motorized manipulator. 
# This provides extra control for tracking and positioning pipette tips. 
#
# Pipette1:
#     driver: 'Pipette'
#     parentDevice: 'MicroStar1'
#     scopeDevice: 'Microscope'
#     searchHeight: 1*mm



# Sutter MPC-200 stage and manipulator controllers. Each device represents one 
# drive on the controller; for more drives simply add a new device and set the
# drive number accordingly.
# SutterStage:
#     driver: 'SutterMPC200'
#     port: "COM10"
#     drive: 1
#     scale: 1.0, 1.0, 1.0  ## If the MPC200 does not report its scale 
#                             ## correctly, then corrections may be applied
#                             ## here.

# Sutter MP-285 stage and manipulator controllers. NOTE--The MP-285 has a design
# flaw: if you turn an attached ROE while the computer is communicating with the
# controller, then the controller will crash. This can be circumvented with 
# custom interfacing hardware (see lib/drivers/SutterMP285/mp285_hack).
# SutterStage:
#     driver: 'SutterMP285'
#     port: "COM10"
#     baud: 19200
#     scale: 1.0, 1.0, 1.0  ## MP285 _should_ report its own scale correctly; 
#                             ## no need to adjust it here.






# Thorlabs MFC-1 focus control motor
# FocusMotor:
#     driver: 'ThorlabsMFC1'
#     port: 'COM9'
#     parentDevice: 'SutterStage'
#     scale: 1.0, 1.0, 1e-6 * 85e-6 / 10e-3   # calibrated 2015.02


# Device that polls digital IO ports to determine state of hardware switches. 
# This is used to determine which objective is in use on 2-objective microscopes.
# Switch:    
#     driver: 'DIOSwitch'
#     channels: 
#         objective:
#             device: 'DAQ'
#             channel: '/Dev1/line12'  ## indicates the state of the objective switch
#         PMT:
#             device: 'DAQ'
#             channel: '/Dev1/line6'   ## detects when PMT aperture is open
#     interval: 300e-3  ## poll for changes every 300ms



# Example microscope device which is rigidly-connected to a motorized 
# stage (defined above). It also uses the 'Switch' device to determine the
# objective lens currently in use.
# Microscope:
#     driver: 'Microscope'
#     parentDevice: 'SutterStage'
#     objectiveSwitch: 'Switch', 'objective'  ## monitor the 'objective' channel from the 'Switch' device
#     objectives:  
#         ## All scales in m/px
#         0:
#             63x0.9:                            ## unique identifier
#                 name: '63x 0.9na Achroplan'    ## descriptive name
#                 scale: 0.205*um/px
#                 offset: 70*um, 65*um
#             63x0.95:
#                 name: '63x 0.95na Achroplan'
#                 scale: 0.205*um/px
#                 offset: 70*um, 65*um
#             40x:
#                 name: '40x 0.75na Achroplan'
#                 scale: 0.324*um/px
#                 offset: -43*um, 9*um
#         1:
#             5x0.25:
#                 name: '5x 0.25na FLUAR'
#                 scale: 2.581*um/px

# Complete example for Photometrics cameras, including TTL exposure and trigger 
# lines. This camera is rigidly connected to the 'Microscope', which is defined 
# above.
# 
# Camera:
#     driver: 'PVCam'
#     serial: 'PM1394Cam'
#     parentDevice: 'Microscope'          ## tells us that the camera is rigidly connected to the scope, and
#                                         ##   thus will inherit its transformations.
#     transform:                          ## transform defines the relationship between the camera's
#                                         ##   sensor coordinate system (top-left is usually 0,0 and
#                                         ##   pixels are 1 unit wide) and the coordinate system of its
#                                         ##   parentDevice. This is where we would rotate/flip the camera if needed.
#         pos: (0, 0)
#         scale: (1, -1)
#         angle: 0
#     exposeChannel:                      ## Channel for recording expose signal
#         device: 'DAQ'
#         channel: '/Dev1/port0/line8'
#         type: 'di'
#     triggerOutChannel:                  ## Channel the DAQ should trigger off of to sync with camera
#         device: 'DAQ'
#         channel: '/Dev1/PFI5'
#     triggerInChannel:                   ## Channel the DAQ should raise to trigger the camera
#         device: 'DAQ'
#         channel: '/Dev1/port0/line28'
#         type: 'do'
#         invert: True                    ## invert because Quantix57 triggers on TTL LOW
#     params:                             ## default parameters to apply to camera at startup
#         #TEMP_SETPOINT:  -2000
#         exposure: 10e-3    


# Simple example for QImaging cameras. No trigger/exposure lines are defined
# in this example. 
# 
# Camera:
#     driver: 'QCam'
#     parentDevice: 'Microscope'          ## tells us that the camera is rigidly connected to the scope, and
#                                         ##   thus will inherit its transformations.
#     transform:                          ## transform defines the relationship between the camera's
#                                         ##   sensor coordinate system (top-left is usually 0,0 and
#                                         ##   pixels are 1 unit wide) and the coordinate system of its
#                                         ##   parentDevice. This is where we would rotate/flip the camera if needed.
#         pos: (0, 0)
#         scale: (1, 1)
#         angle: 0


# Example Hamamatsu Orca camera accessed via MicroManager.
# Note: This camera is known to work with MicroManager version 1.4.19, but not 1.4.22.
# 
# Camera:
#     driver: 'MicroManagerCamera'
#     mmAdapterName: 'HamamatsuHam'
#     mmDeviceName: 'HamamatsuHam_DCAM'
#     parentDevice: 'Microscope'
#     transform:
#         pos: (0, 0)
#         scale: (4.088 / 0.63 * um/px, -4.088 / 0.63 * um/px)
#         angle: 0
# 
#     params:                             ## default parameters to apply to camera at startup
#         #TEMP_SETPOINT:  -2000
#         exposure: 10e-3
#         binning: 4,4    


# Several 'DAQGeneric' devices follow. These simply provide an interface for 
# controlling specific ports on the DAQ.
# 
# PockelCell:
#     driver: 'DAQGeneric'
#     channels:
#         Switch:
#             device: 'DAQ'
#             channel: '/Dev1/ao1'
#             type: 'ao'
#             holding: 0


# PMT:
#     driver: 'DAQGeneric'
#     channels:
#         Input:
#             device: 'DAQ'
#             channel: '/Dev1/ai0'
#             type: 'ai'
#             
#         PlateVoltage:
#             device: 'DAQ'
#             channel: '/Dev1/ai1'
#             type: 'ai'


# Photodiode-UV:
#     driver: 'DAQGeneric'
#     channels:
#         Photodiode:
#             device: 'DAQ'
#             channel: '/Dev1/ai7'
#             type: 'ai'
#             scale: 49.1*mW/V ## calibrated 2011.11.09
#             offset: 0.0*mV
#             units: 'W'
#             settlingTime: 2*ms
#             measurementTime: 50*ms


# Laser-Blue:
#     driver: 'Laser'
#     scope: 'Microscope'
#     power: 10*mW
#     wavelength: 465*nm
#     alignmentMode: None

# A basic laser device. This is for a Q-switched DPSS laser with a uniblitz
# shutter. 
#
# Laser-UV:
#     driver: 'Laser'
#     scope: 'Microscope'
#     pulseRate: 100*kHz                      ## Laser's pulse rate
#     powerIndicator: 
#         channel: 'Photodiode-UV', 'Photodiode'      ## photocell channel for immediate recalibration
#         rate: 1.2*MHz                     ## sample rate to use when measuring power
#     shutter:
#         device: 'DAQ'
#         channel: '/Dev1/line30'           ## channel for triggering shutter
#         type: 'do'
#         delay: 10*ms                      ## how long it takes the shutter to fully open
#     qSwitch:
#         device: 'DAQ'
#         channel: '/Dev1/line29'           ## channel for triggering q-switch
#         type: 'do'
#     wavelength: 355*nm
#     alignmentMode:
#         qSwitch: False                    ## For alignment, shutter is open but QS is off
#         shutter: True
#     defaultPowerMeter: 'NewportMeter'
#     #calibrationWarning: 'Filter in?'


# ## for low-level acces to shutter and q-switch
# Laser-UV Raw:
#     driver: 'DAQGeneric'
#     channels:
#         shutter:
#             device: 'DAQ'
#             channel: '/Dev1/line30'
#             type: 'do'
#             holding: 0
#         qSwitch:
#             device: 'DAQ'
#             channel: '/Dev1/line29'
#             type: 'do'
#             holding: 0


# Example Coherent laser. This has been tested with a Chameleon Vision II.
#
# Laser-2P:
#     driver: 'CoherentLaser'
#     port: 9
#     baud: 19200
#     scope: 'Microscope'
#     pulseRate: 90*MHz                      ## Laser's pulse rate
#     pCell:
#         device: 'DAQ'
#         channel: '/Dev1/ao1'
#         type: 'ao'
#     shutter:
#         device: 'DAQ'
#         channel: '/Dev1/line31'           ## channel for triggering shutter
#         type: 'do'
#         delay: 30*ms                      ## how long it takes the shutter to fully open
#     defaultPowerMeter: 'NewportMeter'
#     calibrationWarning: 'Filter in?'
#     alignmentMode:
#         pCell: 100*mV
#     #pCell:
#         #channel: 'DAQ', 'Dev1/ao2'


# ## for low-level access to shutter and pCell
# Laser-2P-Raw:
#     driver: 'DAQGeneric'
#     channels:
#         pCell:
#             device: 'DAQ'
#             channel: '/Dev1/ao1'
#             type: 'ao'
#         shutter:
#             device: 'DAQ'
#             channel: '/Dev1/line31'           ## channel for triggering shutter
#             type: 'do'
#             delay: 10*ms                      ## how long it takes the shutter to fully open


# Galvanometric scan mirrors.
# Scanner:
#     driver: 'Scanner'
#     parentDevice: 'Microscope'       ## Scanner is rigidly connected to scope, inherits its transformations.
#     calibrationDir: 'config\\ScannerCalibration'
#     XAxis: 
#         device: 'DAQ'
#         channel: '/Dev1/ao2'
#         type: 'ao'
#     YAxis: 
#         device: 'DAQ'
#         channel: '/Dev1/ao3'
#         type: 'ao'
#     defaultCamera: "Camera"
#     defaultLaser: "Laser-UV"
#     commandLimits: -3, 3
#     #offVoltage: 0, -4    ## "off" position
#     shutterLasers: ['Laser-UV']  ## list of lasers for which we should simulate a shutter by default


# ## For raw access to the scan mirror voltages.
# Scanner-Raw:
#     driver: 'DAQGeneric'
#     channels:
#         XAxis:
#             device: 'DAQ'
#             channel: '/Dev1/ao2'
#             type: 'ao'
#             holding: 0.0
#         YAxis:
#             device: 'DAQ'
#             channel: '/Dev1/ao3'
#             type: 'ao'
#             holding: 0.0


# Stimulation electrode
# Stim0:
#     driver: 'DAQGeneric'
#     channels:
#         Command:
#             device: 'DAQ'
#             channel: '/Dev1/ao1'
#             type: 'ao'
#             units: u'A'
#             scale: 10*V / 10*mA
# #        Readout:
# #            channel: 'DAQ', '/Dev1/ai8'
# #            type: 'ai'
# #            units: u'A'
# #            scale: 1*V / 1*mA


# Analog temperature readout
# Temperature:
#     driver: 'DAQGeneric'
#     channels:
#         BathTemp:
#             device: 'DAQ'
#             channel: '/Dev1/ai4'
#             type: 'ai'
#             units: 'C'
#             scale: 10*C/V


# TTL-activated puffer valve
# Puffer:
#     driver: 'DAQGeneric'
#     channels:
#         Command:
#             device: 'DAQ'
#             channel: '/Dev1/port0/line26'
#             type: 'do'
#             holding: 0


# Foot switch used for triggering tasks.
# FootSwitch:
#     driver: 'Trigger'
#     channels:
#         DAQ: '/Dev1/PFI5'


# LED-Blue:
#     driver: 'DAQGeneric'
#     channels:
#         Command:
#             device: 'DAQ'
#             channel: '/Dev1/port0/line27'
#             type: 'do'
#             holding: 0


# Laser power meter used for calibrating laser attenuation
# NewportMeter:
#     driver: 'DAQGeneric'
#     channels:
#         Power [100mW max]:
#             device: 'DAQ'
#             channel: '/Dev1/ai12'
#             type: 'ai'
#             scale: 100*mW/V   
#             offset: -5*mV
#             units: 'W'
#             settlingTime: 4*s
#         #Power [1W max]:
#             #device: 'DAQ'
#             #channel: '/Dev1/ai12'
#             #type: 'ai'
#             #scale: 1.0 / 1.0   # 1W/V
#             #units: 'W'
#             #settlingTime: 4*s


## Spare AI ports for general use as oscilloscope.
# Scope:
#     driver: 'DAQGeneric'
#     channels:
#         AI14:
#             device: 'DAQ'
#             channel: '/Dev1/ai14'
#             type: 'ai'
#             units: 'V'
#         AI15:
#             device: 'DAQ'
#             channel: '/Dev1/ai15'
#             type: 'ai'
#             units: 'V'

